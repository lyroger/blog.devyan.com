<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>罗琰的技术博客</title>
  <subtitle>积累与分享成长的技术经验</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lyroger.github.io/"/>
  <updated>2017-01-11T08:38:35.000Z</updated>
  <id>http://lyroger.github.io/</id>
  
  <author>
    <name>luoyan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2016年个人总结</title>
    <link href="http://lyroger.github.io/2017/01/11/2016%E5%B9%B4%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://lyroger.github.io/2017/01/11/2016年个人总结/</id>
    <published>2017-01-11T03:29:48.000Z</published>
    <updated>2017-01-11T08:38:35.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>  2016年已经过去快半个月了，其实早就有想法想要给自己这一年来总结一下，最近也一直忙着公司年底年会的事情，心态也一直没有收拾好，所以也就一直拖到现在。</p>
<h4 id="离职篇"><a href="#离职篇" class="headerlink" title="离职篇"></a>离职篇</h4><hr>
<p>  3月份从TCL离职，找了好几家公司面试，大的小的都有，面试结果都还不错，可感觉如今的iOS市场行情没有了前两年的效应了，能给的待遇都不太高，有些公司听了我的要求，都没有了下文了。从换工作那段时间来看，接到的电话，收到的邮件，都没有了以前的频繁了，已经能完全感觉iOS寒冬的到来了。<br>  由于在TCL就职时，我们做的是健康医疗方面的事情，所以在换工作的时候，大部分收到的都是做健康医疗方面公司的面试邀请，偶尔也还会收到做车友互联相关行业的公司邀请，其中最让我感觉无头绪的公司就是中兴：一面时是一个技术负责人，面完后他觉得ok，过了一天后叫HR联系我过去再面，说是能给的上我的待遇要求，可过去后，既然是笔试，然后就是他们老大的面谈，面谈的时候我怎么都感觉他要的不是一个技术人员，而是一个产品经理，因此后面我也就被委婉的拒绝了。其次让我感觉很没经验的一次面试的公司就是嗒嗒巴士了：那天下午下班后过去了嗒嗒巴士面试，三个iOS开发人员，我过去的比较晚，很多人都已经下班了，只留下了一个iOS开发技术人员，刚走进办公室，那位面试我的面试人员一身的紧张感，感觉是第一次面试别人，开始也不知道从何面起，随便找了些基础的问题问了几遍，然后问了问我平时的开发习惯，平时用代码写的多还是用StoryBoard多，我跟他说了实话，很少用的StoryBoard，除了偶尔写Demo的时候会用到，大部分都是用的纯代码写的。他想了想，又问了其他问题，然后感觉又不知道问什么了。转来转去又来问关于StoryBoard方面的知识，并没有什么深入的问题，也难怪了，后来了解到，他们开发的项目都是用的StoryBoard开发的。再次让我历经最久的一次面试是在就医160了，下午如约两点到了他们公司，地址还真不好找，幸好每次都喜欢提前到，不然还真迟到了。一开始HR给了一份笔试题给到我，让我在他们的休息区写题。题目还有点多，选择题、填空题、判断题、简答题、问答题、还有个算法题。写了一个小时，总算是写完了。给到他们，然后他们技术负责人在开会，说实话，这时候不是应该给我一杯暖开水吗？谁在乎你呢？好好等吧，等了大半个小时，总算来了，然后就进入正题，说实话，跟这位面试官还真可以聊的，两个人都能对一个问题讨论的很好，不管是说对技术上还是在以前的工作经验上，聊了一个多小时，感觉他还挺满意的，然后说他们部门经理也要面试我，让我再等一下，这一等又是半个小时过去，还好我比较有耐心吧，下午也没安排其他面试。等到部门经理来了后，第一感觉他是一个很稳重的人，不急不躁的，一开始上来就给了一个算法题目让我想想，看我的思维是怎么样的，现在已经不记得那个算法题目了，不过他也挺有耐心的，一直让我想，其实当时那个算法题目一点眉目都没有，感觉当时再想多久都想不出来，但他还是坚持让我多想想。我想的时候他也没打扰我，在假装的看我的简历，看我的笔试题，看了很多遍。等面完他之后，我以为就结束了，没想到他们还要HR那边面试，HR那边还不止一个人面，两个人一起，一个人记录，一个人跟我谈话，记录的人也偶尔会插上几句话。这一聊就是近两个小时，说实话，那个时候我喉咙都已经干了，一下午都没见过一杯水。直至晚上七点多才面试完，我也是醉了吧。走的时候，我都不太报希望来这个公司上班了。但是过了两三天，他们HR给我来电说面试通过了，还能给到我想要的薪水。但这个时候我却已经答应了我目前上班这几公司入职了。目前这家公司其实也是以前的老领导们创业的一家公司，寄托在一家房地产集团公司下面。</p>
<h4 id="新公司"><a href="#新公司" class="headerlink" title="新公司"></a>新公司</h4><hr>
<p>  入职后，由于公司是一家初创的创业公司，还有很多相关人员都没有相继入职，入职第一天就跟另一个做安卓的同事跟着领导飞到了上海总部集团那边出差了解项目。也借此项目出差机会，第一次来到了上海，看到了中国最高楼，看到了东方明珠，看到了上海外滩。不过都很匆忙，就连跟同学聚个餐都是匆匆忙忙。也感谢高中班长同学带着我领略了上海的繁华。说多了感觉像是乡下人进城的感觉哈。<br>  出差三天后回深圳，来新公司正式上班已步入四月份了，第一个月大家都是在相互了解，相互磨合公司的工作方式，公司也还没给到具体的项目，基本也是在维护从上海那边带回来的项目，工作量也挺少的，大部分都是以开会来度过这段时间，要么做一些技术分享，要么做一些管理方面的培训，搭建环境，偶尔领导会做个大讲坛，谈谈我们公司的文化及以后的发展计划。<br>  步入五月份时，终于等到项目需求的到来，但同时也等到了目标，集团希望我们能在六月底上一个版本，替换目前使用的APP和后台。这也是我们第一个项目，也是大家第一次磨合的项目，大家的态度其实很积极，当然加班加多了，需求的改动，时间的压力，也会让一些同事暴露一些不耐烦的态度。直到整个项目测试完成验收，公司组织了一次去珠海长隆完了几天，让大家好好放松放松了下。<br>  后续集团内需要的项目其实还挺多的，客户端的人员并不是很多，而且响应的需求也并不能达到集团领导所需要的期望，所以公司也希望能够快速响应集团领导们的需求，快速做出响应的产品，于是乎，Hybrid App便在公司形成了，我在<a href="http://blog.devyan.cn/2016/09/23/使用Cordova搭建混合框架/" target="_blank" rel="external">使用Cordova搭建混合框架</a>文章中也稍微提到过此事，但主要还是介绍如何搭建Hybrid App框架的搭建。</p>
<h4 id="我的收获"><a href="#我的收获" class="headerlink" title="我的收获"></a>我的收获</h4><hr>
<ul>
<li>来到新公司，我的职责也开始发生了变化，也不在是存粹的做一名开发者了，同时还要兼顾公司iOS开发方面的技术支持及管理和培养，简称专业线负责人吧。</li>
<li>由于后期公司大部分产品的开发框架都是由Hybrid APP，因此对这个框架也是日益熟悉，同时也对js和OC之间相互交互更加深入的了解,这里我也写了一篇关于JS与OC之间的交互的文章:<a href="http://blog.devyan.cn/2016/11/29/JS与OC交互/" target="_blank" rel="external">JS与OC交互</a>.</li>
<li>项目业务的开发也大部分转移到了H5端，我也有大量的时间去整理知识，对以前由于很多机械工作而导致很多理论的不清晰的点，都有机会去梳理一下了。</li>
<li>已经开始培养了看书籍的习惯了，希望自己以后能看更多的书籍，让自己补充跟多的内容。</li>
<li>在项目闲暇的情况下，我也组织了我们组内一起学习swift语言，并一起开发了一个项目。感觉对swift也可以开始上手了。</li>
<li>在生活上，今年也算是完成了一家大事，工作多年，也多多少少积累了些继续，所以也拿的出一些钱去付房款的首付了。</li>
<li>生活方面我也培养了一些兴趣了，比如游泳，也持续坚持了几个月，每次也可以坚持游一千五百米左右了。还有羽毛球的热情也逐渐上来了，公司每周四都会有羽毛球活动，我作为组织者，每周也一定会过去，再加上周三同学公司的羽毛球活动，他缺一个搭档，于是我也顺其自然的做了他的搭档，今年羽毛球线打断了两根，换了两次线。也给自己买了套羽毛球服，弄了一套完整的装备。至少看起来已经不像以前一样只是过来玩玩而已了。</li>
</ul>
<h4 id="今年的计划"><a href="#今年的计划" class="headerlink" title="今年的计划"></a>今年的计划</h4><hr>
<ul>
<li>继续会在iOS方面做一部分投入，希望自己专业知识不能放弃。具体落实应该会在算法、设计模式、架构、swift、新知识等方面的研究吧。</li>
<li>坚持写博客，也希望有更深层次的博客文章的发表。</li>
<li>希望自己今年能把看书变成自己生活中的一种常态，让自己有更多的知识。</li>
<li>兴趣爱好方面：羽毛球应该还是会继续保持的，也希望自己在球技方面有更大的提高。游泳也会继续保持。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;  2016年已经过去快半个月了，其实早就有想法想要给自己这一年来总结一下，最近也一直忙着公司年底年会的事情，心态也一直没有收拾好，所以也就
    
    </summary>
    
      <category term="summary" scheme="http://lyroger.github.io/categories/summary/"/>
    
    
  </entry>
  
  <entry>
    <title>iterm2配色</title>
    <link href="http://lyroger.github.io/2016/12/13/iterm%E9%85%8D%E8%89%B2/"/>
    <id>http://lyroger.github.io/2016/12/13/iterm配色/</id>
    <published>2016-12-13T01:30:00.000Z</published>
    <updated>2016-12-13T02:01:58.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>首先查看一下你的~/.bash_profile文件是否存在，如果不存在，那么可以通过命令创建<br>vim ~/.bash_profile #该命令是查看的，若没有会自动创建该文件。<br>创建后将下面内容复制进去：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#enables colorin the terminal bash shell export</div><div class="line"></div><div class="line">CLICOLOR=1</div><div class="line"></div><div class="line">#sets up thecolor scheme for list export</div><div class="line"></div><div class="line">LSCOLORS=gxfxcxdxbxegedabagacad</div><div class="line"></div><div class="line">#sets up theprompt color (currently a green similar to linux terminal)</div><div class="line"></div><div class="line">exportPS1=&apos;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]\$ &apos;</div><div class="line"></div><div class="line">#enables colorfor iTerm</div><div class="line"></div><div class="line">exportTERM=xterm-color</div></pre></td></tr></table></figure>
<p>然后按Esc键，继续w q键，保存退出。</p>
<p>2.第二步打开Iterm2-&gt;Perferences-&gt;Profiles-&gt;Terminal<br><img src="/images/iterm2_Color_2016121301.png" alt=""></p>
<p>3.第三步选择配色方案。<br><img src="/images/iterm2_Colors2016121302.png" alt=""></p>
<p>4.最后，如果想要选择更多的配色方案，可以<a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="external">这里</a>下载。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;首先查看一下你的~/.bash_profile文件是否存在，如果不存在，那么可以通过命令创建&lt;br&gt;vim ~/.bash_profile #该命令是查看的，若没有会自动创建该文件。&lt;br&gt;创建后将下面内容复制进去：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure cla
    
    </summary>
    
      <category term="工具" scheme="http://lyroger.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>JS与OC交互</title>
    <link href="http://lyroger.github.io/2016/11/29/JS%E4%B8%8EOC%E4%BA%A4%E4%BA%92/"/>
    <id>http://lyroger.github.io/2016/11/29/JS与OC交互/</id>
    <published>2016-11-29T02:02:51.000Z</published>
    <updated>2017-01-09T08:54:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  平时开发中，很多页面并非全由原生代码来编写，需求求快，求可扩展性，往往希望页面能够很轻松替换或更改，所以有些页面在不追求体验之下由web来展示是一个比较好的方案。web页面在app端展示其实也有两种方案，一种是把web页面放在服务器端，一种是把web页面等资源一起打包放在App端，这两种方案的各自好处就不在这里详解，第二种方案在我的<a href="http://blog.devyan.cn/2016/09/23/使用Cordova搭建混合框架/" target="_blank" rel="external">使用Cordova搭建混合框架</a>文章中有提到，H5与原生代码直接的交互都有详解。这篇文章主要讲讲H5跟原生代码之间的交互。</p>
<h3 id="原生代码调用H5"><a href="#原生代码调用H5" class="headerlink" title="原生代码调用H5"></a>原生代码调用H5</h3><p>  这个方案估计很多人都熟悉，也调用的比较频繁。比如现在在我们最近的一个项目中，我们把一个Web页面封装成一个BaseWebController页面了，所有基于远程web页面来展示的页面都通过这个封装好了的BaseWebController页面展示，那么在这个封装好了的页面中我们做了些什么事情呢？想想平时我们在这些web页面中都会做些什么，右上角更多按钮，右上角分享按钮，Web页面的title，下拉web页面时，能看到该页面由谁提供的，等等这些小功能，我们都可以在<code>- (void)webViewDidFinishLoad:(UIWebView *)webView</code>方法执行后，通过<code>stringByEvaluatingJavaScriptFromString:</code>方法去获取该页面中的配置，这个配置信息其实也是于H5有个协议，我们与H5端先定好一个协议，比如<code>msg_can_share</code>字段值为true时，表示可以分享，那么就会接着配置分享相关信息字段，比如分享的title，分享的url，分享的描述等等信息，这些信息都可以直接通过<code>stringByEvaluatingJavaScriptFromString:</code>去获取。</p>
<h3 id="H5调用原生代码"><a href="#H5调用原生代码" class="headerlink" title="H5调用原生代码"></a>H5调用原生代码</h3><p>  原生代码调用H5用一个方法就可以搞定，很简单，那么H5调用原生的又怎么来实现呢，又有什么场景呢？驱使我想用实现这种方案的动力来自一个问题，由于H5端查看文章详情时，footer下还有一个查看下一篇文章，点击查看下一篇文章时，需改变我们BaseWebController的title，问题来了，点击查看下一篇文章是，H5是由异步调用服务器数据，所以不会再次进入<code>- (void)webViewDidFinishLoad:(UIWebView *)webView</code>，因此我们无法通过<code>stringByEvaluatingJavaScriptFromString:</code>去拿到最新的title，我们也不知道数据时什么时候来的，这时候我们就只好通过H5来调用原生代码，当H5那边数据已更新后，再调用原生代码来更新title。相信还有更多如此的场景，那么如何来实现这种方案呢？在iOS7之后，我想，大家应该都了解了一些JavaScriptCore.framework的框架吧，对，我们就用这个来实现这个方案，我们看看下面几步，很简单：</p>
<ol>
<li><p>首先我们定义一个代理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@protocol JSObjcDelegate &lt;JSExport&gt;</div><div class="line">- (void)webViewJSAction:(NSString*)action :(NSString*)arg;</div><div class="line">@end</div></pre></td></tr></table></figure>
</li>
<li><p>然后在BaseWebController中定义一个<code>@property (nonatomic, strong) JSContext  *jsContext;</code>属性。</p>
</li>
<li><p>然后再在恰当的时候（建议写到<code>- (void)webViewDidFinishLoad:(UIWebView *)webView</code>中）去获取H5的上下文，<del>将刚刚写好的代理赋值给到H5。</del> 将[self class]赋值给到H5的上下文。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> _jsContext = [webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</div><div class="line">//_jsContext[@&quot;WebViewObject&quot;] = self;   //会导致Controller释放不了。</div><div class="line">_jsContext[@&quot;WebViewObject&quot;] = [self class];</div><div class="line">_jsContext.exceptionHandler = ^(JSContext *context, JSValue *exceptionValue) &#123;</div><div class="line">  	context.exception = exceptionValue;</div><div class="line">  	NSLog(@&quot;异常信息：%@&quot;, exceptionValue);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>最后在BaseWebController中实现代理就ok了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//改成类方法</div><div class="line">//- (void)webViewJSAction:(NSString*)action :(NSString*)arg</div><div class="line">+ (void)webViewJSAction:(NSString*)action :(NSString*)arg</div><div class="line">&#123;</div><div class="line">    /*</div><div class="line">    if ([action isEqualToString:@&quot;UpdateWebViewTitle&quot;]) &#123;</div><div class="line">        self.title = arg;</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line">    </div><div class="line">    //需在主线程上实现</div><div class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">        //获取当前的BaseWebController类。</div><div class="line">        BaseWebController *webVC = (BaseWebController*)GetAPPDelegate.window.aCurrentViewController;</div><div class="line">        if ([action isEqualToString:@&quot;UpdateWebViewTitle&quot;]) &#123;</div><div class="line">            webVC.title = arg;</div><div class="line">        &#125; else if ([action isEqualToString:@&quot;CloseActoin&quot;]) &#123;</div><div class="line">            [webVC.navigationController popViewControllerAnimated:YES];</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>写到这里，我们都是站在原生代码的角度去考虑，实现。那么H5端需要什么做呢？很简单，只需要通过<code>window.WebViewObject.webViewJSAction(&#39;UpdateWebViewTitle&#39;,&#39;title&#39;)</code>就可以将需要的值传过来。调用原生的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;  平时开发中，很多页面并非全由原生代码来编写，需求求快，求可扩展性，往往希望页面能够很轻松替换或更改，所以有些页面在不追求体验之下由web
    
    </summary>
    
      <category term="基础篇" scheme="http://lyroger.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>NSURL通过URLWithString:创建为nil的问题</title>
    <link href="http://lyroger.github.io/2016/11/16/NSURL%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>http://lyroger.github.io/2016/11/16/NSURL相关问题/</id>
    <published>2016-11-16T09:16:00.000Z</published>
    <updated>2016-11-23T02:47:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NSURL通过URLWithString-创建为nil的问题"><a href="#NSURL通过URLWithString-创建为nil的问题" class="headerlink" title="NSURL通过URLWithString:创建为nil的问题"></a>NSURL通过URLWithString:创建为nil的问题</h3><p>  最近有使用NSURL请求连接时发现一些小问题，服务端给一个网页链接字符串，如<code>NSURL *linkURL = [NSURL URLWithString:@&quot;http://192.168.12.28:8000/#/faq?xt=123&quot;];</code>这样生成的url没问题，可以访问，但将请求变成<code>NSURL *linkURL = [NSURL URLWithString:[NSString stringWithFormat:@&quot;http://192.168.12.28:8000/#/faq?xt=%@&quot;,[value urlEncode]]];</code>,xt的参数值是变化的，有可能会是任何一种字符，如果该值中为非普通的字符，如带有中文或<code>#</code>等之类的字符，创建的url竟然是nil。不太明白NSURL里面是如何创建对象的，想要解决这个问题，只能将参数的值通过UTF-8编码，传进去，服务端接受该值时再解码就好了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;NSURL通过URLWithString-创建为nil的问题&quot;&gt;&lt;a href=&quot;#NSURL通过URLWithString-创建为nil的问题&quot; class=&quot;headerlink&quot; title=&quot;NSURL通过URLWithString:创建为nil的问题&quot;&gt;
    
    </summary>
    
      <category term="基础篇" scheme="http://lyroger.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="http://lyroger.github.io/2016/11/09/hello-hexo/"/>
    <id>http://lyroger.github.io/2016/11/09/hello-hexo/</id>
    <published>2016-11-09T01:30:00.000Z</published>
    <updated>2016-12-13T01:56:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Cordova搭建混合框架</title>
    <link href="http://lyroger.github.io/2016/09/23/%E4%BD%BF%E7%94%A8Cordova%E6%90%AD%E5%BB%BA%E6%B7%B7%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>http://lyroger.github.io/2016/09/23/使用Cordova搭建混合框架/</id>
    <published>2016-09-23T06:22:31.000Z</published>
    <updated>2016-10-09T01:40:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  入职公司不久，花了一个多月开发了一个原生APP，这也只是个开始，首先强调的是，我们公司并不是外包公司，但需要开发的项目其实还挺多的，为了解决这个问题，我们需要周期短，响应快，来满足公司的需求，我们只能抛弃纯原生APP的开发方案，选择目前市场比较热门的技术方案：<em>Hybrid App</em>。使用<em>Hybrid App</em>的技术框架其实有很多开源的技术方案，比如使用<a href="http://cordova.apache.org" target="_blank" rel="external">Cordova</a>，<a href="http://reactnative.cn" target="_blank" rel="external">React Native</a>，等。这两个技术方案其实都还不错，由于我们公司有人以前有使用<em>Cordova</em>框架的经验，所以我们选择了<em>Cordova</em>,这个理由听起来感觉有些过不去，但有时候领导就是喜欢听取有经验的方案。不过走到现在确实觉得<em>Cordova</em>也很不错,没出什么问题，也都能满足项目上的需求。</p>
<h2 id="搭建框架"><a href="#搭建框架" class="headerlink" title="搭建框架"></a>搭建框架</h2><p> 接下来我们来搭建一个<em>Hybrid App</em>试试手吧，创建一个<code>MyHybridDemo</code>，使用<code>Pod</code>来管理<em>Cordova</em>框架，可以通过命令<code>pod &#39;Cordova&#39;</code>从Github上下载<em>Cordova</em>，集成<em>Cordova</em>到工程中后，还缺html5与原生代码交互的桥梁，需要一些js的支撑，你可以查看<a href="http://cordova.apache.org/docs/en/latest/guide/cli/index.html" target="_blank" rel="external">官网</a>的文档，一步一步创建相应文件。也可以直接从我的<a href="https://github.com/lyroger/MyHybridDemo" target="_blank" rel="external">MyHybridDemo</a>中拷贝www文件夹和config.xml文件集成到你的工程中。到这里集成框架算是ok了，接下来就是写业务代码了。在写业务代码之前首先来介绍一下www目录下的文件和config.xml文件的作用。<br> 使用终端cd到www目录下，使用<code>tree -L 4</code>（需安装tree工具）命令查看www目录：<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── assets</div><div class="line">│   ├── images</div><div class="line">│   ├── js</div><div class="line">│   └── style</div><div class="line">├── cordova-js-src</div><div class="line">│   ├── exec.js</div><div class="line">│   └── platform.js</div><div class="line">├── cordova.js</div><div class="line">├── cordova_plugins.js</div><div class="line">├── index.html</div><div class="line">└── plugins</div><div class="line">    ├── com.exmind.photopickerplugin</div></pre></td></tr></table></figure></p>
<ul>
<li><code>assets</code>:该目录是用来放资源文件的，比如h5相关的业务图片，视频等资源文件。</li>
<li><code>cordova-js-src</code>:该目录是存放cordova的js框架代码，这个你直接拷贝过来就ok了，不用多管。</li>
<li><code>cordova.js</code>:该文件是cordova的js框架代码。直接拷贝。</li>
<li><code>cordova_plugins.js</code>:该js文件是cordova来定义js插件文件，他包含定义插件的文件的路径，插件ID，以及插件名称。最终获取一个插件集合。</li>
<li><code>plugins</code>:该文件夹是js调用原生插件的入口，所有插件可以放到此文件夹中。比如拍照，定位，分享等插件js。</li>
<li>最后还有一个config.xml文件,该xml文件主要是用作配置属性的。可以配置h5入口，也可以配置UIWebView的属性等。</li>
</ul>
<h2 id="插件的配置和定义"><a href="#插件的配置和定义" class="headerlink" title="插件的配置和定义"></a>插件的配置和定义</h2><p>  了解了框架后，来实战一下，用例就拿web端调用APP的系统相机和相册吧。</p>
<p>  一. 首先我们用<code>Objective-C</code>原生代码写好调用系统相机和相册的方法。具体实现我就不写了，需要注意的一点就是该类需要继承Cordova的<code>CDVPlugin</code>类，调用的插件方法需要传一个<code>CDVInvokedUrlCommand</code>类型的参数，以便回调。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@interface PhotoPickerPlugin : CDVPlugin</div><div class="line">// 获取图片</div><div class="line">- (void)getPictures:(CDVInvokedUrlCommand *)command;</div><div class="line">// 删除图片文件</div><div class="line">- (void)deleteFile:(CDVInvokedUrlCommand *)command;</div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>  二. 写完原生代码后，如何让web端调起我们的代码呢？框架搭建好后，其实只要稍作配置就ok了，你只需要动动四个文件。</p>
<ol>
<li>第一个就是config.xml，这个是配置你的插件名称，告诉Cordova你定义了这么个插件类（这里我们定义的是：<code>PhotoPickerPlugin</code>）。  </li>
<li><p>第二个文件:添加一个<code>PhotoPickerPlugin.js</code>插件类，供web端调用的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">cordova.define(<span class="string">"com.exmind.photopickerplugin.PhotoPickerPlugin"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line">           </div><div class="line">   <span class="keyword">var</span> argscheck = <span class="built_in">require</span>(<span class="string">'cordova/argscheck'</span>);</div><div class="line">   <span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'cordova/exec'</span>);</div><div class="line">   <span class="keyword">var</span> PhotoPickerPlugin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   </div><div class="line">   &#125;;</div><div class="line">   <span class="comment">// 获取系统相册图片</span></div><div class="line">   PhotoPickerPlugin.prototype.getPictures = <span class="function"><span class="keyword">function</span>(<span class="params">success, fail, maxCount</span>) </span>&#123;</div><div class="line">       exec(success, fail, <span class="string">"PhotoPickerPlugin"</span>, <span class="string">"getPictures"</span>, [maxCount]);</div><div class="line">   &#125;;</div><div class="line">   <span class="comment">// 删除图片</span></div><div class="line">   PhotoPickerPlugin.prototype.deleteFile = <span class="function"><span class="keyword">function</span>(<span class="params">success, fail, filePaths</span>) </span>&#123;</div><div class="line">       exec(success, fail, <span class="string">"PhotoPickerPlugin"</span>, <span class="string">"deleteFile"</span>, filePaths);</div><div class="line">   &#125;;</div><div class="line">   </div><div class="line">   <span class="keyword">var</span> me = <span class="keyword">new</span> PhotoPickerPlugin();</div><div class="line">   <span class="built_in">module</span>.exports = me;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>第三个文件：<code>cordova_plugins.js</code>，在这个文件中你需要定义插件js插件类以及他的路径和唯一标示。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"file"</span>: <span class="string">"plugins/com.exmind.photopickerplugin/www/PhotoPickerPlugin.js"</span>,</div><div class="line">  <span class="string">"id"</span>: <span class="string">"com.exmind.photopickerplugin.PhotoPickerPlugin"</span>,</div><div class="line">  <span class="string">"clobbers"</span>: [</div><div class="line">               <span class="string">"PhotoPickerPlugin"</span></div><div class="line">               ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>最后一个文件就是在使用该插件的地方引用<code>cordova_plugins.js</code> 和 <code>cordova.js</code>。</p>
</li>
</ol>
<p>修改好这四个文件后，js代码就可以直接调用<code>PhotoPickerPlugin</code>的<code>getPictures:</code>,<code>deleteFile:</code>方法了。<br>调用方式:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PhotoPickerPlugin. getPictures(<span class="function"><span class="keyword">function</span> (<span class="params">success</span>) </span>&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">fail</span>) </span>&#123;&#125;,<span class="number">6</span>);</div></pre></td></tr></table></figure></p>
<p>如何让原生代码返回数据给web端呢？web端拿到success，和fail回调，原生代码如何将数据组织到这个回调用呢？我们回到<code>PhotoPickerPlugin.m</code>类中，来看看实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- (void)imagePickerController:(TZImagePickerController *)picker didFinishPickingPhotos:(NSArray&lt;UIImage *&gt; *)photos sourceAssets:(NSArray *)assets isSelectOriginalPhoto:(BOOL)isSelectOriginalPhoto</div><div class="line">&#123;</div><div class="line">    CDVPluginResult* result = nil;</div><div class="line">    NSMutableArray *resultStrings = [[NSMutableArray alloc] init];</div><div class="line">    NSData* data = nil;</div><div class="line">    NSError* err = nil;</div><div class="line">    NSFileManager* fileMgr = [[NSFileManager alloc] init];</div><div class="line">    NSString* filePath;</div><div class="line">    </div><div class="line">    for (UIImage *image in photos) &#123;</div><div class="line">        int i = 1;</div><div class="line">        do &#123;</div><div class="line">            filePath = [NSString stringWithFormat:@&quot;%@/%@%04d.%@&quot;, [self getFileDocPath], @&quot;cdv_photo_&quot;, i++, @&quot;jpg&quot;];</div><div class="line">        &#125; while ([fileMgr fileExistsAtPath:filePath]);</div><div class="line">        </div><div class="line">        @autoreleasepool &#123;</div><div class="line">            data = UIImageJPEGRepresentation(image,0.5);</div><div class="line">            if (![data writeToFile:filePath options:NSAtomicWrite error:&amp;err]) &#123;</div><div class="line">                result = [CDVPluginResult resultWithStatus:CDVCommandStatus_IO_EXCEPTION messageAsString:[err localizedDescription]];</div><div class="line">                break;</div><div class="line">            &#125; else &#123;</div><div class="line">                [resultStrings addObject:[[NSURL fileURLWithPath:filePath] absoluteString]];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    result = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsArray:resultStrings];</div><div class="line">    [self.commandDelegate sendPluginResult:result callbackId:self.pCommand.callbackId];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看最后一句代码，便是将结果通过<code>CDVPluginResult</code>类发送给对应的command。<br>到此我们应该掌握了如何从web端调用App端的代码了。在其他场景，其实还需要App端调用web端的方法，那如何调用呢？熟悉UIWebView的同学应该都知道UIWebView中有一个<code>stringByEvaluatingJavaScriptFromString:</code>方法。对，你可以使用该方法调用js方法，不过cordova也封装了一个方法供你使用，你可以通过<code>CDVCommandDelegateImpl</code>类的<code>evalJs:</code>方法实现调用js代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;  入职公司不久，花了一个多月开发了一个原生APP，这也只是个开始，首先强调的是，我们公司并不是外包公司，但需要开发的项目其实还挺多的，为了
    
    </summary>
    
      <category term="框架" scheme="http://lyroger.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Hybrid App" scheme="http://lyroger.github.io/tags/Hybrid-App/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins+Git自动构建</title>
    <link href="http://lyroger.github.io/2016/08/25/Jenkins+Git%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA/"/>
    <id>http://lyroger.github.io/2016/08/25/Jenkins+Git自动构建/</id>
    <published>2016-08-25T09:52:00.000Z</published>
    <updated>2016-10-09T01:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   想想以前，发给测试的测试包都是通过手动使用XCode来打包，如果项目工程比较大，Archive过程时间还是比较长的，打多了觉得特没劲，非常浪费时间，特别是使用了敏捷开发流程的，要是还用手动打包，估计你在打包上耗得时间都够你解决几个bug了。敏捷开发也是强调使用自动化的，所以也少不了自动构建的环节，那么接下来说说如何使用Jenkins+Git来自动构建我们的项目，从而方便测试，也让开发有更多的经历投入到编码和业务中而不是浪费在这些无用的流程中。</p>
<h2 id="一-Jenkins安装"><a href="#一-Jenkins安装" class="headerlink" title="一.Jenkins安装"></a>一.Jenkins安装</h2><p>1.下载最新的版本（一个 WAR 文件）。<a href="http://Jenkins-ci.org/" target="_blank" rel="external">Jenkins官方网址</a><br>2.运行 Java -jar jenkins.war 。<br>如果你的java环节低于java7 它会提示你升级java环节，你可以到<a href="https://www.java.com/en/download/" target="_blank" rel="external">这里下载</a>，安装最新的java环境。<br>如果一切顺利，那么只要在你本机浏览器中输入<a href="http://127.0.0.1:8080" target="_blank" rel="external">127.0.0.1:8080</a>即可看到Jenkins的主页面。<br><img src="/images/jenins首页.png" alt=""></p>
<h2 id="二-Jenkins配置"><a href="#二-Jenkins配置" class="headerlink" title="二.Jenkins配置"></a>二.Jenkins配置</h2><p>1.先新建一个项目。<br><img src="/images/创建项目.png" alt=""><br>2.输入项目名称和构建风格。<br><img src="/images/创建项目1.png" alt=""><br>3.项目配置</p>
<p><img src="/images/配置项目-项目名称.png" alt=""><br>4.源码管理</p>
<p><img src="/images/项目配置-源码管理.png" alt=""><br>这一步输入你项目在Git上的仓库地址，这里的授权有两种形式，一种是使用http登录，一种是使用ssh授权；<br>*如果使用http授权的看下图：</p>
<p><img src="/images/项目配置-源码管理添加http授权.png" alt=""><br>这里输入你git上的登录名和密码。<br>*如果使用SSH授权看下图：</p>
<p><img src="/images/项目配置-源码管理SSH授权创建.png" alt=""><br>kind要选择SSH Username with private key,Username可以随便输入，一个描述而已，Private Key选Enter directly，然后在Key中输入你在Git上的秘钥，这个秘钥的制作在我前面的<a href="http://roger.farbox.com/post/macshang-zhi-zuo-sshmi-yao" target="_blank" rel="external">博客</a>中有提到，这里就不多说了。最后点击Add，SSH的授权就制作OK了。<br>5.构建<br>源码可以下载了，那么接下来就是如何去生成一个ipa包了，我们通过构建的方式来实现，接下来我们来配置一下构建流程，构建的方式很多中，这里讲讲比较简单的一种，使用shell来实现。</p>
<p><img src="/images/构建1.png" alt=""></p>
<p><img src="/images/项目配置-构建配置.png" alt=""><br>编写脚本，这个脚本支持的是workspace的，如果没有使用workspace的，问题不大，稍作修改即可。脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">cd $WORKSPACE</div><div class="line">SDK_VERSION=&quot;iphoneos8.3&quot;</div><div class="line"></div><div class="line">PROJECT_NAME=&quot;JenkinsDemo&quot;</div><div class="line">PROVISION_UUID=&quot;你的描述文件的UUID，可以通过在XCode选中描述文件ctr+c的方法获取到&quot;</div><div class="line">PROVISONING_PROFILE=&quot;JenkinsDemo_Distribution&quot;</div><div class="line"></div><div class="line">XCODE_PRJ=&quot;xcodeproj&quot;</div><div class="line">FILE_EXTENSION=&apos;xcworkspace&apos;</div><div class="line">PROJECT_DIR=`pwd`</div><div class="line">CD_XCODE_PRJ=`pwd`/$PROJECT_NAME.$XCODE_PRJ</div><div class="line">PROJECT_WORKSPACE=$PROJECT_DIR.</div><div class="line">PROJECT_BUILD=`pwd`/$PROJECT_NAME/BUILD</div><div class="line"></div><div class="line">APP_PATH=&quot;build/Release-iphoneos/$&#123;PROJECT_NAME&#125;.app&quot;</div><div class="line">TARGET_APP_PATH=&quot;build/Release-iphoneos/$&#123;PROJECT_NAME&#125;.ipa&quot;</div><div class="line">ARCHIVEPATH=&quot;build/Release-iphoneos/$&#123;PROJECT_NAME&#125;.xcarchive&quot;</div><div class="line"></div><div class="line">cd &quot;$PROJECT_DIR&quot;</div><div class="line"></div><div class="line">cd ..</div><div class="line">cd &quot;$CD_XCODE_PRJ&quot;</div><div class="line">sed -i &apos;&apos; &quot;s/\(PROVISIONING_PROFILE.=.\&quot;\).*\(\&quot;\)/\1$PROVISION_UUID\2/g&quot; project.pbxproj</div><div class="line">cd ..</div><div class="line">rm -rf build</div><div class="line">xcodebuild -workspace $PROJECT_DIR/$PROJECT_NAME.$FILE_EXTENSION -scheme $PROJECT_NAME -destination generic/platform=iOS archive -archivePath $ARCHIVEPATH</div><div class="line">xcodebuild -exportArchive -exportFormat IPA -archivePath $ARCHIVEPATH -exportPath $TARGET_APP_PATH -exportProvisioningProfile &quot;$&#123;PROVISONING_PROFILE&#125;&quot;</div><div class="line">curl -F &quot;file=@build/Release-iphoneos/JenkinsDemo.ipa&quot; -F &quot;uKey=蒲公英上的uKey&quot; -F &quot;_api_key=蒲公英上的apikey&quot; https://www.pgyer.com/apiv1/app/upload</div></pre></td></tr></table></figure></p>
<p>*构建成功后这里可能会出现一个问题，你的项目工程中的配置需要设置一下shared，不然构建的会一直报错。找不到工程文件，如下图设置：</p>
<p><img src="/images/工程配置.png" alt=""><br>*OK，保存构建后，接下来就可以回到项目管理页面了。</p>
<p><img src="/images/项目管理-立即构建.png" alt=""><br><em>一般构建在一分钟左右，先下载源代码，然后打包，最后将ipa包上传到蒲公英平台。
</em>可以看出，构建后蓝色的表示构建成功，红色和灰色表示构建失败，可以点击相应的图标，查看构建日志。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;   想想以前，发给测试的测试包都是通过手动使用XCode来打包，如果项目工程比较大，Archive过程时间还是比较长的，打多了觉得特没劲，
    
    </summary>
    
      <category term="工具" scheme="http://lyroger.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>swift实战</title>
    <link href="http://lyroger.github.io/2016/07/18/swift%E5%AE%9E%E6%88%98/"/>
    <id>http://lyroger.github.io/2016/07/18/swift实战/</id>
    <published>2016-07-18T03:26:00.000Z</published>
    <updated>2016-10-09T01:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OC调用swift方式"><a href="#OC调用swift方式" class="headerlink" title="OC调用swift方式"></a>OC调用swift方式</h2><p>在OC代码中引入头文件 #import “项目名称-swift.h”<br>即可用OC语法调用swift写的代码了。</p>
<h2 id="swift中如何写Block"><a href="#swift中如何写Block" class="headerlink" title="swift中如何写Block"></a>swift中如何写Block</h2><p>在swift中定义一个闭包的关键词为 <code>typealias</code><br>在A类中定义一个闭包<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义一个闭包</span></div><div class="line"><span class="keyword">typealias</span> <span class="type">LoginSuceesedBlock</span> = (successed:<span class="type">Bool</span>)-&gt;<span class="type">Void</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginViewController</span>:<span class="title">UIViewController</span></span>&#123;</div><div class="line">    <span class="comment">//将函数指针赋值给loginActionBlock闭包</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">initWithBlock</span><span class="params">(closure:LoginSuceesedBlock?)</span></span>&#123;</div><div class="line">        loginActionBlock = closure</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">loginAction</span><span class="params">(sender:AnyObject?)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> loginSuccessed:<span class="type">Bool</span> = loginViewModel.loginRequestAction(textUserName.text!,passWord: textPwd.text!)</div><div class="line">        <span class="keyword">if</span> loginSuccessed &#123;</div><div class="line">            <span class="comment">//block 回调</span></div><div class="line">            <span class="keyword">if</span> (loginActionBlock != <span class="literal">nil</span>) &#123;</div><div class="line">                <span class="keyword">self</span>.loginActionBlock!(successed: <span class="literal">true</span>)</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">let</span> alert:<span class="type">UIAlertView</span> =  <span class="type">UIAlertView</span>()</div><div class="line">            alert.title = <span class="string">"提示"</span></div><div class="line">            alert.message = <span class="string">"登录失败"</span></div><div class="line">            alert.addButtonWithTitle(<span class="string">"OK"</span>)</div><div class="line">            alert.show()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在B类中传一个函数到A类<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">authorizeOperation</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> loginVC = <span class="type">LoginViewController</span>()</div><div class="line">        loginVC.initWithBlock(loginActionSuccessed)</div><div class="line">        <span class="keyword">self</span>.navigationController?.pushViewController(loginVC, animated: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginActionSuccessed</span><span class="params">(successed:Bool)</span></span> -&gt; <span class="type">Void</span> &#123;</div><div class="line">        <span class="keyword">if</span> successed &#123;</div><div class="line">            <span class="comment">//todo loginSuccessed something</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;OC调用swift方式&quot;&gt;&lt;a href=&quot;#OC调用swift方式&quot; class=&quot;headerlink&quot; title=&quot;OC调用swift方式&quot;&gt;&lt;/a&gt;OC调用swift方式&lt;/h2&gt;&lt;p&gt;在OC代码中引入头文件 #import “项目名称-swift.h”
    
    </summary>
    
      <category term="swift" scheme="http://lyroger.github.io/categories/swift/"/>
    
    
      <category term="swift" scheme="http://lyroger.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>MVVM模式的学习</title>
    <link href="http://lyroger.github.io/2016/07/08/MVVM%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://lyroger.github.io/2016/07/08/MVVM模式的学习/</id>
    <published>2016-07-08T03:15:00.000Z</published>
    <updated>2016-10-09T01:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h2><p>这里就不多说为什么要学习MVVM模式了，新东西当然需要有一颗进步的心态去接纳它，不管他是否真的能在实际开发中帮到你，我想至少会在某种场景中用到。好吧，我们先来理解一下什么是MVVM模式吧。</p>
<h2 id="MVVM的理解"><a href="#MVVM的理解" class="headerlink" title="MVVM的理解"></a>MVVM的理解</h2><p>MVVM这种模式其实是来自<a href="https://msdn.microsoft.com/en-us/library/hh848246.aspx" target="_blank" rel="external">微软</a>的，我们用一张视图来概括一下MVVM吧</p>
<p><img src="/images/mvvm.png" alt=""><br>从这个图可以看出，view和View Controller都归纳为View，即V，视图相关的业务逻辑以后就写到这里了，中间的ViewModel用来写MVC中Controller的一部分逻辑，比如网络请求的业务逻辑，视图展示数据的业务逻辑等等，这样以前的Controller的业务逻辑代码岂不是变少了很多，在实际使用当中，Controller的代码也变得非常清晰，因为你只会关注业务逻辑，而不会去关注这些数据怎么来的，怎么组装的等等这些细节了。Model还是以前MVC中的model没有什么变化，然而这三个层级的关系又是如何的呢？View只引用ViewModel，View通过Action来改变ViewModel，ViewMode的业务来更新View，注意ViewModel不要去引用View，ViewModel只是写了一些组装数据的业务逻辑而已，把控好各个层级的关系可以把你的项目写的很清晰。ViewMode中引用Model，ViewModel的网络请求，数据组装等等业务逻辑的结果都保存到了Model中，Model一旦有更新会通知ViewModel，一旦View有需求更新或ViewModel变更需要通知View，这个时候就可以去更新View了。如果理解的简单点，应该就是一个双向绑定的关系，View跟ViewModel绑定，一旦ViewModel有变更，View更新；ViewModel更Model绑定，一旦Model有变更，则会通知ViewModel，继而会更新View。</p>
<h2 id="MVVM与MVC的对比"><a href="#MVVM与MVC的对比" class="headerlink" title="MVVM与MVC的对比"></a>MVVM与MVC的对比</h2><p>MVVM较MVC的好处个人觉得最重要的应该是将臃肿的Controller解放了，有一大部分业务逻辑分解到了ViewModel中来了；其次应该就是做单元测试比较方便。因为很多业务逻辑已经抽象出成单独的方法，很容易做单元测试。当然个人也有一些用MVVM比较麻烦的地方，在一些较简单的Controller中，写MVVM模式，确实又有点累赘，增加了一些代码量。但总体来说，MVVM确实把代码的复杂度降下来了。</p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>说到最后，有一个推荐的框架比较适合MVVM，也是最近在学习的一个框架<a href="http://roger.farbox.com/post/reactivecocoaxue-xi" target="_blank" rel="external">ReactiveCocoa</a></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>写了这些都是自己的个人理解，还并未去实际，若有理解出入，还望谅解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-前言&quot;&gt;&lt;a href=&quot;#一-前言&quot; class=&quot;headerlink&quot; title=&quot;一 前言&quot;&gt;&lt;/a&gt;一 前言&lt;/h2&gt;&lt;p&gt;这里就不多说为什么要学习MVVM模式了，新东西当然需要有一颗进步的心态去接纳它，不管他是否真的能在实际开发中帮到你，我想至少
    
    </summary>
    
      <category term="设计模式" scheme="http://lyroger.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac上的小技巧</title>
    <link href="http://lyroger.github.io/2016/07/07/Mac%E4%B8%8A%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://lyroger.github.io/2016/07/07/Mac上的小技巧/</id>
    <published>2016-07-07T09:16:00.000Z</published>
    <updated>2017-01-11T09:42:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-制作SSH秘钥"><a href="#1-制作SSH秘钥" class="headerlink" title="1.制作SSH秘钥"></a>1.制作SSH秘钥</h3><p>打开终端，$ ssh-keygen 一路enter下。<br>生成  在当前用户名下 会有一个.sh文件。<br>查看 .ssh<br>$ ls -a ~/.ssh  通过搜索目录<br>id_rsa<br>id_rsa.pub<br>打开  id_rsa.pub文件 里面就有需要的ssh key。<br>或者使用文本编辑工具打开该文件，命令是：<code>vim ~/.ssh/id_rsa.pub</code></p>
<h3 id="2-显示或隐藏mac下的隐藏文件"><a href="#2-显示或隐藏mac下的隐藏文件" class="headerlink" title="2.显示或隐藏mac下的隐藏文件"></a>2.显示或隐藏mac下的隐藏文件</h3><ol>
<li>显示Mac隐藏文件的命令：<code>defaults write com.apple.finder AppleShowAllFiles  YES</code></li>
<li>隐藏Mac隐藏文件的命令：<code>defaults write com.apple.finder AppleShowAllFiles  NO</code></li>
<li>设置完后，不会立马起效，需要重新启动Finder.可以通过命令:<code>killall Finder</code> 。</li>
</ol>
<h3 id="3-vim命令退出方式"><a href="#3-vim命令退出方式" class="headerlink" title="3.vim命令退出方式"></a>3.vim命令退出方式</h3><p> “:x”和”:wq”的真正区别，如下：<br>        :wq   强制性写入文件并退出。即使文件没有被修改也强制写入，并更新文件的修改时间。<br>        :x    写入文件并退出。仅当文件被修改时才写入，并更新文件修改时间，否则不会更新文件修改时间。</p>
<h3 id="3-git常用命令"><a href="#3-git常用命令" class="headerlink" title="3.git常用命令"></a>3.git常用命令</h3><ol>
<li>git clone ‘<a href="https://github.com/lyroger/lyroger.github.io.git" target="_blank" rel="external">https://github.com/lyroger/lyroger.github.io.git</a>‘  #这个会让你输入账号和密码</li>
<li>git clone ‘git@github.com:lyroger/lyroger.github.io.git’ #这个需要你提供sshkey</li>
<li>git add . #将所有变动添加到仓库</li>
<li>git commit -a ‘提交备注’ #将所有添加到仓库的变动提交到仓库  如果提交失败：‘fatal: Paths with -a does not make sense.’可以使用”git commit -am ‘提交备注’”.</li>
<li>git pull #拉取最新文件</li>
<li>git push origin master #推送到远程仓库</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-制作SSH秘钥&quot;&gt;&lt;a href=&quot;#1-制作SSH秘钥&quot; class=&quot;headerlink&quot; title=&quot;1.制作SSH秘钥&quot;&gt;&lt;/a&gt;1.制作SSH秘钥&lt;/h3&gt;&lt;p&gt;打开终端，$ ssh-keygen 一路enter下。&lt;br&gt;生成  在当前用户名下
    
    </summary>
    
      <category term="工具" scheme="http://lyroger.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa学习</title>
    <link href="http://lyroger.github.io/2016/07/06/ReactiveCocoa%E5%AD%A6%E4%B9%A0/"/>
    <id>http://lyroger.github.io/2016/07/06/ReactiveCocoa学习/</id>
    <published>2016-07-06T01:39:00.000Z</published>
    <updated>2016-10-09T01:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、signal的释放问题"><a href="#一、signal的释放问题" class="headerlink" title="一、signal的释放问题"></a>一、signal的释放问题</h2><p>当signal作为local变量时，如果没有被subscribe，那么方法执行完后，该变量会被dealloc。但如果signal有被subscribe，那么subscriber会持有该signal，直到signal sendCompleted或sendError时，才会解除持有关系，signal才会被dealloc。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、signal的释放问题&quot;&gt;&lt;a href=&quot;#一、signal的释放问题&quot; class=&quot;headerlink&quot; title=&quot;一、signal的释放问题&quot;&gt;&lt;/a&gt;一、signal的释放问题&lt;/h2&gt;&lt;p&gt;当signal作为local变量时，如果没有被sub
    
    </summary>
    
      <category term="框架" scheme="http://lyroger.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS基础深究</title>
    <link href="http://lyroger.github.io/2016/02/25/iOS%E5%9F%BA%E7%A1%80%E6%B7%B1%E7%A9%B6/"/>
    <id>http://lyroger.github.io/2016/02/25/iOS基础深究/</id>
    <published>2016-02-25T01:37:00.000Z</published>
    <updated>2016-10-09T01:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、assign与weak的区别"><a href="#一、assign与weak的区别" class="headerlink" title="一、assign与weak的区别"></a>一、assign与weak的区别</h2><p>assign适用于基本数据类型，weak是适用于NSObject对象，并且是一个弱引用。<br>assign其实也可以用来修饰对象，那么我们为什么不用它呢？因为被assign修饰的对象在释放之后，指针的地址还是存在的，也就是说指针并没有被置为nil。如果在后续的内存分配中，刚好分到了这块地址，程序就会崩溃掉。<br>而weak修饰的对象在释放之后，指针地址会被置为nil。所以现在一般弱引用就是用weak。<br>所以在使用assign修饰对象，就有可能会导致程序EXC_BAD_ACCESS异常，也就是所谓的野指针错误！</p>
<h2 id="二、nonatomic与atomic"><a href="#二、nonatomic与atomic" class="headerlink" title="二、nonatomic与atomic"></a>二、nonatomic与atomic</h2><p>nonatomic: 非原子性访问，对属性赋值的时候不加锁，多线程并发访问会提高性能。若不加此属性，则默认是两个访问方法都为原子型事务访问。<br>atomic:是Objc使用的一种线程保护技术，基本上来讲，是防止在写未完成的时候被另外一个线程读取，造成数据错误。而这种机制是耗费系统资源的，所以在iPhone这种小型设备上，如果没有使用多线程间的通讯编程，那么nonatomic是一个非常好的选择。</p>
<h2 id="三、ARC模式下重写set方法"><a href="#三、ARC模式下重写set方法" class="headerlink" title="三、ARC模式下重写set方法"></a>三、ARC模式下重写set方法</h2><p>网上很多人说直接赋值就OK了，我感觉不太妥，这里我验证了下，如果是strong修饰的属性，是可以直接赋值的，如果是copy，那么需要copy一份了。看看下面代码<br>1.首先定义两个copy属性及测试方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic,copy) NSString *test;</div><div class="line">@property (nonatomic,copy) NSMutableString *testMutableString;</div><div class="line">......</div><div class="line">//测试方法</div><div class="line">- (void)testProperty</div><div class="line">&#123;</div><div class="line">    NSString *testString = @&quot;test&quot;;</div><div class="line">    NSMutableString *testMutableString = [NSMutableString stringWithFormat:@&quot;testMutableString&quot;];</div><div class="line">    self.test = testString;</div><div class="line">    self.testMutableString = testMutableString;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.重写两个属性的set方法，验证直接赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (void)setTest:(NSString *)test</div><div class="line">&#123;</div><div class="line">    _test = test;</div><div class="line">    NSLog(@&quot;_test = %p,test = %p&quot;,_test,test);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setTestMutableString:(NSMutableString *)testMutableString</div><div class="line">&#123;</div><div class="line">    _testMutableString = testMutableString;</div><div class="line">    NSLog(@&quot;_testMutableString = %p,testMutableString = %p&quot;,_testMutableString,testMutableString);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>打印出来的日志显示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2016-02-25 10:23:30.618 DemoList[4341:2473539] _test = 0x1001364d0,test = 0x1001364d0</div><div class="line">2016-02-25 10:23:30.621 DemoList[4341:2473539] _testMutableString = 0x13ef2b950,testMutableString = 0x13ef2b950</div></pre></td></tr></table></figure></p>
<p>直接赋值的方式从这里可以看出来，打印的地址都是一样的，只是引用而已，并没有产生新的对象。<br>3.我们再来看看copy一份的结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (void)setTest:(NSString *)test</div><div class="line">&#123;</div><div class="line">    _test = [test copy];</div><div class="line">    NSLog(@&quot;_test = %p,test = %p&quot;,_test,test);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setTestMutableString:(NSMutableString *)testMutableString</div><div class="line">&#123;</div><div class="line">    _testMutableString = [testMutableString copy];</div><div class="line">    NSLog(@&quot;_testMutableString = %p,testMutableString = %p&quot;,_testMutableString,testMutableString);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>//打印出来的日志显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2016-02-25 10:12:26.642 DemoList[4332:2471119] _test = 0x10018a4d0,test = 0x10018a4d0</div><div class="line">2016-02-25 10:12:26.645 DemoList[4332:2471119] _testMutableString = 0x15d76b6d0,testMutableString = 0x15d6abd40</div></pre></td></tr></table></figure></p>
<p>这个时候你会发现，NSString的属性地址还是一样的，NSMutabeString的属性地址不一样了，这样就对了，NSString的属性其实希望的就是引用一份，而可变字符的就是希望真正的copy一份，如果地址还一样，那么就没必要使用可变的对象了。<br>总结下ARC模式的set方法，使用copy修饰属性时，最好使用copy去赋值。其他的可以直接赋值就是了。</p>
<h2 id="四、block属性为什么需要使用copy修饰"><a href="#四、block属性为什么需要使用copy修饰" class="headerlink" title="四、block属性为什么需要使用copy修饰"></a>四、block属性为什么需要使用copy修饰</h2><p>因为block变量默认是声明为栈变量的，为了能够在block的声明域外使用，所以要把block拷贝（copy）到堆，所以说为了block属性声明和实际的操作一致，最好声明为copy。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、assign与weak的区别&quot;&gt;&lt;a href=&quot;#一、assign与weak的区别&quot; class=&quot;headerlink&quot; title=&quot;一、assign与weak的区别&quot;&gt;&lt;/a&gt;一、assign与weak的区别&lt;/h2&gt;&lt;p&gt;assign适用于基本数据类
    
    </summary>
    
      <category term="基础篇" scheme="http://lyroger.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>关于字符串的分割</title>
    <link href="http://lyroger.github.io/2016/02/24/%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%86%E5%89%B2/"/>
    <id>http://lyroger.github.io/2016/02/24/关于字符串的分割/</id>
    <published>2016-02-24T02:47:00.000Z</published>
    <updated>2016-10-09T01:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在字符串分割上遇到一个坑，一不小心便踩了，问题是这样的：我接收到服务端传过来的一个包含多个图片地址的字符串，使用“,”分割，我使用”componentsSeparatedByString:”来分割，将多个图片地址存入数组，并根据数组的个数来加载默认图片，等图片下载完成后替换对应的默认图片。现在服务端给我返回了一个@””字符串，我的代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSArray *descImages = [descImage componentsSeparatedByString:@&quot;,&quot;];</div></pre></td></tr></table></figure></p>
<p>其实这个时候descImage等于””，但使用”componentsSeparatedByString:”分割返回的数组是有一个对象的，就是一个空字符串，这个可能我并没想到，导致服务端返回空字符串时，我这边也多加载了一个图片，这个图片还一直下载不下来。这个也让我明白：”componentsSeparatedByString:”的意思，有分割字符就根据字符分割返回数组，没分割字符则返回被分割的字符串，@””也是一个字符串，它也是有内存地址的，跟nil并不一样。看看下面的代码就明白了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (void)testComponentSeparatedByString</div><div class="line">&#123;</div><div class="line">    NSString *descImage = @&quot;&quot;;</div><div class="line">    NSArray *descImages = [descImage componentsSeparatedByString:@&quot;,&quot;];</div><div class="line">    NSLog(@&quot;descImages = %@,descImages.count=%zd,descImage = %p,nil= %p&quot;,descImages,descImages.count,descImage,nil);</div><div class="line">&#125;</div><div class="line">打印出来的</div><div class="line">descImages = (</div><div class="line">    &quot;&quot;</div><div class="line">),descImages.count=1,descImage = 0x1001d5690,nil= 0x0</div></pre></td></tr></table></figure></p>
<p>因此要解决这个问题就得加一个判断给descImage.length&gt;0即可。</p>
<h3 id="衍生学习"><a href="#衍生学习" class="headerlink" title="衍生学习"></a>衍生学习</h3><p>componentsSeparatedByCharactersInSet的使用，使用多个字符分割字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">NSString *str = @&quot;A~B^C&quot;;</div><div class="line">NSArray *arr = [str componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@&quot;^~&quot;]];</div><div class="line">NSLog(@&quot;%@&quot;, arr);</div><div class="line">打印出来</div><div class="line">(</div><div class="line">    A,</div><div class="line">    B,</div><div class="line">    C</div><div class="line">)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在字符串分割上遇到一个坑，一不小心便踩了，问题是这样的：我接收到服务端传过来的一个包含多个图片地址的字符串，使用“,”分割，我使用”componentsSeparatedByString:”来分割，将多个图片地址存入数组，并根据数组的个数来加载默认图片，等图片下载完成后
    
    </summary>
    
      <category term="基础篇" scheme="http://lyroger.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>动态添加需求(动态库)</title>
    <link href="http://lyroger.github.io/2016/01/21/%E7%BA%BF%E4%B8%8AAPP%E4%BD%BF%E7%94%A8%E5%8A%A8%E6%80%81%E5%BA%93%E6%B7%BB%E5%8A%A0%E9%9C%80%E6%B1%82%E6%96%B9%E5%BC%8F/"/>
    <id>http://lyroger.github.io/2016/01/21/线上APP使用动态库添加需求方式/</id>
    <published>2016-01-21T06:26:00.000Z</published>
    <updated>2016-10-09T01:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前些天，公司提出需要动态添加一些需求给线上App，当时觉得有点不太好办，因为当时还没有头绪，后来上网查了些资料，如<a href="http://blog.csdn.net/like7xiaoben/article/details/44081257" target="_blank" rel="external">这篇文章</a>，不过他这只是将写好的动态库拷贝到本地的沙盒中，也就是有这个方法然后我有了头绪，我只需将写好的动态库压缩上传到服务器，提供线上APP下载，解压后加载动态库执行代码即可实现其功能。接下来还是来看看具体操作和过程中遇到的一些问题和注意点吧。整个需求我写了一个<a href="https://github.com/lyroger/DynamicDemo" target="_blank" rel="external">demo</a>,你可以先下载这个<a href="https://github.com/lyroger/DynamicDemo" target="_blank" rel="external">demo</a>,对照此文章来理解。</p>
<h3 id="一、生成动态库"><a href="#一、生成动态库" class="headerlink" title="一、生成动态库"></a>一、生成动态库</h3><p>Xcode6就支持动态库了，所以只要使用XCode6及更高版本的XCode便可以生成动态库。<br><img src="/images/9E729546-8D22-48A6-A3D7-88FBDD787DD9.png" alt=""><br>此demo中满足需求的动态库我取名叫DynamicFramework.framework。在这个动态库中我实现了弹出一个UIViewController和在这个UIViewController中加载了动态库中的资源文件。并在这个动态库中引用了其他的动态库（此的demo中引用的是CommonFramework.framework），并调用其他库中的方法。这样就可以满足灵活调用和灵活添加需求的要求了。如果你需要给线上app提供动态库，你可以将写好的动态库压缩上传到服务器提供下载。</p>
<h3 id="二、加载动态库"><a href="#二、加载动态库" class="headerlink" title="二、加载动态库"></a>二、加载动态库</h3><p>在主工程中我们来加载写好的动态库，从网络下载的过程我在demo就没实现了，只做了将下下来的zip文件解压的操作，加载动态库步骤很简单，先将服务器上的DynamicFramework.framework.zip文件下载到沙盒的document中（当然，如果只是写Demo，你完全可以手动拷贝到document中），找到该zip文件，解压到同一个目录下，然后将动态库复制到程序中，即可使用，具体代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">- (void)loadDynamicFrameworkModel</div><div class="line">&#123;</div><div class="line">    NSArray* paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);</div><div class="line">    NSString *documentDirectory = nil;</div><div class="line">    if ([paths count] != 0)</div><div class="line">        documentDirectory = [paths objectAtIndex:0];</div><div class="line">    </div><div class="line">    //本地动态库文件</div><div class="line">    NSString *libName = @&quot;DynamicFramework.framework&quot;;</div><div class="line">    NSString *destLibPath = [documentDirectory stringByAppendingPathComponent:libName];</div><div class="line">    </div><div class="line">    //第一步，判断是否存在动态库文件</div><div class="line">    NSFileManager *manager = [NSFileManager defaultManager];</div><div class="line">    if (![manager fileExistsAtPath:destLibPath]) &#123;</div><div class="line">        NSLog(@&quot;没有动态库文件&quot;);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    //第三步，复制到程序中</div><div class="line">    NSBundle *frameworkBundle = [NSBundle bundleWithPath:destLibPath];</div><div class="line">    if (frameworkBundle &amp;&amp; [frameworkBundle load]) &#123;</div><div class="line">        NSLog(@&quot;load Bundle success&quot;);</div><div class="line">    &#125; else &#123;</div><div class="line">        NSLog(@&quot;load Bundle failed&quot;);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意:如果出问题了，是不是跟如下类似的错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error loading ...... no suitable image found.  Did find: ...</div></pre></td></tr></table></figure></p>
<p>其实这个错误就是我当初最当心的问题，这个就是由于写动态库时打包的签名和主工程打包的签名不一致导致主工程加载下载下来的动态库失败产生的错误。解决这个错误的办法就是保证你后续写的动态库打包时签名一定要跟线上发布的APP签名一致，否则App并不会执行你的动态库。</p>
<h3 id="三、调用动态库"><a href="#三、调用动态库" class="headerlink" title="三、调用动态库"></a>三、调用动态库</h3><p>将动态库加载到程序中后，接下来就是调用动态库中的代码了。<br>1.首先我们用运行时来加载动态库中的类，窥探是否有该类，以防使用报错奔溃。<br>2.如果有动态库入口的方法类，我们则使用NSObject类 “- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2”来执行。<br>这一步我们可以将主工程中的一些变量传入动态库中，供动态库使用，完成新需求。特别是资源信息，以下将frameworkBundle信息传入动态库中供期获取资源。<br>调用代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//第四步，获取动态库中入口类</div><div class="line">Class pacteraClass = NSClassFromString(@&quot;DynamaicEnterance&quot;);</div><div class="line">if (!pacteraClass) &#123;</div><div class="line">    NSLog(@&quot;Unable to get DynamicFramework class&quot;);</div><div class="line">    return;</div><div class="line">&#125;</div><div class="line">//第五步，执行动态库中入口类的方法</div><div class="line">NSObject *pacteraObject = [pacteraClass new];</div><div class="line">[pacteraObject performSelector:@selector(showViewOnController:withBundle:) withObject:self withObject:frameworkBundle];</div></pre></td></tr></table></figure></p>
<p>动态库中DynamaicEnterance类只要实现showViewOnController:withBundle:方法就可以了。<br>在此方法中你可以做你想做的事情，这个桥接过程就已经完成了。此demo中就实现弹出一个UIViewcontroller并加载动态库中的图片资源和调用其他库中的函数。</p>
<h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>总而言之，自从苹果支持动态库后，确实方便了许多。</p>
<ol>
<li>如果你跟我的需求一致，使用方式一致，请一定记住，你的动态库的签名需跟你的主App的签名一致，否则你的动态库将无法加载到主工程中，你的代码也将无法执行。</li>
<li>生成动态库只在iOS8及更高版本支持，但并不影响低版本使用。</li>
<li>使用动态库实现动态新增需求我并没有在线上APP中实现过，只实现与自己写的Demo。理论上在线下能实现这些功能，上传到Appstore的App也应该没问题。如有朋友遇到问题，欢迎随时留言。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前些天，公司提出需要动态添加一些需求给线上App，当时觉得有点不太好办，因为当时还没有头绪，后来上网查了些资料，如&lt;a href=&quot;http
    
    </summary>
    
      <category term="高效篇" scheme="http://lyroger.github.io/categories/%E9%AB%98%E6%95%88%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>动态修复线上bug</title>
    <link href="http://lyroger.github.io/2016/01/07/%E5%8A%A8%E6%80%81%E4%BF%AE%E5%A4%8D%E7%BA%BF%E4%B8%8Abug/"/>
    <id>http://lyroger.github.io/2016/01/07/动态修复线上bug/</id>
    <published>2016-01-07T06:23:00.000Z</published>
    <updated>2016-10-09T01:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个主题是在QQ空间终端开发团队公众号的一篇文章看到的(<a href="http://zhuanlan.zhihu.com/magilu/20288657" target="_blank" rel="external">链接地址</a>)，平时开发中确实没有使用过，为了以后派上用途，在这写这篇文章记录一下。QQ空间终端开发团队公众号一文中提到的使用TPatch来动态修复补丁，我找了很久确没找到TPatch的下载地址，而且他还不开源，但通过他我却了解到其他比较好用的动态修复补丁的框架，比如<a href="http://jspatch.com" target="_blank" rel="external">JSPatch</a>,这篇文章我就JSPatch来记录如何使用JSPatch修复线上APP的bug。</p>
<h3 id="修复的基本原理"><a href="#修复的基本原理" class="headerlink" title="修复的基本原理"></a>修复的基本原理</h3><p>能实现线上修复bug的最根本的原理是因为 Objective-C 是一门动态语言，OC上所有方法的调用/类的生成都通过 Objective-C Runtime 在运行时进行，所以我们可以通过类名/方法名反射得到相应的类和方法，也可以替换某个类的方法为新的实现，还可以新注册一个类，为类添加方法。</p>
<h3 id="JSPatch的使用"><a href="#JSPatch的使用" class="headerlink" title="JSPatch的使用"></a>JSPatch的使用</h3><ol>
<li>获得AppKey<br>首先你得先去<a href="http://jspatch.com/Index/invite" target="_blank" rel="external">JSPatch申请账号</a>，获得AppKey，每个App都有对应的一个唯一AppKey。</li>
<li>下载SDK并导入工程<br>下载 SDK 后解压，将 JSPatch.framework 导入到工程中，并添加两个系统库文件：libz.dylib 和 JavaScriptCore.framework。</li>
<li>添加代码<br>在 AppDelegate.m 里载入文件，并调用 +startWithAppKey: 方法，参数为第一步获得的 AppKey。例子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#import &lt;JSPatch/JSPatch.h&gt;</div><div class="line">@implementation AppDelegate</div><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    [JSPatch startWithAppKey:@&quot;你申请的AppKey&quot;];</div><div class="line">    // your code</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
</li>
</ol>
<p>至此 JSPatch 接入完毕，接着你就可以在后台为这个 APP 添加JS补丁了。<br>4.JS补丁代码如何写<br>写到这里，其实自己也并不太熟悉 JS 补丁代码的基本语法，不过还好他提供了<a href="https://github.com/bang590/JSPatch/wiki/基础用法" target="_blank" rel="external">文档</a>，更好的是提供了机器人帮你将OC代码转换成JS代码，<a href="http://bang590.github.io/JSPatchConvertor/" target="_blank" rel="external">转换地址</a>，不过提供转换的功能实现简单的OC代码还行，比较复杂的还需人工修复，所以：如果有使用到动态修复线上 APP Bug，并且选择使用了 JSPatch，那么你就不的不好好学习一下 JS 补丁代码的语法了。</p>
<h3 id="补丁版本支持"><a href="#补丁版本支持" class="headerlink" title="补丁版本支持"></a>补丁版本支持</h3><ol>
<li>可针对APP中对应的版本发布补丁代码。</li>
<li>可修改已经发布的补丁脚本代码，既重新上传该版本的脚本代码，APP重新启动时，会请求判断是否已经更新，若更新了会下载最新脚本代码覆盖原来的脚本代码，启动后并执行。</li>
<li>可移除已经发布的补丁脚本代码，只要在后台页面删除该版本的APP，客户端APP请求是发现该版本已经被删除，则会自动删除本地的补丁脚本代码。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>既然有这么好用的东西，记录下来并不是一件坏事，说不定以后能排上用场。另外，估计大家也会想到，既然这么强大，那为啥还要发布新版本，直接都通过 JS 脚本代码来实现新需求，这不避免了重新上线中一大堆麻烦的事情了吗？其实解决一些小问题还是可以，如果有大批需求需要上线，估计使用这种方式还是不太妥当，毕竟通过脚本代码转换到OC是需要消耗一定的性能的。</p>
<hr>
<blockquote>
<p>参考文献:<br><a href="http://blog.cnbang.net/tech/2808/" target="_blank" rel="external">JSPatch实现原理详解</a><br><a href="http://jspatch.com" target="_blank" rel="external">JSPatch</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这个主题是在QQ空间终端开发团队公众号的一篇文章看到的(&lt;a href=&quot;http://zhuanlan.zhihu.com/magilu/
    
    </summary>
    
      <category term="高效篇" scheme="http://lyroger.github.io/categories/%E9%AB%98%E6%95%88%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>runtime那些事（一）</title>
    <link href="http://lyroger.github.io/2015/12/31/runtime%E9%82%A3%E4%BA%9B%E4%BA%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://lyroger.github.io/2015/12/31/runtime那些事（一）/</id>
    <published>2015-12-31T08:48:00.000Z</published>
    <updated>2016-10-09T01:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>工作中，确实没有刻意去使用runtime机制，作为一种实用的机制，我们不得不去累积这些知识，然后灵活使用。为了为runtime的知识累积，准备写一些关于runtime系列的文章。</p>
<h4 id="一、消息转发机制"><a href="#一、消息转发机制" class="headerlink" title="一、消息转发机制"></a>一、消息转发机制</h4><p>下面一张图详细的概括了每个函数调用的先后以及执行的前提</p>
</blockquote>
<p><img src="/images/runtime消息转发.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;工作中，确实没有刻意去使用runtime机制，作为一种实用的机制，我们不得不去累积这些知识，然后灵活使用。为了为runtime的知识累积，准备写一些关于runtime系列的文章。&lt;/p&gt;
&lt;h4 id=&quot;一、消息转发机制&quot;&gt;&lt;a href=&quot;#一、
    
    </summary>
    
      <category term="高效篇" scheme="http://lyroger.github.io/categories/%E9%AB%98%E6%95%88%E7%AF%87/"/>
    
    
      <category term="runtime" scheme="http://lyroger.github.io/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C代码混淆</title>
    <link href="http://lyroger.github.io/2015/12/25/Objective-C%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/"/>
    <id>http://lyroger.github.io/2015/12/25/Objective-C代码混淆/</id>
    <published>2015-12-25T07:41:00.000Z</published>
    <updated>2016-10-09T01:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本方法参考CSDN博主 念茜<a href="http://blog.csdn.net/yiyaaixuexi/article/details/29201699" target="_blank" rel="external">iOS安全攻防（二十三）：Objective-C代码混淆</a>,为深度理解，自己按照步骤做了一遍。并写下收获和体会。</p>
<h4 id="一、为什么需要对工程代码进行混淆"><a href="#一、为什么需要对工程代码进行混淆" class="headerlink" title="一、为什么需要对工程代码进行混淆"></a>一、为什么需要对工程代码进行混淆</h4><p>这里我不多说了，可以参考<a href="http://my.csdn.net/yiyaaixuexi" target="_blank" rel="external">念茜</a>的iOS安全攻防系列博客。</p>
<h4 id="二、混淆代码原理"><a href="#二、混淆代码原理" class="headerlink" title="二、混淆代码原理"></a>二、混淆代码原理</h4><p>操作过程中，我使用的是 #define ,将工程中的类中所有的方法名替换成随机字符串，当然，字符串需保证不是关键字。这里的替换方法是由博主 念茜 写的一段脚本。这里就不贴代码了，可以直接去她的<a href="http://blog.csdn.net/yiyaaixuexi/article/details/29201699" target="_blank" rel="external">iOS安全攻防（二十三）：Objective-C代码混淆</a>博文中参阅。</p>
<h4 id="三、操作步骤"><a href="#三、操作步骤" class="headerlink" title="三、操作步骤"></a>三、操作步骤</h4><p>1.将混淆脚本 confuse.sh 放到工程目录下。<br>2.添加头文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">```objective-c</div><div class="line">#ifdef __OBJC__ </div><div class="line">    //添加混淆作用的头文件（这个文件名是脚本confuse.sh中定义的）  </div><div class="line">    #import &quot;codeObfuscation.h&quot;  </div><div class="line">    ....</div><div class="line">#endif</div></pre></td></tr></table></figure></p>
<p>3.配置 Build Phase，在工程 Build Phase 中添加执行脚本操作，执行 confuse.sh 脚本，如图：<br><img src="/images/48D4E311-9DA2-4A18-A16C-BAF46CAEEE5C.jpg" alt=""><br>4.创建函数名列表 func.list ，写入待混淆的函数名。<br>5.跑起工程。</p>
<h4 id="四、一路走来，遇到的问题"><a href="#四、一路走来，遇到的问题" class="headerlink" title="四、一路走来，遇到的问题"></a>四、一路走来，遇到的问题</h4><ol>
<li><code>confuse.sh: No such file or directory</code><br>解决办法：先看看你Build Phases中的Run Script中写的路径是否跟你confuse.sh的路径一致。</li>
<li><code>confuse.sh: Permission denied</code><br>解决办法:chmod a+x confuse.sh  //对confuse.sh文件增加可执行权限</li>
<li><code>func.list: No such file or directory</code><br>解决办法:确保func.list文件与confuse.sh文件在同一个文件夹里面，然后修改<code>念茜</code>的脚本文件：<code>STRING_SYMBOL_FILE=&quot;func.list&quot;</code>为<code>STRING_SYMBOL_FILE=&quot;$PROJECT_DIR/$PROJECT_NAME/func.list&quot;</code>，其实就是改为相对路径，注意这个路径是否对应你的func.list文件路径。</li>
</ol>
<h4 id="五、享受一下成果"><a href="#五、享受一下成果" class="headerlink" title="五、享受一下成果"></a>五、享受一下成果</h4><p>1.首先我func.list中写的要混淆的函数名如下图:<br><img src="/images/0A2DD61D-5C75-4F36-B7A5-A01A14D75040.jpg" alt=""><br>2.使用class-dump查看分析app头文件<br>class-dump命令:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span>-<span class="title">dump</span> -<span class="title">H</span> ....<span class="title">demo</span>.<span class="title">app</span> -<span class="title">o</span> ..../<span class="title">dump</span>-<span class="title">head</span></span></div></pre></td></tr></table></figure></p>
<p>-H后面是app文件路径，-o后面导出头文件的文件夹<br>导出头文件后，查找func.list中替换的类中的函数名如下图:<br><img src="/images/DEF7F821-515F-467E-B1EE-1123F1CC2F4B.jpg" alt=""><br>这样下来，就算拿到分析出头文件，也不太好判断方法是干什么用的。从而又一步提高了app的安全性。</p>
<h4 id="六、建议"><a href="#六、建议" class="headerlink" title="六、建议"></a>六、建议</h4><p>如果一个是一个庞端的工程，我想大家都会觉得，自己还需要一个一个将方法名列入到func.list文件中，这可不是一个小的工作量，这里我看到有人优化了这个操作(<a href="http://blog.csdn.net/yxh265/article/details/38438959" target="_blank" rel="external">详见</a>)，无需自己亲手去填充func.list文件，自动将工程中的所有.m对应的.h文件的函数名导入到func.list，确实是个不做的做法，但我在使用过程中，跑到到自动导入的那段代码，总会遇到奔溃。还望作者能多测试一下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本方法参考CSDN博主 念茜&lt;a href=&quot;http://blog.csdn.net/yiyaaixuexi/article/detail
    
    </summary>
    
      <category term="高效篇" scheme="http://lyroger.github.io/categories/%E9%AB%98%E6%95%88%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>FMDB使用SQLCipher加密</title>
    <link href="http://lyroger.github.io/2015/12/23/FMDB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8A%A0%E5%AF%86/"/>
    <id>http://lyroger.github.io/2015/12/23/FMDB数据库加密/</id>
    <published>2015-12-23T09:33:00.000Z</published>
    <updated>2016-10-09T01:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>数据库数据加密的必要性就不多说了，直接进入主题，如何使用FMDB对数据加密。<br>这里我建议使用cocospod来管理第三方库，如果没有安装可以参考<a href="http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/" target="_blank" rel="external">这里</a>来安装.</p>
<h4 id="1-首先，我们的下载SQLCipher依赖库"><a href="#1-首先，我们的下载SQLCipher依赖库" class="headerlink" title="1.首先，我们的下载SQLCipher依赖库"></a>1.首先，我们的下载SQLCipher依赖库</h4><p>1.1 <figure class="highlight plain"><figcaption><span>'SQLCipher', '~> 3.1.0'```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#### 2.其次，我们需要一个具有加密功能的FMDB版本；</div><div class="line">加密的FMDB其实是一个分支，也就是说，如果你的FMDB版本不支持SQLCipher加密，那么你就需要替换FMDB。Github上关于该分支的安装只提供了cocospod的安装方式。Github上FMDB的[地址](https://github.com/ccgus/fmdb);</div><div class="line">使用cocospod来跟新具有加密功能的FMDB</div><div class="line">2.1 将以前```pod &apos;FMDB&apos;``` 改成```pod &apos;FMDB/SQLCipher&apos;</div></pre></td></tr></table></figure></p>
<p>2.2 更新pod <code>pod update</code></p>
<h4 id="3-最后，修改一下你的代码"><a href="#3-最后，修改一下你的代码" class="headerlink" title="3.最后，修改一下你的代码"></a>3.最后，修改一下你的代码</h4><p>定义一个加密的key,这里我自定义了一个宏<code>DB_SECRETKEY</code>,然后在FMDB中的FMDatabase.m类中加一句代码，如下图:<br><img src="/images/F0547994-4A8E-43A8-A937-DC94A4637CA2.png" alt=""></p>
<h4 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h4><p>run下你的工程，并对数据库做一些操作，然后在使用其他管理工具打开数据时，你就发现他会提示你file is encrypted or is not a database<br><img src="/images/AFB7BECA-A6FF-4CE4-BAA1-99097EFAD5BF.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;数据库数据加密的必要性就不多说了，直接进入主题，如何使用FMDB对数据加密。&lt;br&gt;这里我建议使用cocospod来管理第三方库，如果没有安
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>swift学习笔记（基础篇）</title>
    <link href="http://lyroger.github.io/2015/12/14/swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/"/>
    <id>http://lyroger.github.io/2015/12/14/swift学习笔记（基础篇）/</id>
    <published>2015-12-14T06:35:00.000Z</published>
    <updated>2016-10-09T01:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>####一数值型字面量</p>
<ul>
<li>一个十进制数，没有前缀</li>
<li>一个二进制数，前缀是0b</li>
<li>一个八进制数，前缀是0o</li>
<li>一个十六进制数，前缀是0x</li>
</ul>
<p>列如：下面的所有整数字面量的十进制值都是17</p>
<blockquote>
<p>let decimalInteger = 17<br>let binaryInteger = 0b10001       // 二进制的17<br>let octalInteger = 0o21           // 八进制的17<br>let hexadecimalInteger = 0x11     // 十六进制的17</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####一数值型字面量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个十进制数，没有前缀&lt;/li&gt;
&lt;li&gt;一个二进制数，前缀是0b&lt;/li&gt;
&lt;li&gt;一个八进制数，前缀是0o&lt;/li&gt;
&lt;li&gt;一个十六进制数，前缀是0x&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;列如：下面的所有整数字面量的十进制值都
    
    </summary>
    
      <category term="swift" scheme="http://lyroger.github.io/categories/swift/"/>
    
    
  </entry>
  
  <entry>
    <title>升级XCode7和iOS9相关问题</title>
    <link href="http://lyroger.github.io/2015/10/22/%E5%8D%87%E7%BA%A7XCode7%E5%92%8CiOS9%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>http://lyroger.github.io/2015/10/22/升级XCode7和iOS9相关问题/</id>
    <published>2015-10-22T06:29:00.000Z</published>
    <updated>2016-10-09T01:39:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-报Bitcode相关错误。"><a href="#一-报Bitcode相关错误。" class="headerlink" title="一.报Bitcode相关错误。"></a>一.报Bitcode相关错误。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Framework/libraries/extends/QQSDK/TencentOpenAPI.framework/TencentOpenAPI(WeiyunAPI.o)&apos; does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64</div><div class="line">clang: error: linker command failed with exit code 1 (use -v to see invocation)</div></pre></td></tr></table></figure>
<p>1.解决方案<br>工程文件中找到target-&gt;Build Settings-&gt;搜索bitcode，然后出现Enablecode选项，设置为NO即可。如图：</p>
<p><img src="/images/code.jpg" alt=""><br>重新build即可消除bitcode相关问题。</p>
<p>2.问题出现原因可以参考：<a href="http://www.cocoachina.com/ios/20150818/13078.html" title="理解Bitcode：一种中间代码" target="_blank" rel="external">理解Bitcode：一种中间代码</a></p>
<h2 id="二-iOS9设备网络请求失败"><a href="#二-iOS9设备网络请求失败" class="headerlink" title="二.iOS9设备网络请求失败"></a>二.iOS9设备网络请求失败</h2><p>1.出现问题原因<br>iOS9把所有的http请求都改为https了：iOS9系统发送的网络请求将统一使用TLS 1.2 SSL。采用TLS 1.2 协议，目的是:强制增强数据访问安全，而且，系统 Foundation 框架下的相关网络请求，将不再默认使用 Http 等不安全的网络协议，而默认采用 TLS 1.2。服务器因此需要更新，以解析相关数据。如不更新，可通过在 Info.plist 中声明。<br>2.具体如何在info.plist中声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;</div><div class="line">&lt;dict&gt;</div><div class="line">    &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;</div><div class="line">    &lt;true/&gt;</div><div class="line">&lt;/dict&gt;</div></pre></td></tr></table></figure></p>
<p>如图所示:</p>
<p><img src="/images/plist.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-报Bitcode相关错误。&quot;&gt;&lt;a href=&quot;#一-报Bitcode相关错误。&quot; class=&quot;headerlink&quot; title=&quot;一.报Bitcode相关错误。&quot;&gt;&lt;/a&gt;一.报Bitcode相关错误。&lt;/h2&gt;&lt;figure class=&quot;highli
    
    </summary>
    
    
  </entry>
  
</feed>
