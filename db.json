{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/0A2DD61D-5C75-4F36-B7A5-A01A14D75040.jpg","path":"images/0A2DD61D-5C75-4F36-B7A5-A01A14D75040.jpg","modified":0,"renderable":0},{"_id":"source/images/3C407C29-727A-4C56-99D8-A0EE589B6B5A.jpg","path":"images/3C407C29-727A-4C56-99D8-A0EE589B6B5A.jpg","modified":0,"renderable":0},{"_id":"source/images/3C407C29-727A-4C56-99D8-A0EE589B6B5A.png","path":"images/3C407C29-727A-4C56-99D8-A0EE589B6B5A.png","modified":0,"renderable":0},{"_id":"source/images/48D4E311-9DA2-4A18-A16C-BAF46CAEEE5C.jpg","path":"images/48D4E311-9DA2-4A18-A16C-BAF46CAEEE5C.jpg","modified":0,"renderable":0},{"_id":"source/images/BD1CB94D-2999-43FE-8D03-AC132A8D5D84.jpg","path":"images/BD1CB94D-2999-43FE-8D03-AC132A8D5D84.jpg","modified":0,"renderable":0},{"_id":"source/images/9E729546-8D22-48A6-A3D7-88FBDD787DD9.png","path":"images/9E729546-8D22-48A6-A3D7-88FBDD787DD9.png","modified":0,"renderable":0},{"_id":"source/images/AFB7BECA-A6FF-4CE4-BAA1-99097EFAD5BF.png","path":"images/AFB7BECA-A6FF-4CE4-BAA1-99097EFAD5BF.png","modified":0,"renderable":0},{"_id":"source/images/DEF7F821-515F-467E-B1EE-1123F1CC2F4B.jpg","path":"images/DEF7F821-515F-467E-B1EE-1123F1CC2F4B.jpg","modified":0,"renderable":0},{"_id":"source/images/E3DA53E0E1F8AACCD19576E4C279ED6D.jpeg","path":"images/E3DA53E0E1F8AACCD19576E4C279ED6D.jpeg","modified":0,"renderable":0},{"_id":"source/images/bg.jpg","path":"images/bg.jpg","modified":0,"renderable":0},{"_id":"source/images/F0547994-4A8E-43A8-A937-DC94A4637CA2.png","path":"images/F0547994-4A8E-43A8-A937-DC94A4637CA2.png","modified":0,"renderable":0},{"_id":"source/images/code.jpg","path":"images/code.jpg","modified":0,"renderable":0},{"_id":"source/images/game1.gif","path":"images/game1.gif","modified":0,"renderable":0},{"_id":"source/images/jenins首页.png","path":"images/jenins首页.png","modified":0,"renderable":0},{"_id":"source/images/mvvm.png","path":"images/mvvm.png","modified":0,"renderable":0},{"_id":"source/images/mygif.gif","path":"images/mygif.gif","modified":0,"renderable":0},{"_id":"source/images/plist.jpg","path":"images/plist.jpg","modified":0,"renderable":0},{"_id":"source/images/qrcode_for_gh_6f53ca8d5aea_258.jpg","path":"images/qrcode_for_gh_6f53ca8d5aea_258.jpg","modified":0,"renderable":0},{"_id":"source/images/qrcode.jpg","path":"images/qrcode.jpg","modified":0,"renderable":0},{"_id":"source/images/创建项目.png","path":"images/创建项目.png","modified":0,"renderable":0},{"_id":"source/images/工程配置.png","path":"images/工程配置.png","modified":0,"renderable":0},{"_id":"source/images/创建项目1.png","path":"images/创建项目1.png","modified":0,"renderable":0},{"_id":"source/images/微信效果.png","path":"images/微信效果.png","modified":0,"renderable":0},{"_id":"source/images/构建1.png","path":"images/构建1.png","modified":0,"renderable":0},{"_id":"source/images/最终效果.png","path":"images/最终效果.png","modified":0,"renderable":0},{"_id":"source/images/配置项目-项目名称.png","path":"images/配置项目-项目名称.png","modified":0,"renderable":0},{"_id":"source/images/项目配置-源码管理.png","path":"images/项目配置-源码管理.png","modified":0,"renderable":0},{"_id":"source/images/项目配置-源码管理添加http授权.png","path":"images/项目配置-源码管理添加http授权.png","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/confusion3.png","path":"images/confusion3.png","modified":0,"renderable":0},{"_id":"source/images/game2.gif","path":"images/game2.gif","modified":0,"renderable":0},{"_id":"source/images/iOS自带效果.png","path":"images/iOS自带效果.png","modified":0,"renderable":0},{"_id":"source/images/项目管理-立即构建.png","path":"images/项目管理-立即构建.png","modified":0,"renderable":0},{"_id":"source/images/项目配置-源码管理SSH授权创建.png","path":"images/项目配置-源码管理SSH授权创建.png","modified":0,"renderable":0},{"_id":"themes/jacman/source/categories/index.md","path":"categories/index.md","modified":0,"renderable":1},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/tags/index.md","path":"tags/index.md","modified":0,"renderable":1},{"_id":"source/images/gameCenter.gif","path":"images/gameCenter.gif","modified":0,"renderable":0},{"_id":"source/images/gameCenter1.gif","path":"images/gameCenter1.gif","modified":0,"renderable":0},{"_id":"source/images/runtime消息转发.png","path":"images/runtime消息转发.png","modified":0,"renderable":0},{"_id":"source/images/项目配置-构建配置.png","path":"images/项目配置-构建配置.png","modified":0,"renderable":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":0,"renderable":1},{"_id":"source/images/cover.jpg","path":"images/cover.jpg","modified":0,"renderable":0},{"_id":"source/images/jiafei.gif","path":"images/jiafei.gif","modified":0,"renderable":0},{"_id":"source/images/iterm2_Color_2016121301.png","path":"images/iterm2_Color_2016121301.png","modified":1,"renderable":0},{"_id":"source/images/iterm2_Colors2016121302.png","path":"images/iterm2_Colors2016121302.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/jacman/_config.yml","hash":"6312e1a75de117ce9280494da5935546f23c7bc3","modified":1516947493000},{"_id":"source/CNAME","hash":"cb5426f79a15623634940e38ec2db6e114778b43","modified":1481550176000},{"_id":"source/google76fffc30acdbb186.html","hash":"3bb8e71ad8794f8b21d4157c3f879443d2d9cd64","modified":1481550176000},{"_id":"source/baidu_verify_H19IsAcjX0.html","hash":"65d068da9646299f404c7deb9513ec6af7de1cd1","modified":1481550176000},{"_id":"themes/jacman/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1481550176000},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1481550176000},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1481550176000},{"_id":"themes/jacman/layout/layout.ejs","hash":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1481550176000},{"_id":"themes/jacman/layout/index.ejs","hash":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1481550176000},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1481550176000},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1481550176000},{"_id":"themes/jacman/languages/default.yml","hash":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1481550176000},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1481550176000},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41","modified":1481550176000},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1481550176000},{"_id":"source/_posts/MVVM模式的学习.md","hash":"a2a7a1c8d39f6ddf9aea35df7459046806d3b84f","modified":1481550176000},{"_id":"source/_posts/Mac上的小技巧.md","hash":"32f1a0757fc976576f5a0857c3f739ac7cbbf961","modified":1516947493000},{"_id":"source/_posts/JS与OC交互.md","hash":"c46bf60259b97b994bd9560fbd4675deaa49e0f7","modified":1516947493000},{"_id":"source/_posts/Jenkins+Git自动构建.md","hash":"860c4cbae788cb4a0b333b1f228cdb3acf7eb443","modified":1481550176000},{"_id":"source/_posts/FMDB数据库加密.md","hash":"5ae73196fd65f291d5c78c1a671a1cbf62e87729","modified":1481550176000},{"_id":"source/_posts/NSURL相关问题.md","hash":"a406c8af4bf194021ffb0501637d594fbb3f0fd8","modified":1481550176000},{"_id":"source/_posts/Markdown学习.md","hash":"e7304a2dcef6be1d30bb27daae9fb975a63a6ea0","modified":1481550176000},{"_id":"source/_posts/Objective-C代码混淆.md","hash":"b03b7c5accca6690b8b2f0a8bed92bcd01263d2d","modified":1481550176000},{"_id":"source/_posts/ReactiveCocoa学习.md","hash":"1b8f4f5a659b6b857f5e4645241a87d4a9f2f3e7","modified":1481550176000},{"_id":"source/_posts/iOS.md","hash":"03b0434ce01df12cf02d7473321cac2da6210780","modified":1481550176000},{"_id":"source/_posts/hello-hexo.md","hash":"fe24229d3a1858632dbe2ecef41b8fc3d8dc0cfe","modified":1516947493000},{"_id":"source/_posts/UISearchBar的使用.md","hash":"b7059908def9e9e528a0a00bbcc9006c27f3bf4d","modified":1481550176000},{"_id":"source/_posts/iOS基础深究.md","hash":"945f1a4a332cc0f9911c5851e378e8b94b41f1bd","modified":1481550176000},{"_id":"source/_posts/runtime那些事（一）.md","hash":"701152282a2740853a7ea3f615c3d29dadf6c731","modified":1481550176000},{"_id":"source/_posts/swift实战.md","hash":"5ebf09b596201ef9569139806e9860c513aa9ea7","modified":1481550176000},{"_id":"source/_posts/swift学习笔记（基础篇）.md","hash":"8311a0fdd2bd34929f44e11eb7e3bcb3aba8fcb6","modified":1481550176000},{"_id":"source/_posts/关于做ipod-library开发的体验.md","hash":"bf8002940bf280a17a0ca77de5666604215ed21d","modified":1481550176000},{"_id":"source/_posts/使用Cordova搭建混合框架.md","hash":"3edb97faf5a0d32468cb2867463779d61803643d","modified":1481550176000},{"_id":"source/_posts/关于字符串的分割.md","hash":"eebe4b95be0c07fb6a387a705f5b65fe6161bbb2","modified":1481550176000},{"_id":"source/_posts/动画学习篇一.md","hash":"0f815614238531e6114459ad16de52f5e7613d0e","modified":1481550176000},{"_id":"source/_posts/动态修复线上bug.md","hash":"804f3a76fab5cf667f81cb627f1b226be87cc89f","modified":1481550176000},{"_id":"source/_posts/升级XCode7和iOS9相关问题.md","hash":"2e0a487f18418b48c720f718322c2fc4b5eff299","modified":1481550176000},{"_id":"source/_posts/线上APP使用动态库添加需求方式.md","hash":"c436805291f194cd2b63d99cadde53190e986d70","modified":1481550176000},{"_id":"source/about/index.md","hash":"ec3cc1fb7637bac06270c9669f90ed9419e42580","modified":1481550176000},{"_id":"source/images/0A2DD61D-5C75-4F36-B7A5-A01A14D75040.jpg","hash":"78d0e1bf19df98646bbfe8767255ce0b31025dd0","modified":1481550176000},{"_id":"source/images/3C407C29-727A-4C56-99D8-A0EE589B6B5A.jpg","hash":"00a36cd16a4df1e7f26ac423f8ff402615bcea9f","modified":1481550176000},{"_id":"source/images/3C407C29-727A-4C56-99D8-A0EE589B6B5A.png","hash":"00a36cd16a4df1e7f26ac423f8ff402615bcea9f","modified":1481550176000},{"_id":"source/images/48D4E311-9DA2-4A18-A16C-BAF46CAEEE5C.jpg","hash":"b60654f7619a6c889d91046ac0a3098e3eea8a33","modified":1481550176000},{"_id":"source/images/BD1CB94D-2999-43FE-8D03-AC132A8D5D84.jpg","hash":"5c6dfe047c33a13ff339d3332bb9b48da59f8143","modified":1481550176000},{"_id":"source/images/9E729546-8D22-48A6-A3D7-88FBDD787DD9.png","hash":"acacb50af02229c656dd2b2ccbbb98a710ca020d","modified":1481550176000},{"_id":"source/images/AFB7BECA-A6FF-4CE4-BAA1-99097EFAD5BF.png","hash":"951da5e8138e0e2861e0670ee304e510e54eba19","modified":1481550176000},{"_id":"source/images/DEF7F821-515F-467E-B1EE-1123F1CC2F4B.jpg","hash":"9a206d404069a39ff75a2d7f87f3b605c2403151","modified":1481550176000},{"_id":"source/images/E3DA53E0E1F8AACCD19576E4C279ED6D.jpeg","hash":"c5be57462ac8168a332cd1585242b5aa950a259e","modified":1481550176000},{"_id":"source/images/bg.jpg","hash":"5b961c607cc66ce1bf8b0c82399c7505e82f995e","modified":1481550176000},{"_id":"source/images/F0547994-4A8E-43A8-A937-DC94A4637CA2.png","hash":"0bb3791b0fe4c052f1c3430b5b3b3d99bfecce91","modified":1481550176000},{"_id":"source/images/code.jpg","hash":"4e49cf9f7a1654435b5b9bea10da14edb32b57bb","modified":1481550176000},{"_id":"source/images/game1.gif","hash":"db4db6d5b66e4e451afce0d02b7e70a0999849db","modified":1481550176000},{"_id":"source/images/jenins首页.png","hash":"96cb3fc98e50996705796b8879ffc50bd4fa3deb","modified":1481550176000},{"_id":"source/images/mvvm.png","hash":"3d8c460eaa9874098a00ddfaa0dd638e5bd7a83c","modified":1481550176000},{"_id":"source/images/mygif.gif","hash":"0e37333962eceea3cc80fce6fb0d363fe0c47c78","modified":1481550176000},{"_id":"source/images/plist.jpg","hash":"e53c372e84d441415cd55f91a083f73599e75198","modified":1481550176000},{"_id":"source/images/qrcode_for_gh_6f53ca8d5aea_258.jpg","hash":"c7d35142d82a369b53f0b75ac47fe2e718b69758","modified":1481550176000},{"_id":"source/images/qrcode.jpg","hash":"c7d35142d82a369b53f0b75ac47fe2e718b69758","modified":1481550176000},{"_id":"source/images/创建项目.png","hash":"0612a6d1769eb6de16c50763167fcf16f02c33e8","modified":1481550176000},{"_id":"source/images/工程配置.png","hash":"dc6a86197b29469f153ba4148d1e488573036f0a","modified":1481550176000},{"_id":"source/images/创建项目1.png","hash":"62311e3be07b52cd1645c8d4ba7ccd9051b8a2cb","modified":1481550176000},{"_id":"source/images/微信效果.png","hash":"eff27de57154a0dd938352a820e6fa58e3fb3f1e","modified":1481550176000},{"_id":"source/images/构建1.png","hash":"5820cab39ac4fe5ea8ddb5906fd80b610741d0cf","modified":1481550176000},{"_id":"source/images/最终效果.png","hash":"254d9a45026ac1891a01ad3c2386f55d115291aa","modified":1481550176000},{"_id":"source/images/配置项目-项目名称.png","hash":"49f914ba158b38eff3d6e5cae9232cce27a99aac","modified":1481550176000},{"_id":"source/images/项目配置-源码管理.png","hash":"64c5f06a1a0f255397d9b0815b3e620fb6b7d823","modified":1481550176000},{"_id":"source/images/项目配置-源码管理添加http授权.png","hash":"89d078f2a11b2068e64372483f1f385b8dfd52d5","modified":1481550176000},{"_id":"source/images/avatar.jpg","hash":"97eb0565e176c5e1e41aa8a218163aa8c15974e7","modified":1481550176000},{"_id":"source/images/confusion3.png","hash":"68325f855ed3f43dd9ce5ae5743d385d76c77de2","modified":1481550176000},{"_id":"source/images/game2.gif","hash":"ba128193ed157cf4f9bc42609d367128786aadc9","modified":1481550176000},{"_id":"source/images/iOS自带效果.png","hash":"af9111acd03ade0a818f0fad613fcc6c69d7dc49","modified":1481550176000},{"_id":"source/images/项目管理-立即构建.png","hash":"e5a57e2cfcfe23be27164a16a7c6c74f763af87f","modified":1481550176000},{"_id":"source/images/项目配置-源码管理SSH授权创建.png","hash":"9d302a6be9669f1184ad7e0d40489c9d11b689b7","modified":1481550176000},{"_id":"themes/jacman/source/categories/index.md","hash":"901423cd96cb4a88ee181e0952e2e0326875005b","modified":1481550176000},{"_id":"themes/jacman/source/css/style.styl","hash":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1481550176000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1481550176000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1481550176000},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1481550176000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1481550176000},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1481550176000},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1481550176000},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1481550176000},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1481550176000},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1481550176000},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1481550176000},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1481550176000},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1481550176000},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1481550176000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1481550176000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1481550176000},{"_id":"themes/jacman/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1481550176000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1481550176000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1481550176000},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1481550176000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1481550176000},{"_id":"themes/jacman/source/img/bg.jpg","hash":"5b961c607cc66ce1bf8b0c82399c7505e82f995e","modified":1481550176000},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1481550176000},{"_id":"themes/jacman/source/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1481550176000},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1481550176000},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1481550176000},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1481550176000},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1481550176000},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1481550176000},{"_id":"themes/jacman/source/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1481550176000},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1481550176000},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1481550176000},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1481550176000},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1481550176000},{"_id":"themes/jacman/source/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"6f54985055c13d5e43cf7e79cb785c5e5cf7828b","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"4267df909c74dc1ec9ad3d62eb1f199840c27d1e","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"fba02a99864e6829daa843cdfb4546d34e9e64e6","modified":1516947493000},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"01ca4c30a65e4044a9417a7bb095103a097fa92a","modified":1516947493000},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"c4f527fff0070fbe65919053a16224412317f40d","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1481550176000},{"_id":"themes/jacman/layout/_widget/aboutinfo.ejs","hash":"0edd3fe6be351eea73ea9a5d429cf835e131925a","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1481550176000},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1481550176000},{"_id":"themes/jacman/source/tags/index.md","hash":"2dbb6c9d068cc4ff51d7eefb9224cd86388ee101","modified":1481550176000},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1481550176000},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"5c759b6ea214bac56a393247de27e67ce73fb33f","modified":1481550176000},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1481550176000},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1481550176000},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"a31c2b223d0feb2a227e203cac9e5d13b7d328a8","modified":1481550176000},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1481550176000},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1481550176000},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1481550176000},{"_id":"source/images/gameCenter.gif","hash":"9db7ab640c3a07a7d6a3c7949104123c72656de7","modified":1481550176000},{"_id":"source/images/gameCenter1.gif","hash":"9393522741dbb418d95eef18b4e56e89ec745484","modified":1481550176000},{"_id":"source/images/runtime消息转发.png","hash":"bdbf489d7b7a2df14f36369e62fa1ffa3d3d6eeb","modified":1481550176000},{"_id":"source/images/项目配置-构建配置.png","hash":"0cd2baa0b5e90c13d4d4bd9ca52bcf186ff8677a","modified":1481550176000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1481550176000},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1481550176000},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1481550176000},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1481550176000},{"_id":"themes/jacman/source/img/author.jpg","hash":"97eb0565e176c5e1e41aa8a218163aa8c15974e7","modified":1481550176000},{"_id":"themes/jacman/source/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1481550176000},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1481550176000},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"1f00ea0b51c80f0fd8f21584d37cc3c9051a1d0b","modified":1481550176000},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1481550176000},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1481550176000},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"ee9061609d3aa435da6ce1a20ef2ee5f8e0c3584","modified":1481550176000},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1481550176000},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"1911613a19b605a58f801c21b03b5d4c83b90f9c","modified":1481550176000},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1481550176000},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"71133045771d9f520a33610429ae7294ffad4a3f","modified":1481550176000},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1481550176000},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"1136600932b97534b88465bf05ef313630b2de3d","modified":1481550176000},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"a72ff14effd276015264f870f47ed8f8413bf5d3","modified":1481550176000},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1481550176000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1481550176000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1481550176000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1481550176000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1481550176000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"c88bc8f5805173920a5fdd7e9234a850e3d8e151","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"cda14426578f0a03f05412f9a8cdc90c76aa364a","modified":1481550176000},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1481550176000},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1481550176000},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1481550176000},{"_id":"source/images/cover.jpg","hash":"211c548f81856a9a560bc59e301868fc56ba35ac","modified":1481550176000},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1481550176000},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1481550176000},{"_id":"source/images/jiafei.gif","hash":"65475826789054b683b54ce86be07b742dcb5b6e","modified":1481550176000},{"_id":"source/.DS_Store","hash":"ba9cda575a0bba1218ccf2b18e741e9f26bb960e","modified":1516947799000},{"_id":"source/_posts/2016年个人总结.md","hash":"4421dcffc8fe0fea019a4d02a6d364e6a12bc791","modified":1516947493000},{"_id":"source/_posts/React Native小疙瘩.md","hash":"7369ae22f043ed554aec73214ee4592a03f176ef","modified":1497510524000},{"_id":"source/_posts/iterm配色.md","hash":"0fb46b8695677a15b99e4647df237f3d55b1ec57","modified":1516947493000},{"_id":"source/_posts/截屏遇到的那些事.md","hash":"53286c19ede3ec8c4e54825426ff939101fe4233","modified":1498031347000},{"_id":"source/images/iterm2_Color_2016121301.png","hash":"2edefe73d8dc237ab7357765a24291b4f2558ff9","modified":1516947493000},{"_id":"source/images/iterm2_Colors2016121302.png","hash":"eacb6b13cda82e672bafcee7a3c0138ecacd9ae1","modified":1516947493000}],"Category":[{"name":"设计模式","_id":"ciwm7fobo0005zn3m7pyau0xj"},{"name":"工具","_id":"ciwm7fobx0009zn3mszjpq9pw"},{"name":"基础篇","_id":"ciwm7foc0000dzn3mfz2vlj4n"},{"name":"高效篇","_id":"ciwm7focm000vzn3mwpslhwnl"},{"name":"框架","_id":"ciwm7focq0012zn3mufxdn2jx"},{"name":"swift","_id":"ciwm7fod6001fzn3mexm25hfo"},{"name":"动画","_id":"ciwm7fodd001qzn3m6mj5khq5"},{"name":"summary","_id":"cjcvknvh800020b3mqdnxphqq"}],"Data":[],"Page":[{"_content":"H19IsAcjX0","source":"baidu_verify_H19IsAcjX0.html","raw":"H19IsAcjX0","date":"2016-12-12T13:42:56.000Z","updated":"2016-12-12T13:42:56.000Z","path":"baidu_verify_H19IsAcjX0.html","title":"","comments":1,"layout":"page","_id":"ciwm7fo9t0000zn3mcb8790i8","content":"H19IsAcjX0","excerpt":"","more":"H19IsAcjX0"},{"_content":"google-site-verification: google76fffc30acdbb186.html","source":"google76fffc30acdbb186.html","raw":"google-site-verification: google76fffc30acdbb186.html","date":"2016-12-12T13:42:56.000Z","updated":"2016-12-12T13:42:56.000Z","path":"google76fffc30acdbb186.html","title":"","comments":1,"layout":"page","_id":"ciwm7fo9w0001zn3mgzpcyey1","content":"google-site-verification: google76fffc30acdbb186.html","excerpt":"","more":"google-site-verification: google76fffc30acdbb186.html"},{"date":"2015-10-16T03:06:00.000Z","status":"public","title":"关于博主","_content":"\n<p>计算机系毕业</p>\n<p>热爱运动，个子没有一米八，但喜欢打篮球，运动细胞不那么活跃，却还是热衷羽毛球</p>\n<p>写过web程序，用过.net</p>\n<p>写过客户端程序，发布过App，用的是Objective-C</p>\n<p>想有一天，有那么一两个App，大家每天都能点击几下</p>\n<p>想有一天，在iOS开发界有点小名气</p>\n<p>博客换了搬了很多次家，希望这里是终点</p>\n<p>从此在此积累iOS相关经验，分享iOS相关技术</p>\n## 联系方式\n1.微信公众号：\n<p><img src=\"/images/qrcode.jpg\" alt=\"微信公众号\"></p>\n2.邮箱：\nyan1079@126.com","source":"about/index.md","raw":"---\ndate: 2015-10-16 11:06\nstatus: public\ntitle: 关于博主\n---\n\n<p>计算机系毕业</p>\n<p>热爱运动，个子没有一米八，但喜欢打篮球，运动细胞不那么活跃，却还是热衷羽毛球</p>\n<p>写过web程序，用过.net</p>\n<p>写过客户端程序，发布过App，用的是Objective-C</p>\n<p>想有一天，有那么一两个App，大家每天都能点击几下</p>\n<p>想有一天，在iOS开发界有点小名气</p>\n<p>博客换了搬了很多次家，希望这里是终点</p>\n<p>从此在此积累iOS相关经验，分享iOS相关技术</p>\n## 联系方式\n1.微信公众号：\n<p><img src=\"/images/qrcode.jpg\" alt=\"微信公众号\"></p>\n2.邮箱：\nyan1079@126.com","updated":"2016-12-12T13:42:56.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciwm7fobl0003zn3mqqxpccpu","content":"<p></p><p>计算机系毕业</p><p></p>\n<p></p><p>热爱运动，个子没有一米八，但喜欢打篮球，运动细胞不那么活跃，却还是热衷羽毛球</p><p></p>\n<p></p><p>写过web程序，用过.net</p><p></p>\n<p></p><p>写过客户端程序，发布过App，用的是Objective-C</p><p></p>\n<p></p><p>想有一天，有那么一两个App，大家每天都能点击几下</p><p></p>\n<p></p><p>想有一天，在iOS开发界有点小名气</p><p></p>\n<p></p><p>博客换了搬了很多次家，希望这里是终点</p><p></p>\n<p></p><p>从此在此积累iOS相关经验，分享iOS相关技术</p><p></p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p>1.微信公众号：</p>\n<p></p><p><img src=\"/images/qrcode.jpg\" alt=\"微信公众号\"></p><br>2.邮箱：<br>yan1079@126.com<p></p>\n","excerpt":"","more":"<p><p>计算机系毕业</p></p>\n<p><p>热爱运动，个子没有一米八，但喜欢打篮球，运动细胞不那么活跃，却还是热衷羽毛球</p></p>\n<p><p>写过web程序，用过.net</p></p>\n<p><p>写过客户端程序，发布过App，用的是Objective-C</p></p>\n<p><p>想有一天，有那么一两个App，大家每天都能点击几下</p></p>\n<p><p>想有一天，在iOS开发界有点小名气</p></p>\n<p><p>博客换了搬了很多次家，希望这里是终点</p></p>\n<p><p>从此在此积累iOS相关经验，分享iOS相关技术</p></p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p>1.微信公众号：</p>\n<p><p><img src=\"/images/qrcode.jpg\" alt=\"微信公众号\"></p><br>2.邮箱：<br>yan1079@126.com</p>\n"}],"Post":[{"date":"2016-07-08T03:15:00.000Z","status":"public","title":"MVVM模式的学习","_content":"\n## 一 前言\n这里就不多说为什么要学习MVVM模式了，新东西当然需要有一颗进步的心态去接纳它，不管他是否真的能在实际开发中帮到你，我想至少会在某种场景中用到。好吧，我们先来理解一下什么是MVVM模式吧。\n## MVVM的理解\nMVVM这种模式其实是来自[微软](https://msdn.microsoft.com/en-us/library/hh848246.aspx)的，我们用一张视图来概括一下MVVM吧\n\n![](/images/mvvm.png)\n从这个图可以看出，view和View Controller都归纳为View，即V，视图相关的业务逻辑以后就写到这里了，中间的ViewModel用来写MVC中Controller的一部分逻辑，比如网络请求的业务逻辑，视图展示数据的业务逻辑等等，这样以前的Controller的业务逻辑代码岂不是变少了很多，在实际使用当中，Controller的代码也变得非常清晰，因为你只会关注业务逻辑，而不会去关注这些数据怎么来的，怎么组装的等等这些细节了。Model还是以前MVC中的model没有什么变化，然而这三个层级的关系又是如何的呢？View只引用ViewModel，View通过Action来改变ViewModel，ViewMode的业务来更新View，注意ViewModel不要去引用View，ViewModel只是写了一些组装数据的业务逻辑而已，把控好各个层级的关系可以把你的项目写的很清晰。ViewMode中引用Model，ViewModel的网络请求，数据组装等等业务逻辑的结果都保存到了Model中，Model一旦有更新会通知ViewModel，一旦View有需求更新或ViewModel变更需要通知View，这个时候就可以去更新View了。如果理解的简单点，应该就是一个双向绑定的关系，View跟ViewModel绑定，一旦ViewModel有变更，View更新；ViewModel更Model绑定，一旦Model有变更，则会通知ViewModel，继而会更新View。\n## MVVM与MVC的对比\nMVVM较MVC的好处个人觉得最重要的应该是将臃肿的Controller解放了，有一大部分业务逻辑分解到了ViewModel中来了；其次应该就是做单元测试比较方便。因为很多业务逻辑已经抽象出成单独的方法，很容易做单元测试。当然个人也有一些用MVVM比较麻烦的地方，在一些较简单的Controller中，写MVVM模式，确实又有点累赘，增加了一些代码量。但总体来说，MVVM确实把代码的复杂度降下来了。\n## 推荐\n说到最后，有一个推荐的框架比较适合MVVM，也是最近在学习的一个框架[ReactiveCocoa](http://roger.farbox.com/post/reactivecocoaxue-xi)\n## 最后\n写了这些都是自己的个人理解，还并未去实际，若有理解出入，还望谅解。","source":"_posts/MVVM模式的学习.md","raw":"---\ndate: 2016-07-08 11:15\nstatus: public\ntitle: MVVM模式的学习\ncategory: 设计模式\n---\n\n## 一 前言\n这里就不多说为什么要学习MVVM模式了，新东西当然需要有一颗进步的心态去接纳它，不管他是否真的能在实际开发中帮到你，我想至少会在某种场景中用到。好吧，我们先来理解一下什么是MVVM模式吧。\n## MVVM的理解\nMVVM这种模式其实是来自[微软](https://msdn.microsoft.com/en-us/library/hh848246.aspx)的，我们用一张视图来概括一下MVVM吧\n\n![](/images/mvvm.png)\n从这个图可以看出，view和View Controller都归纳为View，即V，视图相关的业务逻辑以后就写到这里了，中间的ViewModel用来写MVC中Controller的一部分逻辑，比如网络请求的业务逻辑，视图展示数据的业务逻辑等等，这样以前的Controller的业务逻辑代码岂不是变少了很多，在实际使用当中，Controller的代码也变得非常清晰，因为你只会关注业务逻辑，而不会去关注这些数据怎么来的，怎么组装的等等这些细节了。Model还是以前MVC中的model没有什么变化，然而这三个层级的关系又是如何的呢？View只引用ViewModel，View通过Action来改变ViewModel，ViewMode的业务来更新View，注意ViewModel不要去引用View，ViewModel只是写了一些组装数据的业务逻辑而已，把控好各个层级的关系可以把你的项目写的很清晰。ViewMode中引用Model，ViewModel的网络请求，数据组装等等业务逻辑的结果都保存到了Model中，Model一旦有更新会通知ViewModel，一旦View有需求更新或ViewModel变更需要通知View，这个时候就可以去更新View了。如果理解的简单点，应该就是一个双向绑定的关系，View跟ViewModel绑定，一旦ViewModel有变更，View更新；ViewModel更Model绑定，一旦Model有变更，则会通知ViewModel，继而会更新View。\n## MVVM与MVC的对比\nMVVM较MVC的好处个人觉得最重要的应该是将臃肿的Controller解放了，有一大部分业务逻辑分解到了ViewModel中来了；其次应该就是做单元测试比较方便。因为很多业务逻辑已经抽象出成单独的方法，很容易做单元测试。当然个人也有一些用MVVM比较麻烦的地方，在一些较简单的Controller中，写MVVM模式，确实又有点累赘，增加了一些代码量。但总体来说，MVVM确实把代码的复杂度降下来了。\n## 推荐\n说到最后，有一个推荐的框架比较适合MVVM，也是最近在学习的一个框架[ReactiveCocoa](http://roger.farbox.com/post/reactivecocoaxue-xi)\n## 最后\n写了这些都是自己的个人理解，还并未去实际，若有理解出入，还望谅解。","slug":"MVVM模式的学习","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7fobf0002zn3m5854fvsj","content":"<h2 id=\"一-前言\"><a href=\"#一-前言\" class=\"headerlink\" title=\"一 前言\"></a>一 前言</h2><p>这里就不多说为什么要学习MVVM模式了，新东西当然需要有一颗进步的心态去接纳它，不管他是否真的能在实际开发中帮到你，我想至少会在某种场景中用到。好吧，我们先来理解一下什么是MVVM模式吧。</p>\n<h2 id=\"MVVM的理解\"><a href=\"#MVVM的理解\" class=\"headerlink\" title=\"MVVM的理解\"></a>MVVM的理解</h2><p>MVVM这种模式其实是来自<a href=\"https://msdn.microsoft.com/en-us/library/hh848246.aspx\" target=\"_blank\" rel=\"external\">微软</a>的，我们用一张视图来概括一下MVVM吧</p>\n<p><img src=\"/images/mvvm.png\" alt=\"\"><br>从这个图可以看出，view和View Controller都归纳为View，即V，视图相关的业务逻辑以后就写到这里了，中间的ViewModel用来写MVC中Controller的一部分逻辑，比如网络请求的业务逻辑，视图展示数据的业务逻辑等等，这样以前的Controller的业务逻辑代码岂不是变少了很多，在实际使用当中，Controller的代码也变得非常清晰，因为你只会关注业务逻辑，而不会去关注这些数据怎么来的，怎么组装的等等这些细节了。Model还是以前MVC中的model没有什么变化，然而这三个层级的关系又是如何的呢？View只引用ViewModel，View通过Action来改变ViewModel，ViewMode的业务来更新View，注意ViewModel不要去引用View，ViewModel只是写了一些组装数据的业务逻辑而已，把控好各个层级的关系可以把你的项目写的很清晰。ViewMode中引用Model，ViewModel的网络请求，数据组装等等业务逻辑的结果都保存到了Model中，Model一旦有更新会通知ViewModel，一旦View有需求更新或ViewModel变更需要通知View，这个时候就可以去更新View了。如果理解的简单点，应该就是一个双向绑定的关系，View跟ViewModel绑定，一旦ViewModel有变更，View更新；ViewModel更Model绑定，一旦Model有变更，则会通知ViewModel，继而会更新View。</p>\n<h2 id=\"MVVM与MVC的对比\"><a href=\"#MVVM与MVC的对比\" class=\"headerlink\" title=\"MVVM与MVC的对比\"></a>MVVM与MVC的对比</h2><p>MVVM较MVC的好处个人觉得最重要的应该是将臃肿的Controller解放了，有一大部分业务逻辑分解到了ViewModel中来了；其次应该就是做单元测试比较方便。因为很多业务逻辑已经抽象出成单独的方法，很容易做单元测试。当然个人也有一些用MVVM比较麻烦的地方，在一些较简单的Controller中，写MVVM模式，确实又有点累赘，增加了一些代码量。但总体来说，MVVM确实把代码的复杂度降下来了。</p>\n<h2 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h2><p>说到最后，有一个推荐的框架比较适合MVVM，也是最近在学习的一个框架<a href=\"http://roger.farbox.com/post/reactivecocoaxue-xi\" target=\"_blank\" rel=\"external\">ReactiveCocoa</a></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>写了这些都是自己的个人理解，还并未去实际，若有理解出入，还望谅解。</p>\n","excerpt":"","more":"<h2 id=\"一-前言\"><a href=\"#一-前言\" class=\"headerlink\" title=\"一 前言\"></a>一 前言</h2><p>这里就不多说为什么要学习MVVM模式了，新东西当然需要有一颗进步的心态去接纳它，不管他是否真的能在实际开发中帮到你，我想至少会在某种场景中用到。好吧，我们先来理解一下什么是MVVM模式吧。</p>\n<h2 id=\"MVVM的理解\"><a href=\"#MVVM的理解\" class=\"headerlink\" title=\"MVVM的理解\"></a>MVVM的理解</h2><p>MVVM这种模式其实是来自<a href=\"https://msdn.microsoft.com/en-us/library/hh848246.aspx\">微软</a>的，我们用一张视图来概括一下MVVM吧</p>\n<p><img src=\"/images/mvvm.png\" alt=\"\"><br>从这个图可以看出，view和View Controller都归纳为View，即V，视图相关的业务逻辑以后就写到这里了，中间的ViewModel用来写MVC中Controller的一部分逻辑，比如网络请求的业务逻辑，视图展示数据的业务逻辑等等，这样以前的Controller的业务逻辑代码岂不是变少了很多，在实际使用当中，Controller的代码也变得非常清晰，因为你只会关注业务逻辑，而不会去关注这些数据怎么来的，怎么组装的等等这些细节了。Model还是以前MVC中的model没有什么变化，然而这三个层级的关系又是如何的呢？View只引用ViewModel，View通过Action来改变ViewModel，ViewMode的业务来更新View，注意ViewModel不要去引用View，ViewModel只是写了一些组装数据的业务逻辑而已，把控好各个层级的关系可以把你的项目写的很清晰。ViewMode中引用Model，ViewModel的网络请求，数据组装等等业务逻辑的结果都保存到了Model中，Model一旦有更新会通知ViewModel，一旦View有需求更新或ViewModel变更需要通知View，这个时候就可以去更新View了。如果理解的简单点，应该就是一个双向绑定的关系，View跟ViewModel绑定，一旦ViewModel有变更，View更新；ViewModel更Model绑定，一旦Model有变更，则会通知ViewModel，继而会更新View。</p>\n<h2 id=\"MVVM与MVC的对比\"><a href=\"#MVVM与MVC的对比\" class=\"headerlink\" title=\"MVVM与MVC的对比\"></a>MVVM与MVC的对比</h2><p>MVVM较MVC的好处个人觉得最重要的应该是将臃肿的Controller解放了，有一大部分业务逻辑分解到了ViewModel中来了；其次应该就是做单元测试比较方便。因为很多业务逻辑已经抽象出成单独的方法，很容易做单元测试。当然个人也有一些用MVVM比较麻烦的地方，在一些较简单的Controller中，写MVVM模式，确实又有点累赘，增加了一些代码量。但总体来说，MVVM确实把代码的复杂度降下来了。</p>\n<h2 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h2><p>说到最后，有一个推荐的框架比较适合MVVM，也是最近在学习的一个框架<a href=\"http://roger.farbox.com/post/reactivecocoaxue-xi\">ReactiveCocoa</a></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>写了这些都是自己的个人理解，还并未去实际，若有理解出入，还望谅解。</p>\n"},{"date":"2016-07-07T09:16:00.000Z","status":"public","title":"Mac上的小技巧","_content":"### 1.制作SSH秘钥\n打开终端，$ ssh-keygen 一路enter下。\n生成  在当前用户名下 会有一个.sh文件。\n查看 .ssh\n$ ls -a ~/.ssh  通过搜索目录\nid_rsa\nid_rsa.pub\n打开  id_rsa.pub文件 里面就有需要的ssh key。\n或者使用文本编辑工具打开该文件，命令是：`vim ~/.ssh/id_rsa.pub`\n\n### 2.显示或隐藏mac下的隐藏文件\n1. 显示Mac隐藏文件的命令：`defaults write com.apple.finder AppleShowAllFiles  YES`\n2. 隐藏Mac隐藏文件的命令：`defaults write com.apple.finder AppleShowAllFiles  NO`\n3. 设置完后，不会立马起效，需要重新启动Finder.可以通过命令:`killall Finder` 。\n\t\n### 3.vim命令退出方式\n \":x\"和\":wq\"的真正区别，如下：\n        :wq   强制性写入文件并退出。即使文件没有被修改也强制写入，并更新文件的修改时间。\n        :x    写入文件并退出。仅当文件被修改时才写入，并更新文件修改时间，否则不会更新文件修改时间。\n\n### 3.git常用命令\n1. git clone 'https://github.com/lyroger/lyroger.github.io.git'  #这个会让你输入账号和密码\n2. git clone 'git@github.com:lyroger/lyroger.github.io.git' #这个需要你提供sshkey\n3. git add . #将所有变动添加到仓库\n4. git commit -a '提交备注' #将所有添加到仓库的变动提交到仓库  如果提交失败：‘fatal: Paths with -a does not make sense.’可以使用\"git commit -am '提交备注'\".\n5. git pull #拉取最新文件\n5. git push origin master #推送到远程仓库","source":"_posts/Mac上的小技巧.md","raw":"---\ndate: 2016-07-07 17:16\nstatus: public\ntitle: Mac上的小技巧\ncategory: 工具\n---\n### 1.制作SSH秘钥\n打开终端，$ ssh-keygen 一路enter下。\n生成  在当前用户名下 会有一个.sh文件。\n查看 .ssh\n$ ls -a ~/.ssh  通过搜索目录\nid_rsa\nid_rsa.pub\n打开  id_rsa.pub文件 里面就有需要的ssh key。\n或者使用文本编辑工具打开该文件，命令是：`vim ~/.ssh/id_rsa.pub`\n\n### 2.显示或隐藏mac下的隐藏文件\n1. 显示Mac隐藏文件的命令：`defaults write com.apple.finder AppleShowAllFiles  YES`\n2. 隐藏Mac隐藏文件的命令：`defaults write com.apple.finder AppleShowAllFiles  NO`\n3. 设置完后，不会立马起效，需要重新启动Finder.可以通过命令:`killall Finder` 。\n\t\n### 3.vim命令退出方式\n \":x\"和\":wq\"的真正区别，如下：\n        :wq   强制性写入文件并退出。即使文件没有被修改也强制写入，并更新文件的修改时间。\n        :x    写入文件并退出。仅当文件被修改时才写入，并更新文件修改时间，否则不会更新文件修改时间。\n\n### 3.git常用命令\n1. git clone 'https://github.com/lyroger/lyroger.github.io.git'  #这个会让你输入账号和密码\n2. git clone 'git@github.com:lyroger/lyroger.github.io.git' #这个需要你提供sshkey\n3. git add . #将所有变动添加到仓库\n4. git commit -a '提交备注' #将所有添加到仓库的变动提交到仓库  如果提交失败：‘fatal: Paths with -a does not make sense.’可以使用\"git commit -am '提交备注'\".\n5. git pull #拉取最新文件\n5. git push origin master #推送到远程仓库","slug":"Mac上的小技巧","published":1,"updated":"2018-01-26T06:18:13.000Z","_id":"ciwm7fobm0004zn3m0fwiacsu","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-制作SSH秘钥\"><a href=\"#1-制作SSH秘钥\" class=\"headerlink\" title=\"1.制作SSH秘钥\"></a>1.制作SSH秘钥</h3><p>打开终端，$ ssh-keygen 一路enter下。<br>生成  在当前用户名下 会有一个.sh文件。<br>查看 .ssh<br>$ ls -a ~/.ssh  通过搜索目录<br>id_rsa<br>id_rsa.pub<br>打开  id_rsa.pub文件 里面就有需要的ssh key。<br>或者使用文本编辑工具打开该文件，命令是：<code>vim ~/.ssh/id_rsa.pub</code></p>\n<h3 id=\"2-显示或隐藏mac下的隐藏文件\"><a href=\"#2-显示或隐藏mac下的隐藏文件\" class=\"headerlink\" title=\"2.显示或隐藏mac下的隐藏文件\"></a>2.显示或隐藏mac下的隐藏文件</h3><ol>\n<li>显示Mac隐藏文件的命令：<code>defaults write com.apple.finder AppleShowAllFiles  YES</code></li>\n<li>隐藏Mac隐藏文件的命令：<code>defaults write com.apple.finder AppleShowAllFiles  NO</code></li>\n<li>设置完后，不会立马起效，需要重新启动Finder.可以通过命令:<code>killall Finder</code> 。</li>\n</ol>\n<h3 id=\"3-vim命令退出方式\"><a href=\"#3-vim命令退出方式\" class=\"headerlink\" title=\"3.vim命令退出方式\"></a>3.vim命令退出方式</h3><p> “:x”和”:wq”的真正区别，如下：<br>        :wq   强制性写入文件并退出。即使文件没有被修改也强制写入，并更新文件的修改时间。<br>        :x    写入文件并退出。仅当文件被修改时才写入，并更新文件修改时间，否则不会更新文件修改时间。</p>\n<h3 id=\"3-git常用命令\"><a href=\"#3-git常用命令\" class=\"headerlink\" title=\"3.git常用命令\"></a>3.git常用命令</h3><ol>\n<li>git clone ‘<a href=\"https://github.com/lyroger/lyroger.github.io.git\" target=\"_blank\" rel=\"external\">https://github.com/lyroger/lyroger.github.io.git</a>‘  #这个会让你输入账号和密码</li>\n<li>git clone ‘git@github.com:lyroger/lyroger.github.io.git’ #这个需要你提供sshkey</li>\n<li>git add . #将所有变动添加到仓库</li>\n<li>git commit -a ‘提交备注’ #将所有添加到仓库的变动提交到仓库  如果提交失败：‘fatal: Paths with -a does not make sense.’可以使用”git commit -am ‘提交备注’”.</li>\n<li>git pull #拉取最新文件</li>\n<li>git push origin master #推送到远程仓库</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"1-制作SSH秘钥\"><a href=\"#1-制作SSH秘钥\" class=\"headerlink\" title=\"1.制作SSH秘钥\"></a>1.制作SSH秘钥</h3><p>打开终端，$ ssh-keygen 一路enter下。<br>生成  在当前用户名下 会有一个.sh文件。<br>查看 .ssh<br>$ ls -a ~/.ssh  通过搜索目录<br>id_rsa<br>id_rsa.pub<br>打开  id_rsa.pub文件 里面就有需要的ssh key。<br>或者使用文本编辑工具打开该文件，命令是：<code>vim ~/.ssh/id_rsa.pub</code></p>\n<h3 id=\"2-显示或隐藏mac下的隐藏文件\"><a href=\"#2-显示或隐藏mac下的隐藏文件\" class=\"headerlink\" title=\"2.显示或隐藏mac下的隐藏文件\"></a>2.显示或隐藏mac下的隐藏文件</h3><ol>\n<li>显示Mac隐藏文件的命令：<code>defaults write com.apple.finder AppleShowAllFiles  YES</code></li>\n<li>隐藏Mac隐藏文件的命令：<code>defaults write com.apple.finder AppleShowAllFiles  NO</code></li>\n<li>设置完后，不会立马起效，需要重新启动Finder.可以通过命令:<code>killall Finder</code> 。</li>\n</ol>\n<h3 id=\"3-vim命令退出方式\"><a href=\"#3-vim命令退出方式\" class=\"headerlink\" title=\"3.vim命令退出方式\"></a>3.vim命令退出方式</h3><p> “:x”和”:wq”的真正区别，如下：<br>        :wq   强制性写入文件并退出。即使文件没有被修改也强制写入，并更新文件的修改时间。<br>        :x    写入文件并退出。仅当文件被修改时才写入，并更新文件修改时间，否则不会更新文件修改时间。</p>\n<h3 id=\"3-git常用命令\"><a href=\"#3-git常用命令\" class=\"headerlink\" title=\"3.git常用命令\"></a>3.git常用命令</h3><ol>\n<li>git clone ‘<a href=\"https://github.com/lyroger/lyroger.github.io.git\">https://github.com/lyroger/lyroger.github.io.git</a>‘  #这个会让你输入账号和密码</li>\n<li>git clone ‘git@github.com:lyroger/lyroger.github.io.git’ #这个需要你提供sshkey</li>\n<li>git add . #将所有变动添加到仓库</li>\n<li>git commit -a ‘提交备注’ #将所有添加到仓库的变动提交到仓库  如果提交失败：‘fatal: Paths with -a does not make sense.’可以使用”git commit -am ‘提交备注’”.</li>\n<li>git pull #拉取最新文件</li>\n<li>git push origin master #推送到远程仓库</li>\n</ol>\n"},{"date":"2016-11-29T02:02:51.000Z","status":"public","title":"JS与OC交互","_content":"### 前言\n  平时开发中，很多页面并非全由原生代码来编写，需求求快，求可扩展性，往往希望页面能够很轻松替换或更改，所以有些页面在不追求体验之下由web来展示是一个比较好的方案。web页面在app端展示其实也有两种方案，一种是把web页面放在服务器端，一种是把web页面等资源一起打包放在App端，这两种方案的各自好处就不在这里详解，第二种方案在我的[使用Cordova搭建混合框架](http://blog.devyan.cn/2016/09/23/使用Cordova搭建混合框架/)文章中有提到，H5与原生代码直接的交互都有详解。这篇文章主要讲讲H5跟原生代码之间的交互。\n  \n### 原生代码调用H5\n  这个方案估计很多人都熟悉，也调用的比较频繁。比如现在在我们最近的一个项目中，我们把一个Web页面封装成一个BaseWebController页面了，所有基于远程web页面来展示的页面都通过这个封装好了的BaseWebController页面展示，那么在这个封装好了的页面中我们做了些什么事情呢？想想平时我们在这些web页面中都会做些什么，右上角更多按钮，右上角分享按钮，Web页面的title，下拉web页面时，能看到该页面由谁提供的，等等这些小功能，我们都可以在`- (void)webViewDidFinishLoad:(UIWebView *)webView`方法执行后，通过`stringByEvaluatingJavaScriptFromString:`方法去获取该页面中的配置，这个配置信息其实也是于H5有个协议，我们与H5端先定好一个协议，比如`msg_can_share`字段值为true时，表示可以分享，那么就会接着配置分享相关信息字段，比如分享的title，分享的url，分享的描述等等信息，这些信息都可以直接通过`stringByEvaluatingJavaScriptFromString:`去获取。\n### H5调用原生代码\n  原生代码调用H5用一个方法就可以搞定，很简单，那么H5调用原生的又怎么来实现呢，又有什么场景呢？驱使我想用实现这种方案的动力来自一个问题，由于H5端查看文章详情时，footer下还有一个查看下一篇文章，点击查看下一篇文章时，需改变我们BaseWebController的title，问题来了，点击查看下一篇文章是，H5是由异步调用服务器数据，所以不会再次进入`- (void)webViewDidFinishLoad:(UIWebView *)webView`，因此我们无法通过`stringByEvaluatingJavaScriptFromString:`去拿到最新的title，我们也不知道数据时什么时候来的，这时候我们就只好通过H5来调用原生代码，当H5那边数据已更新后，再调用原生代码来更新title。相信还有更多如此的场景，那么如何来实现这种方案呢？在iOS7之后，我想，大家应该都了解了一些JavaScriptCore.framework的框架吧，对，我们就用这个来实现这个方案，我们看看下面几步，很简单：\n1. 首先我们定义一个代理：\n```objective-c\n@protocol JSObjcDelegate <JSExport>\n- (void)webViewJSAction:(NSString*)action :(NSString*)arg;\n@end\n```\n2. 然后在BaseWebController中定义一个`@property (nonatomic, strong) JSContext  *jsContext;`属性。\n3. 然后再在恰当的时候（建议写到`- (void)webViewDidFinishLoad:(UIWebView *)webView`中）去获取H5的上下文，~~将刚刚写好的代理赋值给到H5。~~ 将[self class]赋值给到H5的上下文。\n```objective-c\n  _jsContext = [webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\n\t//_jsContext[@\"WebViewObject\"] = self;   //会导致Controller释放不了。\n\t_jsContext[@\"WebViewObject\"] = [self class];\n\t_jsContext.exceptionHandler = ^(JSContext *context, JSValue *exceptionValue) {\n   \tcontext.exception = exceptionValue;\n   \tNSLog(@\"异常信息：%@\", exceptionValue);\n\t}; \n```\n\n\n4. 最后在BaseWebController中实现代理就ok了。\n```objective-c\n//改成类方法\n//- (void)webViewJSAction:(NSString*)action :(NSString*)arg\n+ (void)webViewJSAction:(NSString*)action :(NSString*)arg\n{\n    /*\n    if ([action isEqualToString:@\"UpdateWebViewTitle\"]) {\n        self.title = arg;\n    }\n    */\n    \n    //需在主线程上实现\n    dispatch_async(dispatch_get_main_queue(), ^{\n        //获取当前的BaseWebController类。\n        BaseWebController *webVC = (BaseWebController*)GetAPPDelegate.window.aCurrentViewController;\n        if ([action isEqualToString:@\"UpdateWebViewTitle\"]) {\n            webVC.title = arg;\n        } else if ([action isEqualToString:@\"CloseActoin\"]) {\n            [webVC.navigationController popViewControllerAnimated:YES];\n        }\n    });\n}\n```\n写到这里，我们都是站在原生代码的角度去考虑，实现。那么H5端需要什么做呢？很简单，只需要通过`window.WebViewObject.webViewJSAction('UpdateWebViewTitle','title')`就可以将需要的值传过来。调用原生的方法。","source":"_posts/JS与OC交互.md","raw":"---\ndate: 2016-11-29 10:02:51\nstatus: public\ntitle: JS与OC交互\ncategory: 基础篇\n---\n### 前言\n  平时开发中，很多页面并非全由原生代码来编写，需求求快，求可扩展性，往往希望页面能够很轻松替换或更改，所以有些页面在不追求体验之下由web来展示是一个比较好的方案。web页面在app端展示其实也有两种方案，一种是把web页面放在服务器端，一种是把web页面等资源一起打包放在App端，这两种方案的各自好处就不在这里详解，第二种方案在我的[使用Cordova搭建混合框架](http://blog.devyan.cn/2016/09/23/使用Cordova搭建混合框架/)文章中有提到，H5与原生代码直接的交互都有详解。这篇文章主要讲讲H5跟原生代码之间的交互。\n  \n### 原生代码调用H5\n  这个方案估计很多人都熟悉，也调用的比较频繁。比如现在在我们最近的一个项目中，我们把一个Web页面封装成一个BaseWebController页面了，所有基于远程web页面来展示的页面都通过这个封装好了的BaseWebController页面展示，那么在这个封装好了的页面中我们做了些什么事情呢？想想平时我们在这些web页面中都会做些什么，右上角更多按钮，右上角分享按钮，Web页面的title，下拉web页面时，能看到该页面由谁提供的，等等这些小功能，我们都可以在`- (void)webViewDidFinishLoad:(UIWebView *)webView`方法执行后，通过`stringByEvaluatingJavaScriptFromString:`方法去获取该页面中的配置，这个配置信息其实也是于H5有个协议，我们与H5端先定好一个协议，比如`msg_can_share`字段值为true时，表示可以分享，那么就会接着配置分享相关信息字段，比如分享的title，分享的url，分享的描述等等信息，这些信息都可以直接通过`stringByEvaluatingJavaScriptFromString:`去获取。\n### H5调用原生代码\n  原生代码调用H5用一个方法就可以搞定，很简单，那么H5调用原生的又怎么来实现呢，又有什么场景呢？驱使我想用实现这种方案的动力来自一个问题，由于H5端查看文章详情时，footer下还有一个查看下一篇文章，点击查看下一篇文章时，需改变我们BaseWebController的title，问题来了，点击查看下一篇文章是，H5是由异步调用服务器数据，所以不会再次进入`- (void)webViewDidFinishLoad:(UIWebView *)webView`，因此我们无法通过`stringByEvaluatingJavaScriptFromString:`去拿到最新的title，我们也不知道数据时什么时候来的，这时候我们就只好通过H5来调用原生代码，当H5那边数据已更新后，再调用原生代码来更新title。相信还有更多如此的场景，那么如何来实现这种方案呢？在iOS7之后，我想，大家应该都了解了一些JavaScriptCore.framework的框架吧，对，我们就用这个来实现这个方案，我们看看下面几步，很简单：\n1. 首先我们定义一个代理：\n```objective-c\n@protocol JSObjcDelegate <JSExport>\n- (void)webViewJSAction:(NSString*)action :(NSString*)arg;\n@end\n```\n2. 然后在BaseWebController中定义一个`@property (nonatomic, strong) JSContext  *jsContext;`属性。\n3. 然后再在恰当的时候（建议写到`- (void)webViewDidFinishLoad:(UIWebView *)webView`中）去获取H5的上下文，~~将刚刚写好的代理赋值给到H5。~~ 将[self class]赋值给到H5的上下文。\n```objective-c\n  _jsContext = [webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"];\n\t//_jsContext[@\"WebViewObject\"] = self;   //会导致Controller释放不了。\n\t_jsContext[@\"WebViewObject\"] = [self class];\n\t_jsContext.exceptionHandler = ^(JSContext *context, JSValue *exceptionValue) {\n   \tcontext.exception = exceptionValue;\n   \tNSLog(@\"异常信息：%@\", exceptionValue);\n\t}; \n```\n\n\n4. 最后在BaseWebController中实现代理就ok了。\n```objective-c\n//改成类方法\n//- (void)webViewJSAction:(NSString*)action :(NSString*)arg\n+ (void)webViewJSAction:(NSString*)action :(NSString*)arg\n{\n    /*\n    if ([action isEqualToString:@\"UpdateWebViewTitle\"]) {\n        self.title = arg;\n    }\n    */\n    \n    //需在主线程上实现\n    dispatch_async(dispatch_get_main_queue(), ^{\n        //获取当前的BaseWebController类。\n        BaseWebController *webVC = (BaseWebController*)GetAPPDelegate.window.aCurrentViewController;\n        if ([action isEqualToString:@\"UpdateWebViewTitle\"]) {\n            webVC.title = arg;\n        } else if ([action isEqualToString:@\"CloseActoin\"]) {\n            [webVC.navigationController popViewControllerAnimated:YES];\n        }\n    });\n}\n```\n写到这里，我们都是站在原生代码的角度去考虑，实现。那么H5端需要什么做呢？很简单，只需要通过`window.WebViewObject.webViewJSAction('UpdateWebViewTitle','title')`就可以将需要的值传过来。调用原生的方法。","slug":"JS与OC交互","published":1,"updated":"2018-01-26T06:18:13.000Z","_id":"ciwm7fobq0006zn3mwbh1ehbc","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>  平时开发中，很多页面并非全由原生代码来编写，需求求快，求可扩展性，往往希望页面能够很轻松替换或更改，所以有些页面在不追求体验之下由web来展示是一个比较好的方案。web页面在app端展示其实也有两种方案，一种是把web页面放在服务器端，一种是把web页面等资源一起打包放在App端，这两种方案的各自好处就不在这里详解，第二种方案在我的<a href=\"http://blog.devyan.cn/2016/09/23/使用Cordova搭建混合框架/\" target=\"_blank\" rel=\"external\">使用Cordova搭建混合框架</a>文章中有提到，H5与原生代码直接的交互都有详解。这篇文章主要讲讲H5跟原生代码之间的交互。</p>\n<h3 id=\"原生代码调用H5\"><a href=\"#原生代码调用H5\" class=\"headerlink\" title=\"原生代码调用H5\"></a>原生代码调用H5</h3><p>  这个方案估计很多人都熟悉，也调用的比较频繁。比如现在在我们最近的一个项目中，我们把一个Web页面封装成一个BaseWebController页面了，所有基于远程web页面来展示的页面都通过这个封装好了的BaseWebController页面展示，那么在这个封装好了的页面中我们做了些什么事情呢？想想平时我们在这些web页面中都会做些什么，右上角更多按钮，右上角分享按钮，Web页面的title，下拉web页面时，能看到该页面由谁提供的，等等这些小功能，我们都可以在<code>- (void)webViewDidFinishLoad:(UIWebView *)webView</code>方法执行后，通过<code>stringByEvaluatingJavaScriptFromString:</code>方法去获取该页面中的配置，这个配置信息其实也是于H5有个协议，我们与H5端先定好一个协议，比如<code>msg_can_share</code>字段值为true时，表示可以分享，那么就会接着配置分享相关信息字段，比如分享的title，分享的url，分享的描述等等信息，这些信息都可以直接通过<code>stringByEvaluatingJavaScriptFromString:</code>去获取。</p>\n<h3 id=\"H5调用原生代码\"><a href=\"#H5调用原生代码\" class=\"headerlink\" title=\"H5调用原生代码\"></a>H5调用原生代码</h3><p>  原生代码调用H5用一个方法就可以搞定，很简单，那么H5调用原生的又怎么来实现呢，又有什么场景呢？驱使我想用实现这种方案的动力来自一个问题，由于H5端查看文章详情时，footer下还有一个查看下一篇文章，点击查看下一篇文章时，需改变我们BaseWebController的title，问题来了，点击查看下一篇文章是，H5是由异步调用服务器数据，所以不会再次进入<code>- (void)webViewDidFinishLoad:(UIWebView *)webView</code>，因此我们无法通过<code>stringByEvaluatingJavaScriptFromString:</code>去拿到最新的title，我们也不知道数据时什么时候来的，这时候我们就只好通过H5来调用原生代码，当H5那边数据已更新后，再调用原生代码来更新title。相信还有更多如此的场景，那么如何来实现这种方案呢？在iOS7之后，我想，大家应该都了解了一些JavaScriptCore.framework的框架吧，对，我们就用这个来实现这个方案，我们看看下面几步，很简单：</p>\n<ol>\n<li><p>首先我们定义一个代理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@protocol JSObjcDelegate &lt;JSExport&gt;</div><div class=\"line\">- (void)webViewJSAction:(NSString*)action :(NSString*)arg;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后在BaseWebController中定义一个<code>@property (nonatomic, strong) JSContext  *jsContext;</code>属性。</p>\n</li>\n<li><p>然后再在恰当的时候（建议写到<code>- (void)webViewDidFinishLoad:(UIWebView *)webView</code>中）去获取H5的上下文，<del>将刚刚写好的代理赋值给到H5。</del> 将[self class]赋值给到H5的上下文。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> _jsContext = [webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</div><div class=\"line\">//_jsContext[@&quot;WebViewObject&quot;] = self;   //会导致Controller释放不了。</div><div class=\"line\">_jsContext[@&quot;WebViewObject&quot;] = [self class];</div><div class=\"line\">_jsContext.exceptionHandler = ^(JSContext *context, JSValue *exceptionValue) &#123;</div><div class=\"line\">  \tcontext.exception = exceptionValue;</div><div class=\"line\">  \tNSLog(@&quot;异常信息：%@&quot;, exceptionValue);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>最后在BaseWebController中实现代理就ok了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">//改成类方法</div><div class=\"line\">//- (void)webViewJSAction:(NSString*)action :(NSString*)arg</div><div class=\"line\">+ (void)webViewJSAction:(NSString*)action :(NSString*)arg</div><div class=\"line\">&#123;</div><div class=\"line\">    /*</div><div class=\"line\">    if ([action isEqualToString:@&quot;UpdateWebViewTitle&quot;]) &#123;</div><div class=\"line\">        self.title = arg;</div><div class=\"line\">    &#125;</div><div class=\"line\">    */</div><div class=\"line\">    </div><div class=\"line\">    //需在主线程上实现</div><div class=\"line\">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        //获取当前的BaseWebController类。</div><div class=\"line\">        BaseWebController *webVC = (BaseWebController*)GetAPPDelegate.window.aCurrentViewController;</div><div class=\"line\">        if ([action isEqualToString:@&quot;UpdateWebViewTitle&quot;]) &#123;</div><div class=\"line\">            webVC.title = arg;</div><div class=\"line\">        &#125; else if ([action isEqualToString:@&quot;CloseActoin&quot;]) &#123;</div><div class=\"line\">            [webVC.navigationController popViewControllerAnimated:YES];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>写到这里，我们都是站在原生代码的角度去考虑，实现。那么H5端需要什么做呢？很简单，只需要通过<code>window.WebViewObject.webViewJSAction(&#39;UpdateWebViewTitle&#39;,&#39;title&#39;)</code>就可以将需要的值传过来。调用原生的方法。</p>\n","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>  平时开发中，很多页面并非全由原生代码来编写，需求求快，求可扩展性，往往希望页面能够很轻松替换或更改，所以有些页面在不追求体验之下由web来展示是一个比较好的方案。web页面在app端展示其实也有两种方案，一种是把web页面放在服务器端，一种是把web页面等资源一起打包放在App端，这两种方案的各自好处就不在这里详解，第二种方案在我的<a href=\"http://blog.devyan.cn/2016/09/23/使用Cordova搭建混合框架/\">使用Cordova搭建混合框架</a>文章中有提到，H5与原生代码直接的交互都有详解。这篇文章主要讲讲H5跟原生代码之间的交互。</p>\n<h3 id=\"原生代码调用H5\"><a href=\"#原生代码调用H5\" class=\"headerlink\" title=\"原生代码调用H5\"></a>原生代码调用H5</h3><p>  这个方案估计很多人都熟悉，也调用的比较频繁。比如现在在我们最近的一个项目中，我们把一个Web页面封装成一个BaseWebController页面了，所有基于远程web页面来展示的页面都通过这个封装好了的BaseWebController页面展示，那么在这个封装好了的页面中我们做了些什么事情呢？想想平时我们在这些web页面中都会做些什么，右上角更多按钮，右上角分享按钮，Web页面的title，下拉web页面时，能看到该页面由谁提供的，等等这些小功能，我们都可以在<code>- (void)webViewDidFinishLoad:(UIWebView *)webView</code>方法执行后，通过<code>stringByEvaluatingJavaScriptFromString:</code>方法去获取该页面中的配置，这个配置信息其实也是于H5有个协议，我们与H5端先定好一个协议，比如<code>msg_can_share</code>字段值为true时，表示可以分享，那么就会接着配置分享相关信息字段，比如分享的title，分享的url，分享的描述等等信息，这些信息都可以直接通过<code>stringByEvaluatingJavaScriptFromString:</code>去获取。</p>\n<h3 id=\"H5调用原生代码\"><a href=\"#H5调用原生代码\" class=\"headerlink\" title=\"H5调用原生代码\"></a>H5调用原生代码</h3><p>  原生代码调用H5用一个方法就可以搞定，很简单，那么H5调用原生的又怎么来实现呢，又有什么场景呢？驱使我想用实现这种方案的动力来自一个问题，由于H5端查看文章详情时，footer下还有一个查看下一篇文章，点击查看下一篇文章时，需改变我们BaseWebController的title，问题来了，点击查看下一篇文章是，H5是由异步调用服务器数据，所以不会再次进入<code>- (void)webViewDidFinishLoad:(UIWebView *)webView</code>，因此我们无法通过<code>stringByEvaluatingJavaScriptFromString:</code>去拿到最新的title，我们也不知道数据时什么时候来的，这时候我们就只好通过H5来调用原生代码，当H5那边数据已更新后，再调用原生代码来更新title。相信还有更多如此的场景，那么如何来实现这种方案呢？在iOS7之后，我想，大家应该都了解了一些JavaScriptCore.framework的框架吧，对，我们就用这个来实现这个方案，我们看看下面几步，很简单：</p>\n<ol>\n<li><p>首先我们定义一个代理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@protocol JSObjcDelegate &lt;JSExport&gt;</div><div class=\"line\">- (void)webViewJSAction:(NSString*)action :(NSString*)arg;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后在BaseWebController中定义一个<code>@property (nonatomic, strong) JSContext  *jsContext;</code>属性。</p>\n</li>\n<li><p>然后再在恰当的时候（建议写到<code>- (void)webViewDidFinishLoad:(UIWebView *)webView</code>中）去获取H5的上下文，<del>将刚刚写好的代理赋值给到H5。</del> 将[self class]赋值给到H5的上下文。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> _jsContext = [webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</div><div class=\"line\">//_jsContext[@&quot;WebViewObject&quot;] = self;   //会导致Controller释放不了。</div><div class=\"line\">_jsContext[@&quot;WebViewObject&quot;] = [self class];</div><div class=\"line\">_jsContext.exceptionHandler = ^(JSContext *context, JSValue *exceptionValue) &#123;</div><div class=\"line\">  \tcontext.exception = exceptionValue;</div><div class=\"line\">  \tNSLog(@&quot;异常信息：%@&quot;, exceptionValue);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>最后在BaseWebController中实现代理就ok了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">//改成类方法</div><div class=\"line\">//- (void)webViewJSAction:(NSString*)action :(NSString*)arg</div><div class=\"line\">+ (void)webViewJSAction:(NSString*)action :(NSString*)arg</div><div class=\"line\">&#123;</div><div class=\"line\">    /*</div><div class=\"line\">    if ([action isEqualToString:@&quot;UpdateWebViewTitle&quot;]) &#123;</div><div class=\"line\">        self.title = arg;</div><div class=\"line\">    &#125;</div><div class=\"line\">    */</div><div class=\"line\">    </div><div class=\"line\">    //需在主线程上实现</div><div class=\"line\">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        //获取当前的BaseWebController类。</div><div class=\"line\">        BaseWebController *webVC = (BaseWebController*)GetAPPDelegate.window.aCurrentViewController;</div><div class=\"line\">        if ([action isEqualToString:@&quot;UpdateWebViewTitle&quot;]) &#123;</div><div class=\"line\">            webVC.title = arg;</div><div class=\"line\">        &#125; else if ([action isEqualToString:@&quot;CloseActoin&quot;]) &#123;</div><div class=\"line\">            [webVC.navigationController popViewControllerAnimated:YES];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>写到这里，我们都是站在原生代码的角度去考虑，实现。那么H5端需要什么做呢？很简单，只需要通过<code>window.WebViewObject.webViewJSAction(&#39;UpdateWebViewTitle&#39;,&#39;title&#39;)</code>就可以将需要的值传过来。调用原生的方法。</p>\n"},{"date":"2016-08-25T09:52:00.000Z","status":"public","title":"Jenkins+Git自动构建","_content":"\n## 前言\n   想想以前，发给测试的测试包都是通过手动使用XCode来打包，如果项目工程比较大，Archive过程时间还是比较长的，打多了觉得特没劲，非常浪费时间，特别是使用了敏捷开发流程的，要是还用手动打包，估计你在打包上耗得时间都够你解决几个bug了。敏捷开发也是强调使用自动化的，所以也少不了自动构建的环节，那么接下来说说如何使用Jenkins+Git来自动构建我们的项目，从而方便测试，也让开发有更多的经历投入到编码和业务中而不是浪费在这些无用的流程中。\n## 一.Jenkins安装\n1.下载最新的版本（一个 WAR 文件）。[Jenkins官方网址](http://Jenkins-ci.org/)\n2.运行 Java -jar jenkins.war 。\n如果你的java环节低于java7 它会提示你升级java环节，你可以到[这里下载](https://www.java.com/en/download/)，安装最新的java环境。\n如果一切顺利，那么只要在你本机浏览器中输入[127.0.0.1:8080](http://127.0.0.1:8080)即可看到Jenkins的主页面。\n![](/images/jenins首页.png)\n## 二.Jenkins配置\n1.先新建一个项目。\n![](/images/创建项目.png)\n2.输入项目名称和构建风格。\n![](/images/创建项目1.png)\n3.项目配置\n\n![](/images/配置项目-项目名称.png)\n4.源码管理\n\n![](/images/项目配置-源码管理.png)\n这一步输入你项目在Git上的仓库地址，这里的授权有两种形式，一种是使用http登录，一种是使用ssh授权；\n*如果使用http授权的看下图：\n\n![](/images/项目配置-源码管理添加http授权.png)\n这里输入你git上的登录名和密码。\n*如果使用SSH授权看下图：\n\n![](/images/项目配置-源码管理SSH授权创建.png)\nkind要选择SSH Username with private key,Username可以随便输入，一个描述而已，Private Key选Enter directly，然后在Key中输入你在Git上的秘钥，这个秘钥的制作在我前面的[博客](http://roger.farbox.com/post/macshang-zhi-zuo-sshmi-yao)中有提到，这里就不多说了。最后点击Add，SSH的授权就制作OK了。\n5.构建\n源码可以下载了，那么接下来就是如何去生成一个ipa包了，我们通过构建的方式来实现，接下来我们来配置一下构建流程，构建的方式很多中，这里讲讲比较简单的一种，使用shell来实现。\n\n![](/images/构建1.png)\n\n![](/images/项目配置-构建配置.png)\n编写脚本，这个脚本支持的是workspace的，如果没有使用workspace的，问题不大，稍作修改即可。脚本：\n```\ncd $WORKSPACE\nSDK_VERSION=\"iphoneos8.3\"\n\nPROJECT_NAME=\"JenkinsDemo\"\nPROVISION_UUID=\"你的描述文件的UUID，可以通过在XCode选中描述文件ctr+c的方法获取到\"\nPROVISONING_PROFILE=\"JenkinsDemo_Distribution\"\n\nXCODE_PRJ=\"xcodeproj\"\nFILE_EXTENSION='xcworkspace'\nPROJECT_DIR=`pwd`\nCD_XCODE_PRJ=`pwd`/$PROJECT_NAME.$XCODE_PRJ\nPROJECT_WORKSPACE=$PROJECT_DIR.\nPROJECT_BUILD=`pwd`/$PROJECT_NAME/BUILD\n\nAPP_PATH=\"build/Release-iphoneos/${PROJECT_NAME}.app\"\nTARGET_APP_PATH=\"build/Release-iphoneos/${PROJECT_NAME}.ipa\"\nARCHIVEPATH=\"build/Release-iphoneos/${PROJECT_NAME}.xcarchive\"\n\ncd \"$PROJECT_DIR\"\n\ncd ..\ncd \"$CD_XCODE_PRJ\"\nsed -i '' \"s/\\(PROVISIONING_PROFILE.=.\\\"\\).*\\(\\\"\\)/\\1$PROVISION_UUID\\2/g\" project.pbxproj\ncd ..\nrm -rf build\nxcodebuild -workspace $PROJECT_DIR/$PROJECT_NAME.$FILE_EXTENSION -scheme $PROJECT_NAME -destination generic/platform=iOS archive -archivePath $ARCHIVEPATH\nxcodebuild -exportArchive -exportFormat IPA -archivePath $ARCHIVEPATH -exportPath $TARGET_APP_PATH -exportProvisioningProfile \"${PROVISONING_PROFILE}\"\ncurl -F \"file=@build/Release-iphoneos/JenkinsDemo.ipa\" -F \"uKey=蒲公英上的uKey\" -F \"_api_key=蒲公英上的apikey\" https://www.pgyer.com/apiv1/app/upload\n```\n*构建成功后这里可能会出现一个问题，你的项目工程中的配置需要设置一下shared，不然构建的会一直报错。找不到工程文件，如下图设置：\n\n![](/images/工程配置.png)\n*OK，保存构建后，接下来就可以回到项目管理页面了。\n\n![](/images/项目管理-立即构建.png)\n*一般构建在一分钟左右，先下载源代码，然后打包，最后将ipa包上传到蒲公英平台。\n*可以看出，构建后蓝色的表示构建成功，红色和灰色表示构建失败，可以点击相应的图标，查看构建日志。\n","source":"_posts/Jenkins+Git自动构建.md","raw":"---\ndate: 2016-08-25 17:52\nstatus: public\ntitle: Jenkins+Git自动构建\ncategory: 工具\n---\n\n## 前言\n   想想以前，发给测试的测试包都是通过手动使用XCode来打包，如果项目工程比较大，Archive过程时间还是比较长的，打多了觉得特没劲，非常浪费时间，特别是使用了敏捷开发流程的，要是还用手动打包，估计你在打包上耗得时间都够你解决几个bug了。敏捷开发也是强调使用自动化的，所以也少不了自动构建的环节，那么接下来说说如何使用Jenkins+Git来自动构建我们的项目，从而方便测试，也让开发有更多的经历投入到编码和业务中而不是浪费在这些无用的流程中。\n## 一.Jenkins安装\n1.下载最新的版本（一个 WAR 文件）。[Jenkins官方网址](http://Jenkins-ci.org/)\n2.运行 Java -jar jenkins.war 。\n如果你的java环节低于java7 它会提示你升级java环节，你可以到[这里下载](https://www.java.com/en/download/)，安装最新的java环境。\n如果一切顺利，那么只要在你本机浏览器中输入[127.0.0.1:8080](http://127.0.0.1:8080)即可看到Jenkins的主页面。\n![](/images/jenins首页.png)\n## 二.Jenkins配置\n1.先新建一个项目。\n![](/images/创建项目.png)\n2.输入项目名称和构建风格。\n![](/images/创建项目1.png)\n3.项目配置\n\n![](/images/配置项目-项目名称.png)\n4.源码管理\n\n![](/images/项目配置-源码管理.png)\n这一步输入你项目在Git上的仓库地址，这里的授权有两种形式，一种是使用http登录，一种是使用ssh授权；\n*如果使用http授权的看下图：\n\n![](/images/项目配置-源码管理添加http授权.png)\n这里输入你git上的登录名和密码。\n*如果使用SSH授权看下图：\n\n![](/images/项目配置-源码管理SSH授权创建.png)\nkind要选择SSH Username with private key,Username可以随便输入，一个描述而已，Private Key选Enter directly，然后在Key中输入你在Git上的秘钥，这个秘钥的制作在我前面的[博客](http://roger.farbox.com/post/macshang-zhi-zuo-sshmi-yao)中有提到，这里就不多说了。最后点击Add，SSH的授权就制作OK了。\n5.构建\n源码可以下载了，那么接下来就是如何去生成一个ipa包了，我们通过构建的方式来实现，接下来我们来配置一下构建流程，构建的方式很多中，这里讲讲比较简单的一种，使用shell来实现。\n\n![](/images/构建1.png)\n\n![](/images/项目配置-构建配置.png)\n编写脚本，这个脚本支持的是workspace的，如果没有使用workspace的，问题不大，稍作修改即可。脚本：\n```\ncd $WORKSPACE\nSDK_VERSION=\"iphoneos8.3\"\n\nPROJECT_NAME=\"JenkinsDemo\"\nPROVISION_UUID=\"你的描述文件的UUID，可以通过在XCode选中描述文件ctr+c的方法获取到\"\nPROVISONING_PROFILE=\"JenkinsDemo_Distribution\"\n\nXCODE_PRJ=\"xcodeproj\"\nFILE_EXTENSION='xcworkspace'\nPROJECT_DIR=`pwd`\nCD_XCODE_PRJ=`pwd`/$PROJECT_NAME.$XCODE_PRJ\nPROJECT_WORKSPACE=$PROJECT_DIR.\nPROJECT_BUILD=`pwd`/$PROJECT_NAME/BUILD\n\nAPP_PATH=\"build/Release-iphoneos/${PROJECT_NAME}.app\"\nTARGET_APP_PATH=\"build/Release-iphoneos/${PROJECT_NAME}.ipa\"\nARCHIVEPATH=\"build/Release-iphoneos/${PROJECT_NAME}.xcarchive\"\n\ncd \"$PROJECT_DIR\"\n\ncd ..\ncd \"$CD_XCODE_PRJ\"\nsed -i '' \"s/\\(PROVISIONING_PROFILE.=.\\\"\\).*\\(\\\"\\)/\\1$PROVISION_UUID\\2/g\" project.pbxproj\ncd ..\nrm -rf build\nxcodebuild -workspace $PROJECT_DIR/$PROJECT_NAME.$FILE_EXTENSION -scheme $PROJECT_NAME -destination generic/platform=iOS archive -archivePath $ARCHIVEPATH\nxcodebuild -exportArchive -exportFormat IPA -archivePath $ARCHIVEPATH -exportPath $TARGET_APP_PATH -exportProvisioningProfile \"${PROVISONING_PROFILE}\"\ncurl -F \"file=@build/Release-iphoneos/JenkinsDemo.ipa\" -F \"uKey=蒲公英上的uKey\" -F \"_api_key=蒲公英上的apikey\" https://www.pgyer.com/apiv1/app/upload\n```\n*构建成功后这里可能会出现一个问题，你的项目工程中的配置需要设置一下shared，不然构建的会一直报错。找不到工程文件，如下图设置：\n\n![](/images/工程配置.png)\n*OK，保存构建后，接下来就可以回到项目管理页面了。\n\n![](/images/项目管理-立即构建.png)\n*一般构建在一分钟左右，先下载源代码，然后打包，最后将ipa包上传到蒲公英平台。\n*可以看出，构建后蓝色的表示构建成功，红色和灰色表示构建失败，可以点击相应的图标，查看构建日志。\n","slug":"Jenkins+Git自动构建","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7fobs0007zn3mkucw3zqt","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>   想想以前，发给测试的测试包都是通过手动使用XCode来打包，如果项目工程比较大，Archive过程时间还是比较长的，打多了觉得特没劲，非常浪费时间，特别是使用了敏捷开发流程的，要是还用手动打包，估计你在打包上耗得时间都够你解决几个bug了。敏捷开发也是强调使用自动化的，所以也少不了自动构建的环节，那么接下来说说如何使用Jenkins+Git来自动构建我们的项目，从而方便测试，也让开发有更多的经历投入到编码和业务中而不是浪费在这些无用的流程中。</p>\n<h2 id=\"一-Jenkins安装\"><a href=\"#一-Jenkins安装\" class=\"headerlink\" title=\"一.Jenkins安装\"></a>一.Jenkins安装</h2><p>1.下载最新的版本（一个 WAR 文件）。<a href=\"http://Jenkins-ci.org/\" target=\"_blank\" rel=\"external\">Jenkins官方网址</a><br>2.运行 Java -jar jenkins.war 。<br>如果你的java环节低于java7 它会提示你升级java环节，你可以到<a href=\"https://www.java.com/en/download/\" target=\"_blank\" rel=\"external\">这里下载</a>，安装最新的java环境。<br>如果一切顺利，那么只要在你本机浏览器中输入<a href=\"http://127.0.0.1:8080\" target=\"_blank\" rel=\"external\">127.0.0.1:8080</a>即可看到Jenkins的主页面。<br><img src=\"/images/jenins首页.png\" alt=\"\"></p>\n<h2 id=\"二-Jenkins配置\"><a href=\"#二-Jenkins配置\" class=\"headerlink\" title=\"二.Jenkins配置\"></a>二.Jenkins配置</h2><p>1.先新建一个项目。<br><img src=\"/images/创建项目.png\" alt=\"\"><br>2.输入项目名称和构建风格。<br><img src=\"/images/创建项目1.png\" alt=\"\"><br>3.项目配置</p>\n<p><img src=\"/images/配置项目-项目名称.png\" alt=\"\"><br>4.源码管理</p>\n<p><img src=\"/images/项目配置-源码管理.png\" alt=\"\"><br>这一步输入你项目在Git上的仓库地址，这里的授权有两种形式，一种是使用http登录，一种是使用ssh授权；<br>*如果使用http授权的看下图：</p>\n<p><img src=\"/images/项目配置-源码管理添加http授权.png\" alt=\"\"><br>这里输入你git上的登录名和密码。<br>*如果使用SSH授权看下图：</p>\n<p><img src=\"/images/项目配置-源码管理SSH授权创建.png\" alt=\"\"><br>kind要选择SSH Username with private key,Username可以随便输入，一个描述而已，Private Key选Enter directly，然后在Key中输入你在Git上的秘钥，这个秘钥的制作在我前面的<a href=\"http://roger.farbox.com/post/macshang-zhi-zuo-sshmi-yao\" target=\"_blank\" rel=\"external\">博客</a>中有提到，这里就不多说了。最后点击Add，SSH的授权就制作OK了。<br>5.构建<br>源码可以下载了，那么接下来就是如何去生成一个ipa包了，我们通过构建的方式来实现，接下来我们来配置一下构建流程，构建的方式很多中，这里讲讲比较简单的一种，使用shell来实现。</p>\n<p><img src=\"/images/构建1.png\" alt=\"\"></p>\n<p><img src=\"/images/项目配置-构建配置.png\" alt=\"\"><br>编写脚本，这个脚本支持的是workspace的，如果没有使用workspace的，问题不大，稍作修改即可。脚本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd $WORKSPACE</div><div class=\"line\">SDK_VERSION=&quot;iphoneos8.3&quot;</div><div class=\"line\"></div><div class=\"line\">PROJECT_NAME=&quot;JenkinsDemo&quot;</div><div class=\"line\">PROVISION_UUID=&quot;你的描述文件的UUID，可以通过在XCode选中描述文件ctr+c的方法获取到&quot;</div><div class=\"line\">PROVISONING_PROFILE=&quot;JenkinsDemo_Distribution&quot;</div><div class=\"line\"></div><div class=\"line\">XCODE_PRJ=&quot;xcodeproj&quot;</div><div class=\"line\">FILE_EXTENSION=&apos;xcworkspace&apos;</div><div class=\"line\">PROJECT_DIR=`pwd`</div><div class=\"line\">CD_XCODE_PRJ=`pwd`/$PROJECT_NAME.$XCODE_PRJ</div><div class=\"line\">PROJECT_WORKSPACE=$PROJECT_DIR.</div><div class=\"line\">PROJECT_BUILD=`pwd`/$PROJECT_NAME/BUILD</div><div class=\"line\"></div><div class=\"line\">APP_PATH=&quot;build/Release-iphoneos/$&#123;PROJECT_NAME&#125;.app&quot;</div><div class=\"line\">TARGET_APP_PATH=&quot;build/Release-iphoneos/$&#123;PROJECT_NAME&#125;.ipa&quot;</div><div class=\"line\">ARCHIVEPATH=&quot;build/Release-iphoneos/$&#123;PROJECT_NAME&#125;.xcarchive&quot;</div><div class=\"line\"></div><div class=\"line\">cd &quot;$PROJECT_DIR&quot;</div><div class=\"line\"></div><div class=\"line\">cd ..</div><div class=\"line\">cd &quot;$CD_XCODE_PRJ&quot;</div><div class=\"line\">sed -i &apos;&apos; &quot;s/\\(PROVISIONING_PROFILE.=.\\&quot;\\).*\\(\\&quot;\\)/\\1$PROVISION_UUID\\2/g&quot; project.pbxproj</div><div class=\"line\">cd ..</div><div class=\"line\">rm -rf build</div><div class=\"line\">xcodebuild -workspace $PROJECT_DIR/$PROJECT_NAME.$FILE_EXTENSION -scheme $PROJECT_NAME -destination generic/platform=iOS archive -archivePath $ARCHIVEPATH</div><div class=\"line\">xcodebuild -exportArchive -exportFormat IPA -archivePath $ARCHIVEPATH -exportPath $TARGET_APP_PATH -exportProvisioningProfile &quot;$&#123;PROVISONING_PROFILE&#125;&quot;</div><div class=\"line\">curl -F &quot;file=@build/Release-iphoneos/JenkinsDemo.ipa&quot; -F &quot;uKey=蒲公英上的uKey&quot; -F &quot;_api_key=蒲公英上的apikey&quot; https://www.pgyer.com/apiv1/app/upload</div></pre></td></tr></table></figure></p>\n<p>*构建成功后这里可能会出现一个问题，你的项目工程中的配置需要设置一下shared，不然构建的会一直报错。找不到工程文件，如下图设置：</p>\n<p><img src=\"/images/工程配置.png\" alt=\"\"><br>*OK，保存构建后，接下来就可以回到项目管理页面了。</p>\n<p><img src=\"/images/项目管理-立即构建.png\" alt=\"\"><br><em>一般构建在一分钟左右，先下载源代码，然后打包，最后将ipa包上传到蒲公英平台。\n</em>可以看出，构建后蓝色的表示构建成功，红色和灰色表示构建失败，可以点击相应的图标，查看构建日志。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>   想想以前，发给测试的测试包都是通过手动使用XCode来打包，如果项目工程比较大，Archive过程时间还是比较长的，打多了觉得特没劲，非常浪费时间，特别是使用了敏捷开发流程的，要是还用手动打包，估计你在打包上耗得时间都够你解决几个bug了。敏捷开发也是强调使用自动化的，所以也少不了自动构建的环节，那么接下来说说如何使用Jenkins+Git来自动构建我们的项目，从而方便测试，也让开发有更多的经历投入到编码和业务中而不是浪费在这些无用的流程中。</p>\n<h2 id=\"一-Jenkins安装\"><a href=\"#一-Jenkins安装\" class=\"headerlink\" title=\"一.Jenkins安装\"></a>一.Jenkins安装</h2><p>1.下载最新的版本（一个 WAR 文件）。<a href=\"http://Jenkins-ci.org/\">Jenkins官方网址</a><br>2.运行 Java -jar jenkins.war 。<br>如果你的java环节低于java7 它会提示你升级java环节，你可以到<a href=\"https://www.java.com/en/download/\">这里下载</a>，安装最新的java环境。<br>如果一切顺利，那么只要在你本机浏览器中输入<a href=\"http://127.0.0.1:8080\">127.0.0.1:8080</a>即可看到Jenkins的主页面。<br><img src=\"/images/jenins首页.png\" alt=\"\"></p>\n<h2 id=\"二-Jenkins配置\"><a href=\"#二-Jenkins配置\" class=\"headerlink\" title=\"二.Jenkins配置\"></a>二.Jenkins配置</h2><p>1.先新建一个项目。<br><img src=\"/images/创建项目.png\" alt=\"\"><br>2.输入项目名称和构建风格。<br><img src=\"/images/创建项目1.png\" alt=\"\"><br>3.项目配置</p>\n<p><img src=\"/images/配置项目-项目名称.png\" alt=\"\"><br>4.源码管理</p>\n<p><img src=\"/images/项目配置-源码管理.png\" alt=\"\"><br>这一步输入你项目在Git上的仓库地址，这里的授权有两种形式，一种是使用http登录，一种是使用ssh授权；<br>*如果使用http授权的看下图：</p>\n<p><img src=\"/images/项目配置-源码管理添加http授权.png\" alt=\"\"><br>这里输入你git上的登录名和密码。<br>*如果使用SSH授权看下图：</p>\n<p><img src=\"/images/项目配置-源码管理SSH授权创建.png\" alt=\"\"><br>kind要选择SSH Username with private key,Username可以随便输入，一个描述而已，Private Key选Enter directly，然后在Key中输入你在Git上的秘钥，这个秘钥的制作在我前面的<a href=\"http://roger.farbox.com/post/macshang-zhi-zuo-sshmi-yao\">博客</a>中有提到，这里就不多说了。最后点击Add，SSH的授权就制作OK了。<br>5.构建<br>源码可以下载了，那么接下来就是如何去生成一个ipa包了，我们通过构建的方式来实现，接下来我们来配置一下构建流程，构建的方式很多中，这里讲讲比较简单的一种，使用shell来实现。</p>\n<p><img src=\"/images/构建1.png\" alt=\"\"></p>\n<p><img src=\"/images/项目配置-构建配置.png\" alt=\"\"><br>编写脚本，这个脚本支持的是workspace的，如果没有使用workspace的，问题不大，稍作修改即可。脚本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd $WORKSPACE</div><div class=\"line\">SDK_VERSION=&quot;iphoneos8.3&quot;</div><div class=\"line\"></div><div class=\"line\">PROJECT_NAME=&quot;JenkinsDemo&quot;</div><div class=\"line\">PROVISION_UUID=&quot;你的描述文件的UUID，可以通过在XCode选中描述文件ctr+c的方法获取到&quot;</div><div class=\"line\">PROVISONING_PROFILE=&quot;JenkinsDemo_Distribution&quot;</div><div class=\"line\"></div><div class=\"line\">XCODE_PRJ=&quot;xcodeproj&quot;</div><div class=\"line\">FILE_EXTENSION=&apos;xcworkspace&apos;</div><div class=\"line\">PROJECT_DIR=`pwd`</div><div class=\"line\">CD_XCODE_PRJ=`pwd`/$PROJECT_NAME.$XCODE_PRJ</div><div class=\"line\">PROJECT_WORKSPACE=$PROJECT_DIR.</div><div class=\"line\">PROJECT_BUILD=`pwd`/$PROJECT_NAME/BUILD</div><div class=\"line\"></div><div class=\"line\">APP_PATH=&quot;build/Release-iphoneos/$&#123;PROJECT_NAME&#125;.app&quot;</div><div class=\"line\">TARGET_APP_PATH=&quot;build/Release-iphoneos/$&#123;PROJECT_NAME&#125;.ipa&quot;</div><div class=\"line\">ARCHIVEPATH=&quot;build/Release-iphoneos/$&#123;PROJECT_NAME&#125;.xcarchive&quot;</div><div class=\"line\"></div><div class=\"line\">cd &quot;$PROJECT_DIR&quot;</div><div class=\"line\"></div><div class=\"line\">cd ..</div><div class=\"line\">cd &quot;$CD_XCODE_PRJ&quot;</div><div class=\"line\">sed -i &apos;&apos; &quot;s/\\(PROVISIONING_PROFILE.=.\\&quot;\\).*\\(\\&quot;\\)/\\1$PROVISION_UUID\\2/g&quot; project.pbxproj</div><div class=\"line\">cd ..</div><div class=\"line\">rm -rf build</div><div class=\"line\">xcodebuild -workspace $PROJECT_DIR/$PROJECT_NAME.$FILE_EXTENSION -scheme $PROJECT_NAME -destination generic/platform=iOS archive -archivePath $ARCHIVEPATH</div><div class=\"line\">xcodebuild -exportArchive -exportFormat IPA -archivePath $ARCHIVEPATH -exportPath $TARGET_APP_PATH -exportProvisioningProfile &quot;$&#123;PROVISONING_PROFILE&#125;&quot;</div><div class=\"line\">curl -F &quot;file=@build/Release-iphoneos/JenkinsDemo.ipa&quot; -F &quot;uKey=蒲公英上的uKey&quot; -F &quot;_api_key=蒲公英上的apikey&quot; https://www.pgyer.com/apiv1/app/upload</div></pre></td></tr></table></figure></p>\n<p>*构建成功后这里可能会出现一个问题，你的项目工程中的配置需要设置一下shared，不然构建的会一直报错。找不到工程文件，如下图设置：</p>\n<p><img src=\"/images/工程配置.png\" alt=\"\"><br>*OK，保存构建后，接下来就可以回到项目管理页面了。</p>\n<p><img src=\"/images/项目管理-立即构建.png\" alt=\"\"><br><em>一般构建在一分钟左右，先下载源代码，然后打包，最后将ipa包上传到蒲公英平台。\n</em>可以看出，构建后蓝色的表示构建成功，红色和灰色表示构建失败，可以点击相应的图标，查看构建日志。</p>\n"},{"date":"2016-11-16T09:16:00.000Z","status":"public","title":"NSURL通过URLWithString:创建为nil的问题","_content":"### NSURL通过URLWithString:创建为nil的问题\n  最近有使用NSURL请求连接时发现一些小问题，服务端给一个网页链接字符串，如`NSURL *linkURL = [NSURL URLWithString:@\"http://192.168.12.28:8000/#/faq?xt=123\"];`这样生成的url没问题，可以访问，但将请求变成`NSURL *linkURL = [NSURL URLWithString:[NSString stringWithFormat:@\"http://192.168.12.28:8000/#/faq?xt=%@\",[value urlEncode]]];`,xt的参数值是变化的，有可能会是任何一种字符，如果该值中为非普通的字符，如带有中文或`#`等之类的字符，创建的url竟然是nil。不太明白NSURL里面是如何创建对象的，想要解决这个问题，只能将参数的值通过UTF-8编码，传进去，服务端接受该值时再解码就好了。\n  \n","source":"_posts/NSURL相关问题.md","raw":"---\ndate: 2016-11-16 17:16\nstatus: public\ntitle: NSURL通过URLWithString:创建为nil的问题\ncategory: 基础篇\n---\n### NSURL通过URLWithString:创建为nil的问题\n  最近有使用NSURL请求连接时发现一些小问题，服务端给一个网页链接字符串，如`NSURL *linkURL = [NSURL URLWithString:@\"http://192.168.12.28:8000/#/faq?xt=123\"];`这样生成的url没问题，可以访问，但将请求变成`NSURL *linkURL = [NSURL URLWithString:[NSString stringWithFormat:@\"http://192.168.12.28:8000/#/faq?xt=%@\",[value urlEncode]]];`,xt的参数值是变化的，有可能会是任何一种字符，如果该值中为非普通的字符，如带有中文或`#`等之类的字符，创建的url竟然是nil。不太明白NSURL里面是如何创建对象的，想要解决这个问题，只能将参数的值通过UTF-8编码，传进去，服务端接受该值时再解码就好了。\n  \n","slug":"NSURL相关问题","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7fobw0008zn3mp9z6hp9i","content":"<h3 id=\"NSURL通过URLWithString-创建为nil的问题\"><a href=\"#NSURL通过URLWithString-创建为nil的问题\" class=\"headerlink\" title=\"NSURL通过URLWithString:创建为nil的问题\"></a>NSURL通过URLWithString:创建为nil的问题</h3><p>  最近有使用NSURL请求连接时发现一些小问题，服务端给一个网页链接字符串，如<code>NSURL *linkURL = [NSURL URLWithString:@&quot;http://192.168.12.28:8000/#/faq?xt=123&quot;];</code>这样生成的url没问题，可以访问，但将请求变成<code>NSURL *linkURL = [NSURL URLWithString:[NSString stringWithFormat:@&quot;http://192.168.12.28:8000/#/faq?xt=%@&quot;,[value urlEncode]]];</code>,xt的参数值是变化的，有可能会是任何一种字符，如果该值中为非普通的字符，如带有中文或<code>#</code>等之类的字符，创建的url竟然是nil。不太明白NSURL里面是如何创建对象的，想要解决这个问题，只能将参数的值通过UTF-8编码，传进去，服务端接受该值时再解码就好了。</p>\n","excerpt":"","more":"<h3 id=\"NSURL通过URLWithString-创建为nil的问题\"><a href=\"#NSURL通过URLWithString-创建为nil的问题\" class=\"headerlink\" title=\"NSURL通过URLWithString:创建为nil的问题\"></a>NSURL通过URLWithString:创建为nil的问题</h3><p>  最近有使用NSURL请求连接时发现一些小问题，服务端给一个网页链接字符串，如<code>NSURL *linkURL = [NSURL URLWithString:@&quot;http://192.168.12.28:8000/#/faq?xt=123&quot;];</code>这样生成的url没问题，可以访问，但将请求变成<code>NSURL *linkURL = [NSURL URLWithString:[NSString stringWithFormat:@&quot;http://192.168.12.28:8000/#/faq?xt=%@&quot;,[value urlEncode]]];</code>,xt的参数值是变化的，有可能会是任何一种字符，如果该值中为非普通的字符，如带有中文或<code>#</code>等之类的字符，创建的url竟然是nil。不太明白NSURL里面是如何创建对象的，想要解决这个问题，只能将参数的值通过UTF-8编码，传进去，服务端接受该值时再解码就好了。</p>\n"},{"date":"2015-12-23T09:33:00.000Z","status":"public","title":"FMDB使用SQLCipher加密","_content":"\n### 前言\n数据库数据加密的必要性就不多说了，直接进入主题，如何使用FMDB对数据加密。\n这里我建议使用cocospod来管理第三方库，如果没有安装可以参考[这里](http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/)来安装.\n#### 1.首先，我们的下载SQLCipher依赖库\n1.1 ```pod 'SQLCipher', '~> 3.1.0'```\n#### 2.其次，我们需要一个具有加密功能的FMDB版本；\n加密的FMDB其实是一个分支，也就是说，如果你的FMDB版本不支持SQLCipher加密，那么你就需要替换FMDB。Github上关于该分支的安装只提供了cocospod的安装方式。Github上FMDB的[地址](https://github.com/ccgus/fmdb);\n使用cocospod来跟新具有加密功能的FMDB\n2.1 将以前```pod 'FMDB'``` 改成```pod 'FMDB/SQLCipher'```\n2.2 更新pod ```pod update```\n#### 3.最后，修改一下你的代码\n定义一个加密的key,这里我自定义了一个宏```DB_SECRETKEY```,然后在FMDB中的FMDatabase.m类中加一句代码，如下图:\n![](/images/F0547994-4A8E-43A8-A937-DC94A4637CA2.png)\n#### 4.效果\nrun下你的工程，并对数据库做一些操作，然后在使用其他管理工具打开数据时，你就发现他会提示你file is encrypted or is not a database\n![](/images/AFB7BECA-A6FF-4CE4-BAA1-99097EFAD5BF.png)","source":"_posts/FMDB数据库加密.md","raw":"---\ndate: 2015-12-23 17:33\nstatus: public\ntitle: FMDB使用SQLCipher加密\n---\n\n### 前言\n数据库数据加密的必要性就不多说了，直接进入主题，如何使用FMDB对数据加密。\n这里我建议使用cocospod来管理第三方库，如果没有安装可以参考[这里](http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/)来安装.\n#### 1.首先，我们的下载SQLCipher依赖库\n1.1 ```pod 'SQLCipher', '~> 3.1.0'```\n#### 2.其次，我们需要一个具有加密功能的FMDB版本；\n加密的FMDB其实是一个分支，也就是说，如果你的FMDB版本不支持SQLCipher加密，那么你就需要替换FMDB。Github上关于该分支的安装只提供了cocospod的安装方式。Github上FMDB的[地址](https://github.com/ccgus/fmdb);\n使用cocospod来跟新具有加密功能的FMDB\n2.1 将以前```pod 'FMDB'``` 改成```pod 'FMDB/SQLCipher'```\n2.2 更新pod ```pod update```\n#### 3.最后，修改一下你的代码\n定义一个加密的key,这里我自定义了一个宏```DB_SECRETKEY```,然后在FMDB中的FMDatabase.m类中加一句代码，如下图:\n![](/images/F0547994-4A8E-43A8-A937-DC94A4637CA2.png)\n#### 4.效果\nrun下你的工程，并对数据库做一些操作，然后在使用其他管理工具打开数据时，你就发现他会提示你file is encrypted or is not a database\n![](/images/AFB7BECA-A6FF-4CE4-BAA1-99097EFAD5BF.png)","slug":"FMDB数据库加密","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7foby000azn3m3br1107v","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>数据库数据加密的必要性就不多说了，直接进入主题，如何使用FMDB对数据加密。<br>这里我建议使用cocospod来管理第三方库，如果没有安装可以参考<a href=\"http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/\" target=\"_blank\" rel=\"external\">这里</a>来安装.</p>\n<h4 id=\"1-首先，我们的下载SQLCipher依赖库\"><a href=\"#1-首先，我们的下载SQLCipher依赖库\" class=\"headerlink\" title=\"1.首先，我们的下载SQLCipher依赖库\"></a>1.首先，我们的下载SQLCipher依赖库</h4><p>1.1 <figure class=\"highlight plain\"><figcaption><span>'SQLCipher', '~> 3.1.0'```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#### 2.其次，我们需要一个具有加密功能的FMDB版本；</div><div class=\"line\">加密的FMDB其实是一个分支，也就是说，如果你的FMDB版本不支持SQLCipher加密，那么你就需要替换FMDB。Github上关于该分支的安装只提供了cocospod的安装方式。Github上FMDB的[地址](https://github.com/ccgus/fmdb);</div><div class=\"line\">使用cocospod来跟新具有加密功能的FMDB</div><div class=\"line\">2.1 将以前```pod &apos;FMDB&apos;``` 改成```pod &apos;FMDB/SQLCipher&apos;</div></pre></td></tr></table></figure></p>\n<p>2.2 更新pod <code>pod update</code></p>\n<h4 id=\"3-最后，修改一下你的代码\"><a href=\"#3-最后，修改一下你的代码\" class=\"headerlink\" title=\"3.最后，修改一下你的代码\"></a>3.最后，修改一下你的代码</h4><p>定义一个加密的key,这里我自定义了一个宏<code>DB_SECRETKEY</code>,然后在FMDB中的FMDatabase.m类中加一句代码，如下图:<br><img src=\"/images/F0547994-4A8E-43A8-A937-DC94A4637CA2.png\" alt=\"\"></p>\n<h4 id=\"4-效果\"><a href=\"#4-效果\" class=\"headerlink\" title=\"4.效果\"></a>4.效果</h4><p>run下你的工程，并对数据库做一些操作，然后在使用其他管理工具打开数据时，你就发现他会提示你file is encrypted or is not a database<br><img src=\"/images/AFB7BECA-A6FF-4CE4-BAA1-99097EFAD5BF.png\" alt=\"\"></p>\n","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>数据库数据加密的必要性就不多说了，直接进入主题，如何使用FMDB对数据加密。<br>这里我建议使用cocospod来管理第三方库，如果没有安装可以参考<a href=\"http://blog.devtang.com/blog/2014/05/25/use-cocoapod-to-manage-ios-lib-dependency/\">这里</a>来安装.</p>\n<h4 id=\"1-首先，我们的下载SQLCipher依赖库\"><a href=\"#1-首先，我们的下载SQLCipher依赖库\" class=\"headerlink\" title=\"1.首先，我们的下载SQLCipher依赖库\"></a>1.首先，我们的下载SQLCipher依赖库</h4><p>1.1 <figure class=\"highlight plain\"><figcaption><span>'SQLCipher', '~> 3.1.0'```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#### 2.其次，我们需要一个具有加密功能的FMDB版本；</div><div class=\"line\">加密的FMDB其实是一个分支，也就是说，如果你的FMDB版本不支持SQLCipher加密，那么你就需要替换FMDB。Github上关于该分支的安装只提供了cocospod的安装方式。Github上FMDB的[地址](https://github.com/ccgus/fmdb);</div><div class=\"line\">使用cocospod来跟新具有加密功能的FMDB</div><div class=\"line\">2.1 将以前```pod &apos;FMDB&apos;``` 改成```pod &apos;FMDB/SQLCipher&apos;</div></pre></td></tr></table></figure></p>\n<p>2.2 更新pod <code>pod update</code></p>\n<h4 id=\"3-最后，修改一下你的代码\"><a href=\"#3-最后，修改一下你的代码\" class=\"headerlink\" title=\"3.最后，修改一下你的代码\"></a>3.最后，修改一下你的代码</h4><p>定义一个加密的key,这里我自定义了一个宏<code>DB_SECRETKEY</code>,然后在FMDB中的FMDatabase.m类中加一句代码，如下图:<br><img src=\"/images/F0547994-4A8E-43A8-A937-DC94A4637CA2.png\" alt=\"\"></p>\n<h4 id=\"4-效果\"><a href=\"#4-效果\" class=\"headerlink\" title=\"4.效果\"></a>4.效果</h4><p>run下你的工程，并对数据库做一些操作，然后在使用其他管理工具打开数据时，你就发现他会提示你file is encrypted or is not a database<br><img src=\"/images/AFB7BECA-A6FF-4CE4-BAA1-99097EFAD5BF.png\" alt=\"\"></p>\n"},{"date":"2015-10-14T05:16:00.000Z","status":"public","title":"Markdown学习","_content":"\n## 一.标题\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n\n## 二.无序列表\n* 我的\n* 你的\n* 他的\n\n## 三.有序列表\n1. 我的\n2. 你的\n3. 她的\n\n## 四.引用\n> 这里是引用\n\n## 五.图片与链接\n1. ![Mou的icon](http://mouapp.com/Mou_128.png)\n2. [Markdown学习链接](http://www.jianshu.com/p/1e402922ee32/)\n3. 建议您参考[Markdown——入门指南][mark]或者参考[Markdown语法说明(简体中文版)][mark2]\n[mark]: http://www.jianshu.com/p/1e402922ee32/ (Markdown——入门指南)\n[mark2]: http://wowubuntu.com/markdown/ (Markdown语法说明(简体中文版))\n\n![](/images/jiafei.gif)\n\n    \n```\n    链接内容定义的形式为：\n    1.方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字\n    接着一个冒号\n    接着一个以上的空格或制表符\n    接着链接的网址\n    选择性地接着 title 内容，可以用单引号、双引号或是括弧包着\n    下面这三种链接的定义都是相同：\n    1. [foo]: http://example.com/  \"Optional Title Here\"\n    2. [foo]: http://example.com/  'Optional Title Here'\n    3. [foo]: http://example.com/  (Optional Title Here)\n    请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。\n    链接网址也可以用尖括号包起来：\n    * [id]: <http://example.com/>  \"Optional Title Here\"\n```\n## 六.粗体与斜体\n1. 这是 **粗体**\n1. 这是 *斜体*\n1. 这是 常态\n\n## 七.表格\n|  name(巨左对齐) |  age(居中对齐)  | sex(居右对齐) |\n|-------|:------:|------:|\n|ly     |28     |男      |\n\n## 八.代码框\n```objective-c\n- (UIImage *)imageFromColor:(UIColor *)color frame:(CGRect)rect\n{\n    UIGraphicsBeginImageContext(rect.size);\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    CGContextSetFillColorWithColor(context, [color CGColor]);\n    CGContextFillRect(context, rect);\n    UIImage *img = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return img;\n}\n```\n\n``` \n# 标题一\n## 标题二\n### 标题三\n```\n## 九.分割线\n***************\n----------\n\n## 十.区域引用\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n \n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n> id sem consectetuer libero luctus adipiscing.","source":"_posts/Markdown学习.md","raw":"---\ndate: 2015-10-14 13:16\nstatus: public\ntitle: Markdown学习\ncategory: 基础篇\n---\n\n## 一.标题\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n\n## 二.无序列表\n* 我的\n* 你的\n* 他的\n\n## 三.有序列表\n1. 我的\n2. 你的\n3. 她的\n\n## 四.引用\n> 这里是引用\n\n## 五.图片与链接\n1. ![Mou的icon](http://mouapp.com/Mou_128.png)\n2. [Markdown学习链接](http://www.jianshu.com/p/1e402922ee32/)\n3. 建议您参考[Markdown——入门指南][mark]或者参考[Markdown语法说明(简体中文版)][mark2]\n[mark]: http://www.jianshu.com/p/1e402922ee32/ (Markdown——入门指南)\n[mark2]: http://wowubuntu.com/markdown/ (Markdown语法说明(简体中文版))\n\n![](/images/jiafei.gif)\n\n    \n```\n    链接内容定义的形式为：\n    1.方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字\n    接着一个冒号\n    接着一个以上的空格或制表符\n    接着链接的网址\n    选择性地接着 title 内容，可以用单引号、双引号或是括弧包着\n    下面这三种链接的定义都是相同：\n    1. [foo]: http://example.com/  \"Optional Title Here\"\n    2. [foo]: http://example.com/  'Optional Title Here'\n    3. [foo]: http://example.com/  (Optional Title Here)\n    请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。\n    链接网址也可以用尖括号包起来：\n    * [id]: <http://example.com/>  \"Optional Title Here\"\n```\n## 六.粗体与斜体\n1. 这是 **粗体**\n1. 这是 *斜体*\n1. 这是 常态\n\n## 七.表格\n|  name(巨左对齐) |  age(居中对齐)  | sex(居右对齐) |\n|-------|:------:|------:|\n|ly     |28     |男      |\n\n## 八.代码框\n```objective-c\n- (UIImage *)imageFromColor:(UIColor *)color frame:(CGRect)rect\n{\n    UIGraphicsBeginImageContext(rect.size);\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    CGContextSetFillColorWithColor(context, [color CGColor]);\n    CGContextFillRect(context, rect);\n    UIImage *img = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return img;\n}\n```\n\n``` \n# 标题一\n## 标题二\n### 标题三\n```\n## 九.分割线\n***************\n----------\n\n## 十.区域引用\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n \n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n> id sem consectetuer libero luctus adipiscing.","slug":"Markdown学习","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7fobz000czn3mkip0tjku","content":"<h2 id=\"一-标题\"><a href=\"#一-标题\" class=\"headerlink\" title=\"一.标题\"></a>一.标题</h2><h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><h2 id=\"二-无序列表\"><a href=\"#二-无序列表\" class=\"headerlink\" title=\"二.无序列表\"></a>二.无序列表</h2><ul>\n<li>我的</li>\n<li>你的</li>\n<li>他的</li>\n</ul>\n<h2 id=\"三-有序列表\"><a href=\"#三-有序列表\" class=\"headerlink\" title=\"三.有序列表\"></a>三.有序列表</h2><ol>\n<li>我的</li>\n<li>你的</li>\n<li>她的</li>\n</ol>\n<h2 id=\"四-引用\"><a href=\"#四-引用\" class=\"headerlink\" title=\"四.引用\"></a>四.引用</h2><blockquote>\n<p>这里是引用</p>\n</blockquote>\n<h2 id=\"五-图片与链接\"><a href=\"#五-图片与链接\" class=\"headerlink\" title=\"五.图片与链接\"></a>五.图片与链接</h2><ol>\n<li><img src=\"http://mouapp.com/Mou_128.png\" alt=\"Mou的icon\"></li>\n<li><a href=\"http://www.jianshu.com/p/1e402922ee32/\" target=\"_blank\" rel=\"external\">Markdown学习链接</a></li>\n<li>建议您参考<a href=\"http://www.jianshu.com/p/1e402922ee32/\" title=\"Markdown——入门指南\" target=\"_blank\" rel=\"external\">Markdown——入门指南</a>或者参考<a href=\"http://wowubuntu.com/markdown/\" title=\"Markdown语法说明(简体中文版)\" target=\"_blank\" rel=\"external\">Markdown语法说明(简体中文版)</a></li>\n</ol>\n<p><img src=\"/images/jiafei.gif\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">链接内容定义的形式为：</div><div class=\"line\">1.方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</div><div class=\"line\">接着一个冒号</div><div class=\"line\">接着一个以上的空格或制表符</div><div class=\"line\">接着链接的网址</div><div class=\"line\">选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</div><div class=\"line\">下面这三种链接的定义都是相同：</div><div class=\"line\">1. [foo]: http://example.com/  &quot;Optional Title Here&quot;</div><div class=\"line\">2. [foo]: http://example.com/  &apos;Optional Title Here&apos;</div><div class=\"line\">3. [foo]: http://example.com/  (Optional Title Here)</div><div class=\"line\">请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</div><div class=\"line\">链接网址也可以用尖括号包起来：</div><div class=\"line\">* [id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"六-粗体与斜体\"><a href=\"#六-粗体与斜体\" class=\"headerlink\" title=\"六.粗体与斜体\"></a>六.粗体与斜体</h2><ol>\n<li>这是 <strong>粗体</strong></li>\n<li>这是 <em>斜体</em></li>\n<li>这是 常态</li>\n</ol>\n<h2 id=\"七-表格\"><a href=\"#七-表格\" class=\"headerlink\" title=\"七.表格\"></a>七.表格</h2><table>\n<thead>\n<tr>\n<th>name(巨左对齐)</th>\n<th style=\"text-align:center\">age(居中对齐)</th>\n<th style=\"text-align:right\">sex(居右对齐)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ly</td>\n<td style=\"text-align:center\">28</td>\n<td style=\"text-align:right\">男</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"八-代码框\"><a href=\"#八-代码框\" class=\"headerlink\" title=\"八.代码框\"></a>八.代码框</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (UIImage *)imageFromColor:(UIColor *)color frame:(CGRect)rect</div><div class=\"line\">&#123;</div><div class=\"line\">    UIGraphicsBeginImageContext(rect.size);</div><div class=\"line\">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class=\"line\">    CGContextSetFillColorWithColor(context, [color CGColor]);</div><div class=\"line\">    CGContextFillRect(context, rect);</div><div class=\"line\">    UIImage *img = UIGraphicsGetImageFromCurrentImageContext();</div><div class=\"line\">    UIGraphicsEndImageContext();</div><div class=\"line\">    return img;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 标题一</div><div class=\"line\">## 标题二</div><div class=\"line\">### 标题三</div></pre></td></tr></table></figure>\n<h2 id=\"九-分割线\"><a href=\"#九-分割线\" class=\"headerlink\" title=\"九.分割线\"></a>九.分割线</h2><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"*\"></a><strong><strong><strong><em>*</em></strong></strong></strong></h2><h2 id=\"十-区域引用\"><a href=\"#十-区域引用\" class=\"headerlink\" title=\"十.区域引用\"></a>十.区域引用</h2><blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"一-标题\"><a href=\"#一-标题\" class=\"headerlink\" title=\"一.标题\"></a>一.标题</h2><h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><h2 id=\"二-无序列表\"><a href=\"#二-无序列表\" class=\"headerlink\" title=\"二.无序列表\"></a>二.无序列表</h2><ul>\n<li>我的</li>\n<li>你的</li>\n<li>他的</li>\n</ul>\n<h2 id=\"三-有序列表\"><a href=\"#三-有序列表\" class=\"headerlink\" title=\"三.有序列表\"></a>三.有序列表</h2><ol>\n<li>我的</li>\n<li>你的</li>\n<li>她的</li>\n</ol>\n<h2 id=\"四-引用\"><a href=\"#四-引用\" class=\"headerlink\" title=\"四.引用\"></a>四.引用</h2><blockquote>\n<p>这里是引用</p>\n</blockquote>\n<h2 id=\"五-图片与链接\"><a href=\"#五-图片与链接\" class=\"headerlink\" title=\"五.图片与链接\"></a>五.图片与链接</h2><ol>\n<li><img src=\"http://mouapp.com/Mou_128.png\" alt=\"Mou的icon\"></li>\n<li><a href=\"http://www.jianshu.com/p/1e402922ee32/\">Markdown学习链接</a></li>\n<li>建议您参考<a href=\"http://www.jianshu.com/p/1e402922ee32/\" title=\"Markdown——入门指南\">Markdown——入门指南</a>或者参考<a href=\"http://wowubuntu.com/markdown/\" title=\"Markdown语法说明(简体中文版)\">Markdown语法说明(简体中文版)</a></li>\n</ol>\n<p><img src=\"/images/jiafei.gif\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">链接内容定义的形式为：</div><div class=\"line\">1.方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</div><div class=\"line\">接着一个冒号</div><div class=\"line\">接着一个以上的空格或制表符</div><div class=\"line\">接着链接的网址</div><div class=\"line\">选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</div><div class=\"line\">下面这三种链接的定义都是相同：</div><div class=\"line\">1. [foo]: http://example.com/  &quot;Optional Title Here&quot;</div><div class=\"line\">2. [foo]: http://example.com/  &apos;Optional Title Here&apos;</div><div class=\"line\">3. [foo]: http://example.com/  (Optional Title Here)</div><div class=\"line\">请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</div><div class=\"line\">链接网址也可以用尖括号包起来：</div><div class=\"line\">* [id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"六-粗体与斜体\"><a href=\"#六-粗体与斜体\" class=\"headerlink\" title=\"六.粗体与斜体\"></a>六.粗体与斜体</h2><ol>\n<li>这是 <strong>粗体</strong></li>\n<li>这是 <em>斜体</em></li>\n<li>这是 常态</li>\n</ol>\n<h2 id=\"七-表格\"><a href=\"#七-表格\" class=\"headerlink\" title=\"七.表格\"></a>七.表格</h2><table>\n<thead>\n<tr>\n<th>name(巨左对齐)</th>\n<th style=\"text-align:center\">age(居中对齐)</th>\n<th style=\"text-align:right\">sex(居右对齐)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ly</td>\n<td style=\"text-align:center\">28</td>\n<td style=\"text-align:right\">男</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"八-代码框\"><a href=\"#八-代码框\" class=\"headerlink\" title=\"八.代码框\"></a>八.代码框</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (UIImage *)imageFromColor:(UIColor *)color frame:(CGRect)rect</div><div class=\"line\">&#123;</div><div class=\"line\">    UIGraphicsBeginImageContext(rect.size);</div><div class=\"line\">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class=\"line\">    CGContextSetFillColorWithColor(context, [color CGColor]);</div><div class=\"line\">    CGContextFillRect(context, rect);</div><div class=\"line\">    UIImage *img = UIGraphicsGetImageFromCurrentImageContext();</div><div class=\"line\">    UIGraphicsEndImageContext();</div><div class=\"line\">    return img;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 标题一</div><div class=\"line\">## 标题二</div><div class=\"line\">### 标题三</div></pre></td></tr></table></figure>\n<h2 id=\"九-分割线\"><a href=\"#九-分割线\" class=\"headerlink\" title=\"九.分割线\"></a>九.分割线</h2><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"*\"></a><strong><strong><strong><em>*</em></strong></strong></strong></h2><h2 id=\"十-区域引用\"><a href=\"#十-区域引用\" class=\"headerlink\" title=\"十.区域引用\"></a>十.区域引用</h2><blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>\n</blockquote>\n"},{"date":"2015-12-25T07:41:00.000Z","status":"public","title":"Objective-C代码混淆","_content":"\n### 前言\n本方法参考CSDN博主 念茜[iOS安全攻防（二十三）：Objective-C代码混淆](http://blog.csdn.net/yiyaaixuexi/article/details/29201699),为深度理解，自己按照步骤做了一遍。并写下收获和体会。\n\n#### 一、为什么需要对工程代码进行混淆\n这里我不多说了，可以参考[念茜](http://my.csdn.net/yiyaaixuexi)的iOS安全攻防系列博客。\n\n#### 二、混淆代码原理\n操作过程中，我使用的是 #define ,将工程中的类中所有的方法名替换成随机字符串，当然，字符串需保证不是关键字。这里的替换方法是由博主 念茜 写的一段脚本。这里就不贴代码了，可以直接去她的[iOS安全攻防（二十三）：Objective-C代码混淆](http://blog.csdn.net/yiyaaixuexi/article/details/29201699)博文中参阅。\n\n#### 三、操作步骤\n1.将混淆脚本 confuse.sh 放到工程目录下。\n2.添加头文件```\"codeObfuscation.h\"```到pch文件中最前面的位置\n```objective-c\n#ifdef __OBJC__ \n    //添加混淆作用的头文件（这个文件名是脚本confuse.sh中定义的）  \n    #import \"codeObfuscation.h\"  \n    ....\n#endif \n```\n3.配置 Build Phase，在工程 Build Phase 中添加执行脚本操作，执行 confuse.sh 脚本，如图：\n![](/images/48D4E311-9DA2-4A18-A16C-BAF46CAEEE5C.jpg)\n4.创建函数名列表 func.list ，写入待混淆的函数名。\n5.跑起工程。\n\n#### 四、一路走来，遇到的问题\n1. `confuse.sh: No such file or directory`\n解决办法：先看看你Build Phases中的Run Script中写的路径是否跟你confuse.sh的路径一致。\n2. `confuse.sh: Permission denied`\n解决办法:chmod a+x confuse.sh  //对confuse.sh文件增加可执行权限\n3. `func.list: No such file or directory`\n解决办法:确保func.list文件与confuse.sh文件在同一个文件夹里面，然后修改`念茜`的脚本文件：`STRING_SYMBOL_FILE=\"func.list\"`为`STRING_SYMBOL_FILE=\"$PROJECT_DIR/$PROJECT_NAME/func.list\"`，其实就是改为相对路径，注意这个路径是否对应你的func.list文件路径。\n\n#### 五、享受一下成果\n1.首先我func.list中写的要混淆的函数名如下图:\n![](/images/0A2DD61D-5C75-4F36-B7A5-A01A14D75040.jpg)\n2.使用class-dump查看分析app头文件\nclass-dump命令:\n```swift\nclass-dump -H ....demo.app -o ..../dump-head\n```\n-H后面是app文件路径，-o后面导出头文件的文件夹\n导出头文件后，查找func.list中替换的类中的函数名如下图:\n![](/images/DEF7F821-515F-467E-B1EE-1123F1CC2F4B.jpg)\n这样下来，就算拿到分析出头文件，也不太好判断方法是干什么用的。从而又一步提高了app的安全性。\n\n#### 六、建议\n如果一个是一个庞端的工程，我想大家都会觉得，自己还需要一个一个将方法名列入到func.list文件中，这可不是一个小的工作量，这里我看到有人优化了这个操作([详见](http://blog.csdn.net/yxh265/article/details/38438959))，无需自己亲手去填充func.list文件，自动将工程中的所有.m对应的.h文件的函数名导入到func.list，确实是个不做的做法，但我在使用过程中，跑到到自动导入的那段代码，总会遇到奔溃。还望作者能多测试一下。","source":"_posts/Objective-C代码混淆.md","raw":"---\ndate: 2015-12-25 15:41\nstatus: public\ntitle: Objective-C代码混淆\ncategory: 高效篇\n---\n\n### 前言\n本方法参考CSDN博主 念茜[iOS安全攻防（二十三）：Objective-C代码混淆](http://blog.csdn.net/yiyaaixuexi/article/details/29201699),为深度理解，自己按照步骤做了一遍。并写下收获和体会。\n\n#### 一、为什么需要对工程代码进行混淆\n这里我不多说了，可以参考[念茜](http://my.csdn.net/yiyaaixuexi)的iOS安全攻防系列博客。\n\n#### 二、混淆代码原理\n操作过程中，我使用的是 #define ,将工程中的类中所有的方法名替换成随机字符串，当然，字符串需保证不是关键字。这里的替换方法是由博主 念茜 写的一段脚本。这里就不贴代码了，可以直接去她的[iOS安全攻防（二十三）：Objective-C代码混淆](http://blog.csdn.net/yiyaaixuexi/article/details/29201699)博文中参阅。\n\n#### 三、操作步骤\n1.将混淆脚本 confuse.sh 放到工程目录下。\n2.添加头文件```\"codeObfuscation.h\"```到pch文件中最前面的位置\n```objective-c\n#ifdef __OBJC__ \n    //添加混淆作用的头文件（这个文件名是脚本confuse.sh中定义的）  \n    #import \"codeObfuscation.h\"  \n    ....\n#endif \n```\n3.配置 Build Phase，在工程 Build Phase 中添加执行脚本操作，执行 confuse.sh 脚本，如图：\n![](/images/48D4E311-9DA2-4A18-A16C-BAF46CAEEE5C.jpg)\n4.创建函数名列表 func.list ，写入待混淆的函数名。\n5.跑起工程。\n\n#### 四、一路走来，遇到的问题\n1. `confuse.sh: No such file or directory`\n解决办法：先看看你Build Phases中的Run Script中写的路径是否跟你confuse.sh的路径一致。\n2. `confuse.sh: Permission denied`\n解决办法:chmod a+x confuse.sh  //对confuse.sh文件增加可执行权限\n3. `func.list: No such file or directory`\n解决办法:确保func.list文件与confuse.sh文件在同一个文件夹里面，然后修改`念茜`的脚本文件：`STRING_SYMBOL_FILE=\"func.list\"`为`STRING_SYMBOL_FILE=\"$PROJECT_DIR/$PROJECT_NAME/func.list\"`，其实就是改为相对路径，注意这个路径是否对应你的func.list文件路径。\n\n#### 五、享受一下成果\n1.首先我func.list中写的要混淆的函数名如下图:\n![](/images/0A2DD61D-5C75-4F36-B7A5-A01A14D75040.jpg)\n2.使用class-dump查看分析app头文件\nclass-dump命令:\n```swift\nclass-dump -H ....demo.app -o ..../dump-head\n```\n-H后面是app文件路径，-o后面导出头文件的文件夹\n导出头文件后，查找func.list中替换的类中的函数名如下图:\n![](/images/DEF7F821-515F-467E-B1EE-1123F1CC2F4B.jpg)\n这样下来，就算拿到分析出头文件，也不太好判断方法是干什么用的。从而又一步提高了app的安全性。\n\n#### 六、建议\n如果一个是一个庞端的工程，我想大家都会觉得，自己还需要一个一个将方法名列入到func.list文件中，这可不是一个小的工作量，这里我看到有人优化了这个操作([详见](http://blog.csdn.net/yxh265/article/details/38438959))，无需自己亲手去填充func.list文件，自动将工程中的所有.m对应的.h文件的函数名导入到func.list，确实是个不做的做法，但我在使用过程中，跑到到自动导入的那段代码，总会遇到奔溃。还望作者能多测试一下。","slug":"Objective-C代码混淆","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7foc1000ezn3mkfhy9zr4","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>本方法参考CSDN博主 念茜<a href=\"http://blog.csdn.net/yiyaaixuexi/article/details/29201699\" target=\"_blank\" rel=\"external\">iOS安全攻防（二十三）：Objective-C代码混淆</a>,为深度理解，自己按照步骤做了一遍。并写下收获和体会。</p>\n<h4 id=\"一、为什么需要对工程代码进行混淆\"><a href=\"#一、为什么需要对工程代码进行混淆\" class=\"headerlink\" title=\"一、为什么需要对工程代码进行混淆\"></a>一、为什么需要对工程代码进行混淆</h4><p>这里我不多说了，可以参考<a href=\"http://my.csdn.net/yiyaaixuexi\" target=\"_blank\" rel=\"external\">念茜</a>的iOS安全攻防系列博客。</p>\n<h4 id=\"二、混淆代码原理\"><a href=\"#二、混淆代码原理\" class=\"headerlink\" title=\"二、混淆代码原理\"></a>二、混淆代码原理</h4><p>操作过程中，我使用的是 #define ,将工程中的类中所有的方法名替换成随机字符串，当然，字符串需保证不是关键字。这里的替换方法是由博主 念茜 写的一段脚本。这里就不贴代码了，可以直接去她的<a href=\"http://blog.csdn.net/yiyaaixuexi/article/details/29201699\" target=\"_blank\" rel=\"external\">iOS安全攻防（二十三）：Objective-C代码混淆</a>博文中参阅。</p>\n<h4 id=\"三、操作步骤\"><a href=\"#三、操作步骤\" class=\"headerlink\" title=\"三、操作步骤\"></a>三、操作步骤</h4><p>1.将混淆脚本 confuse.sh 放到工程目录下。<br>2.添加头文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">```objective-c</div><div class=\"line\">#ifdef __OBJC__ </div><div class=\"line\">    //添加混淆作用的头文件（这个文件名是脚本confuse.sh中定义的）  </div><div class=\"line\">    #import &quot;codeObfuscation.h&quot;  </div><div class=\"line\">    ....</div><div class=\"line\">#endif</div></pre></td></tr></table></figure></p>\n<p>3.配置 Build Phase，在工程 Build Phase 中添加执行脚本操作，执行 confuse.sh 脚本，如图：<br><img src=\"/images/48D4E311-9DA2-4A18-A16C-BAF46CAEEE5C.jpg\" alt=\"\"><br>4.创建函数名列表 func.list ，写入待混淆的函数名。<br>5.跑起工程。</p>\n<h4 id=\"四、一路走来，遇到的问题\"><a href=\"#四、一路走来，遇到的问题\" class=\"headerlink\" title=\"四、一路走来，遇到的问题\"></a>四、一路走来，遇到的问题</h4><ol>\n<li><code>confuse.sh: No such file or directory</code><br>解决办法：先看看你Build Phases中的Run Script中写的路径是否跟你confuse.sh的路径一致。</li>\n<li><code>confuse.sh: Permission denied</code><br>解决办法:chmod a+x confuse.sh  //对confuse.sh文件增加可执行权限</li>\n<li><code>func.list: No such file or directory</code><br>解决办法:确保func.list文件与confuse.sh文件在同一个文件夹里面，然后修改<code>念茜</code>的脚本文件：<code>STRING_SYMBOL_FILE=&quot;func.list&quot;</code>为<code>STRING_SYMBOL_FILE=&quot;$PROJECT_DIR/$PROJECT_NAME/func.list&quot;</code>，其实就是改为相对路径，注意这个路径是否对应你的func.list文件路径。</li>\n</ol>\n<h4 id=\"五、享受一下成果\"><a href=\"#五、享受一下成果\" class=\"headerlink\" title=\"五、享受一下成果\"></a>五、享受一下成果</h4><p>1.首先我func.list中写的要混淆的函数名如下图:<br><img src=\"/images/0A2DD61D-5C75-4F36-B7A5-A01A14D75040.jpg\" alt=\"\"><br>2.使用class-dump查看分析app头文件<br>class-dump命令:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>-<span class=\"title\">dump</span> -<span class=\"title\">H</span> ....<span class=\"title\">demo</span>.<span class=\"title\">app</span> -<span class=\"title\">o</span> ..../<span class=\"title\">dump</span>-<span class=\"title\">head</span></span></div></pre></td></tr></table></figure></p>\n<p>-H后面是app文件路径，-o后面导出头文件的文件夹<br>导出头文件后，查找func.list中替换的类中的函数名如下图:<br><img src=\"/images/DEF7F821-515F-467E-B1EE-1123F1CC2F4B.jpg\" alt=\"\"><br>这样下来，就算拿到分析出头文件，也不太好判断方法是干什么用的。从而又一步提高了app的安全性。</p>\n<h4 id=\"六、建议\"><a href=\"#六、建议\" class=\"headerlink\" title=\"六、建议\"></a>六、建议</h4><p>如果一个是一个庞端的工程，我想大家都会觉得，自己还需要一个一个将方法名列入到func.list文件中，这可不是一个小的工作量，这里我看到有人优化了这个操作(<a href=\"http://blog.csdn.net/yxh265/article/details/38438959\" target=\"_blank\" rel=\"external\">详见</a>)，无需自己亲手去填充func.list文件，自动将工程中的所有.m对应的.h文件的函数名导入到func.list，确实是个不做的做法，但我在使用过程中，跑到到自动导入的那段代码，总会遇到奔溃。还望作者能多测试一下。</p>\n","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>本方法参考CSDN博主 念茜<a href=\"http://blog.csdn.net/yiyaaixuexi/article/details/29201699\">iOS安全攻防（二十三）：Objective-C代码混淆</a>,为深度理解，自己按照步骤做了一遍。并写下收获和体会。</p>\n<h4 id=\"一、为什么需要对工程代码进行混淆\"><a href=\"#一、为什么需要对工程代码进行混淆\" class=\"headerlink\" title=\"一、为什么需要对工程代码进行混淆\"></a>一、为什么需要对工程代码进行混淆</h4><p>这里我不多说了，可以参考<a href=\"http://my.csdn.net/yiyaaixuexi\">念茜</a>的iOS安全攻防系列博客。</p>\n<h4 id=\"二、混淆代码原理\"><a href=\"#二、混淆代码原理\" class=\"headerlink\" title=\"二、混淆代码原理\"></a>二、混淆代码原理</h4><p>操作过程中，我使用的是 #define ,将工程中的类中所有的方法名替换成随机字符串，当然，字符串需保证不是关键字。这里的替换方法是由博主 念茜 写的一段脚本。这里就不贴代码了，可以直接去她的<a href=\"http://blog.csdn.net/yiyaaixuexi/article/details/29201699\">iOS安全攻防（二十三）：Objective-C代码混淆</a>博文中参阅。</p>\n<h4 id=\"三、操作步骤\"><a href=\"#三、操作步骤\" class=\"headerlink\" title=\"三、操作步骤\"></a>三、操作步骤</h4><p>1.将混淆脚本 confuse.sh 放到工程目录下。<br>2.添加头文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">```objective-c</div><div class=\"line\">#ifdef __OBJC__ </div><div class=\"line\">    //添加混淆作用的头文件（这个文件名是脚本confuse.sh中定义的）  </div><div class=\"line\">    #import &quot;codeObfuscation.h&quot;  </div><div class=\"line\">    ....</div><div class=\"line\">#endif</div></pre></td></tr></table></figure></p>\n<p>3.配置 Build Phase，在工程 Build Phase 中添加执行脚本操作，执行 confuse.sh 脚本，如图：<br><img src=\"/images/48D4E311-9DA2-4A18-A16C-BAF46CAEEE5C.jpg\" alt=\"\"><br>4.创建函数名列表 func.list ，写入待混淆的函数名。<br>5.跑起工程。</p>\n<h4 id=\"四、一路走来，遇到的问题\"><a href=\"#四、一路走来，遇到的问题\" class=\"headerlink\" title=\"四、一路走来，遇到的问题\"></a>四、一路走来，遇到的问题</h4><ol>\n<li><code>confuse.sh: No such file or directory</code><br>解决办法：先看看你Build Phases中的Run Script中写的路径是否跟你confuse.sh的路径一致。</li>\n<li><code>confuse.sh: Permission denied</code><br>解决办法:chmod a+x confuse.sh  //对confuse.sh文件增加可执行权限</li>\n<li><code>func.list: No such file or directory</code><br>解决办法:确保func.list文件与confuse.sh文件在同一个文件夹里面，然后修改<code>念茜</code>的脚本文件：<code>STRING_SYMBOL_FILE=&quot;func.list&quot;</code>为<code>STRING_SYMBOL_FILE=&quot;$PROJECT_DIR/$PROJECT_NAME/func.list&quot;</code>，其实就是改为相对路径，注意这个路径是否对应你的func.list文件路径。</li>\n</ol>\n<h4 id=\"五、享受一下成果\"><a href=\"#五、享受一下成果\" class=\"headerlink\" title=\"五、享受一下成果\"></a>五、享受一下成果</h4><p>1.首先我func.list中写的要混淆的函数名如下图:<br><img src=\"/images/0A2DD61D-5C75-4F36-B7A5-A01A14D75040.jpg\" alt=\"\"><br>2.使用class-dump查看分析app头文件<br>class-dump命令:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span>-<span class=\"title\">dump</span> -<span class=\"title\">H</span> ....<span class=\"title\">demo</span>.<span class=\"title\">app</span> -<span class=\"title\">o</span> ..../<span class=\"title\">dump</span>-<span class=\"title\">head</span></span></div></pre></td></tr></table></figure></p>\n<p>-H后面是app文件路径，-o后面导出头文件的文件夹<br>导出头文件后，查找func.list中替换的类中的函数名如下图:<br><img src=\"/images/DEF7F821-515F-467E-B1EE-1123F1CC2F4B.jpg\" alt=\"\"><br>这样下来，就算拿到分析出头文件，也不太好判断方法是干什么用的。从而又一步提高了app的安全性。</p>\n<h4 id=\"六、建议\"><a href=\"#六、建议\" class=\"headerlink\" title=\"六、建议\"></a>六、建议</h4><p>如果一个是一个庞端的工程，我想大家都会觉得，自己还需要一个一个将方法名列入到func.list文件中，这可不是一个小的工作量，这里我看到有人优化了这个操作(<a href=\"http://blog.csdn.net/yxh265/article/details/38438959\">详见</a>)，无需自己亲手去填充func.list文件，自动将工程中的所有.m对应的.h文件的函数名导入到func.list，确实是个不做的做法，但我在使用过程中，跑到到自动导入的那段代码，总会遇到奔溃。还望作者能多测试一下。</p>\n"},{"date":"2016-07-06T01:39:00.000Z","status":"public","title":"ReactiveCocoa学习","_content":"\n## 一、signal的释放问题\n当signal作为local变量时，如果没有被subscribe，那么方法执行完后，该变量会被dealloc。但如果signal有被subscribe，那么subscriber会持有该signal，直到signal sendCompleted或sendError时，才会解除持有关系，signal才会被dealloc。","source":"_posts/ReactiveCocoa学习.md","raw":"---\ndate: 2016-07-06 09:39\nstatus: public\ntitle: ReactiveCocoa学习\ncategory: 框架\n---\n\n## 一、signal的释放问题\n当signal作为local变量时，如果没有被subscribe，那么方法执行完后，该变量会被dealloc。但如果signal有被subscribe，那么subscriber会持有该signal，直到signal sendCompleted或sendError时，才会解除持有关系，signal才会被dealloc。","slug":"ReactiveCocoa学习","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7foc3000fzn3msgqm1a20","content":"<h2 id=\"一、signal的释放问题\"><a href=\"#一、signal的释放问题\" class=\"headerlink\" title=\"一、signal的释放问题\"></a>一、signal的释放问题</h2><p>当signal作为local变量时，如果没有被subscribe，那么方法执行完后，该变量会被dealloc。但如果signal有被subscribe，那么subscriber会持有该signal，直到signal sendCompleted或sendError时，才会解除持有关系，signal才会被dealloc。</p>\n","excerpt":"","more":"<h2 id=\"一、signal的释放问题\"><a href=\"#一、signal的释放问题\" class=\"headerlink\" title=\"一、signal的释放问题\"></a>一、signal的释放问题</h2><p>当signal作为local变量时，如果没有被subscribe，那么方法执行完后，该变量会被dealloc。但如果signal有被subscribe，那么subscriber会持有该signal，直到signal sendCompleted或sendError时，才会解除持有关系，signal才会被dealloc。</p>\n"},{"date":"2015-09-08T06:18:00.000Z","status":"public","title":"iOS学习笔记","_content":"\nf## 一.LLDB的使用\n1. po: 对一个对象的打印，即“print-object”.\n1. p: 对一个简单类型的打印.\n1. recursiveDescription: UIView私有方法，可以打印更具体更详细的布局结构.比如 :\n``` objective-c\npo [view recursiveDescription]\n<UIView: 0x178199640; frame = (0 64; 320 568); userInteractionEnabled = NO; tag = 99; layer = <CALayer: 0x178421480>>\n   | <UILabel: 0x13ce20170; frame = (90 50; 140 23.86); text = '搜索更多的内容'; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x17008f190>>\n   | <CALayer: 0x170034e60> (layer)\n```\n这样你能更清晰的知道view的布局结构，它下面包含了一个UILabel和一个CALayer。利用这个私有方法，有时候确实能解决一些难题，曾经在做一个搜索功能的时候，遇到一些瓶颈，使用这个方法让我找到了解决问题的地方。在[这篇文章](http://lyboy.farbox.com/post/uisearchbarde-shi-yong)中有相关提到。[源代码][mark_SearchBar]\n[mark_SearchBar]: https://github.com/lyroger/SearchBarPro (SearchBarPro)\n## 二.数据库相关\n1. 当你有多条数据插入的时候，但又不清楚数据库是否已经存在该记录，怕导致重复添加数据，你首先想到的可能就是先查询一次，然后判断是否存在相同记录，如果不存在则添加，存在则更新。但这样的操作并不适用于数据量稍微多一点的场合，现在有一种方法可以有效的解决这个问题适用,如下代码:\n```objective-c\nreplace into table (a,b) values ('1','2')\n```\n使用这条sql语句的有效性的前提是table中必须必须有唯一标示 UNIQUE，\n```objective-c\nCREATE TABLE IF NOT EXISTS TestTable ('a' VARCHAR PRIMARY KEY NOT NULL UNIQUE, 'b' VARCHAR)\n```\n定义好a为唯一标示后，上面的replace into 才会起效。\n如果我的数据中一个字段并不能确定唯一性，那需要加约束；\n```objective-c\nCREATE TABLE IF NOT EXISTS TestTable ('a' VARCHAR PRIMARY KEY NOT NULL UNIQUE, 'b' VARCHAR,'c'VARCHAR,UNIQUE(b,c) ON CONFLICT REPLACE)\n```\n这个时候，如果你插入的数据b，c有跟以前记录中都相同的话，那么他只会做更新操作，并不会做插入操作。这便是replace into 语句的好处。避免重复。\n## 三.Auto Layout\n> Auto Layout + UITableView-FDTemplateLayoutCell + Masonry\n## 四.时间差\n```objective-c\n    mach_timebase_info_data_t info;\n    if (mach_timebase_info(&info) != KERN_SUCCESS) return -1.0;\n    uint64_t start = mach_absolute_time ();\n    // 这里写入需要统计时间的执行代码\n    // ......\n    uint64_t end = mach_absolute_time ();\n    uint64_t elapsed = end - start;\n    uint64_t nanos = elapsed * info.numer / info.denom;\n    return (CGFloat)nanos / NSEC_PER_SEC;\n```\n## 五.pod使用提高篇\n#### pod更新:\n更新新的依赖库时，使用pod update 命令很多时候都卡在了Analyzing dependencies不动，使用这个命令会升级CocoaPods的spec仓库，所以跟新非常慢，要等很久。\n在网上搜索解决此方法的命令\n```\npod update --verbose --no-repo-update\n```\n#### 通过vim命令创建文件\n1：cd到相应文件夹\n2：输入vim Podfile\n3:这时已经创建了文件，可以在dos中输入文件内容，\nplatform :ios, '7.0'\npod 'Masonry'\n4:按Esc键，然后输入\":\"，然后输入\"wq\",Podfile文件及内容创建完毕\n## 六.iOS中使用的锁\n1. @synchronized 关键字加锁\n2. NSLock 对象锁\n3. NSCondition\n4. NSConditionLock 条件锁\n5. NSRecursiveLock 递归锁\n6. pthread_mutex 互斥锁（C语言）\n7. dispatch_semaphore 信号量实现加锁（GCD）\n8. OSSpinLock\n\n## 七.UIViewController页面内容适配\n在滚动视图中 设置\nautomaticallyAdjustsScrollViewInsets属性可以控制滚动内容是否会在bar下方显示。\n## 八.使用终端统计项目代码总行数\n1、打开终端\n2、cd 进入项目根目录\n3、输入命令 find . \"(\" -name \"*.m\" -or -name \"*.mm\" -or -name \"*.cpp\" -or -name \"*.h\" -or -name \"*.rss\" \")\" -print | xargs wc -l\n4、回车","source":"_posts/iOS.md","raw":"---\ndate: 2015-09-08 14:18\nstatus: public\ntitle: iOS学习笔记\ncategory: 基础篇\n---\n\nf## 一.LLDB的使用\n1. po: 对一个对象的打印，即“print-object”.\n1. p: 对一个简单类型的打印.\n1. recursiveDescription: UIView私有方法，可以打印更具体更详细的布局结构.比如 :\n``` objective-c\npo [view recursiveDescription]\n<UIView: 0x178199640; frame = (0 64; 320 568); userInteractionEnabled = NO; tag = 99; layer = <CALayer: 0x178421480>>\n   | <UILabel: 0x13ce20170; frame = (90 50; 140 23.86); text = '搜索更多的内容'; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x17008f190>>\n   | <CALayer: 0x170034e60> (layer)\n```\n这样你能更清晰的知道view的布局结构，它下面包含了一个UILabel和一个CALayer。利用这个私有方法，有时候确实能解决一些难题，曾经在做一个搜索功能的时候，遇到一些瓶颈，使用这个方法让我找到了解决问题的地方。在[这篇文章](http://lyboy.farbox.com/post/uisearchbarde-shi-yong)中有相关提到。[源代码][mark_SearchBar]\n[mark_SearchBar]: https://github.com/lyroger/SearchBarPro (SearchBarPro)\n## 二.数据库相关\n1. 当你有多条数据插入的时候，但又不清楚数据库是否已经存在该记录，怕导致重复添加数据，你首先想到的可能就是先查询一次，然后判断是否存在相同记录，如果不存在则添加，存在则更新。但这样的操作并不适用于数据量稍微多一点的场合，现在有一种方法可以有效的解决这个问题适用,如下代码:\n```objective-c\nreplace into table (a,b) values ('1','2')\n```\n使用这条sql语句的有效性的前提是table中必须必须有唯一标示 UNIQUE，\n```objective-c\nCREATE TABLE IF NOT EXISTS TestTable ('a' VARCHAR PRIMARY KEY NOT NULL UNIQUE, 'b' VARCHAR)\n```\n定义好a为唯一标示后，上面的replace into 才会起效。\n如果我的数据中一个字段并不能确定唯一性，那需要加约束；\n```objective-c\nCREATE TABLE IF NOT EXISTS TestTable ('a' VARCHAR PRIMARY KEY NOT NULL UNIQUE, 'b' VARCHAR,'c'VARCHAR,UNIQUE(b,c) ON CONFLICT REPLACE)\n```\n这个时候，如果你插入的数据b，c有跟以前记录中都相同的话，那么他只会做更新操作，并不会做插入操作。这便是replace into 语句的好处。避免重复。\n## 三.Auto Layout\n> Auto Layout + UITableView-FDTemplateLayoutCell + Masonry\n## 四.时间差\n```objective-c\n    mach_timebase_info_data_t info;\n    if (mach_timebase_info(&info) != KERN_SUCCESS) return -1.0;\n    uint64_t start = mach_absolute_time ();\n    // 这里写入需要统计时间的执行代码\n    // ......\n    uint64_t end = mach_absolute_time ();\n    uint64_t elapsed = end - start;\n    uint64_t nanos = elapsed * info.numer / info.denom;\n    return (CGFloat)nanos / NSEC_PER_SEC;\n```\n## 五.pod使用提高篇\n#### pod更新:\n更新新的依赖库时，使用pod update 命令很多时候都卡在了Analyzing dependencies不动，使用这个命令会升级CocoaPods的spec仓库，所以跟新非常慢，要等很久。\n在网上搜索解决此方法的命令\n```\npod update --verbose --no-repo-update\n```\n#### 通过vim命令创建文件\n1：cd到相应文件夹\n2：输入vim Podfile\n3:这时已经创建了文件，可以在dos中输入文件内容，\nplatform :ios, '7.0'\npod 'Masonry'\n4:按Esc键，然后输入\":\"，然后输入\"wq\",Podfile文件及内容创建完毕\n## 六.iOS中使用的锁\n1. @synchronized 关键字加锁\n2. NSLock 对象锁\n3. NSCondition\n4. NSConditionLock 条件锁\n5. NSRecursiveLock 递归锁\n6. pthread_mutex 互斥锁（C语言）\n7. dispatch_semaphore 信号量实现加锁（GCD）\n8. OSSpinLock\n\n## 七.UIViewController页面内容适配\n在滚动视图中 设置\nautomaticallyAdjustsScrollViewInsets属性可以控制滚动内容是否会在bar下方显示。\n## 八.使用终端统计项目代码总行数\n1、打开终端\n2、cd 进入项目根目录\n3、输入命令 find . \"(\" -name \"*.m\" -or -name \"*.mm\" -or -name \"*.cpp\" -or -name \"*.h\" -or -name \"*.rss\" \")\" -print | xargs wc -l\n4、回车","slug":"iOS","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7foc7000izn3mz6bc0uqj","content":"<p>f## 一.LLDB的使用</p>\n<ol>\n<li>po: 对一个对象的打印，即“print-object”.</li>\n<li>p: 对一个简单类型的打印.</li>\n<li>recursiveDescription: UIView私有方法，可以打印更具体更详细的布局结构.比如 :<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">po [view recursiveDescription]</div><div class=\"line\">&lt;UIView: 0x178199640; frame = (0 64; 320 568); userInteractionEnabled = NO; tag = 99; layer = &lt;CALayer: 0x178421480&gt;&gt;</div><div class=\"line\">   | &lt;UILabel: 0x13ce20170; frame = (90 50; 140 23.86); text = &apos;搜索更多的内容&apos;; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x17008f190&gt;&gt;</div><div class=\"line\">   | &lt;CALayer: 0x170034e60&gt; (layer)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样你能更清晰的知道view的布局结构，它下面包含了一个UILabel和一个CALayer。利用这个私有方法，有时候确实能解决一些难题，曾经在做一个搜索功能的时候，遇到一些瓶颈，使用这个方法让我找到了解决问题的地方。在<a href=\"http://lyboy.farbox.com/post/uisearchbarde-shi-yong\" target=\"_blank\" rel=\"external\">这篇文章</a>中有相关提到。<a href=\"https://github.com/lyroger/SearchBarPro\" title=\"SearchBarPro\" target=\"_blank\" rel=\"external\">源代码</a></p>\n<h2 id=\"二-数据库相关\"><a href=\"#二-数据库相关\" class=\"headerlink\" title=\"二.数据库相关\"></a>二.数据库相关</h2><ol>\n<li>当你有多条数据插入的时候，但又不清楚数据库是否已经存在该记录，怕导致重复添加数据，你首先想到的可能就是先查询一次，然后判断是否存在相同记录，如果不存在则添加，存在则更新。但这样的操作并不适用于数据量稍微多一点的场合，现在有一种方法可以有效的解决这个问题适用,如下代码:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">replace into table (a,b) values (&apos;1&apos;,&apos;2&apos;)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>使用这条sql语句的有效性的前提是table中必须必须有唯一标示 UNIQUE，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE TABLE IF NOT EXISTS TestTable (&apos;a&apos; VARCHAR PRIMARY KEY NOT NULL UNIQUE, &apos;b&apos; VARCHAR)</div></pre></td></tr></table></figure></p>\n<p>定义好a为唯一标示后，上面的replace into 才会起效。<br>如果我的数据中一个字段并不能确定唯一性，那需要加约束；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE TABLE IF NOT EXISTS TestTable (&apos;a&apos; VARCHAR PRIMARY KEY NOT NULL UNIQUE, &apos;b&apos; VARCHAR,&apos;c&apos;VARCHAR,UNIQUE(b,c) ON CONFLICT REPLACE)</div></pre></td></tr></table></figure></p>\n<p>这个时候，如果你插入的数据b，c有跟以前记录中都相同的话，那么他只会做更新操作，并不会做插入操作。这便是replace into 语句的好处。避免重复。</p>\n<h2 id=\"三-Auto-Layout\"><a href=\"#三-Auto-Layout\" class=\"headerlink\" title=\"三.Auto Layout\"></a>三.Auto Layout</h2><blockquote>\n<p>Auto Layout + UITableView-FDTemplateLayoutCell + Masonry</p>\n<h2 id=\"四-时间差\"><a href=\"#四-时间差\" class=\"headerlink\" title=\"四.时间差\"></a>四.时间差</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">mach_timebase_info_data_t info;</div><div class=\"line\">if (mach_timebase_info(&amp;info) != KERN_SUCCESS) return -1.0;</div><div class=\"line\">uint64_t start = mach_absolute_time ();</div><div class=\"line\">// 这里写入需要统计时间的执行代码</div><div class=\"line\">// ......</div><div class=\"line\">uint64_t end = mach_absolute_time ();</div><div class=\"line\">uint64_t elapsed = end - start;</div><div class=\"line\">uint64_t nanos = elapsed * info.numer / info.denom;</div><div class=\"line\">return (CGFloat)nanos / NSEC_PER_SEC;</div></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"五-pod使用提高篇\"><a href=\"#五-pod使用提高篇\" class=\"headerlink\" title=\"五.pod使用提高篇\"></a>五.pod使用提高篇</h2><h4 id=\"pod更新\"><a href=\"#pod更新\" class=\"headerlink\" title=\"pod更新:\"></a>pod更新:</h4><p>更新新的依赖库时，使用pod update 命令很多时候都卡在了Analyzing dependencies不动，使用这个命令会升级CocoaPods的spec仓库，所以跟新非常慢，要等很久。<br>在网上搜索解决此方法的命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod update --verbose --no-repo-update</div></pre></td></tr></table></figure></p>\n<h4 id=\"通过vim命令创建文件\"><a href=\"#通过vim命令创建文件\" class=\"headerlink\" title=\"通过vim命令创建文件\"></a>通过vim命令创建文件</h4><p>1：cd到相应文件夹<br>2：输入vim Podfile<br>3:这时已经创建了文件，可以在dos中输入文件内容，<br>platform :ios, ‘7.0’<br>pod ‘Masonry’<br>4:按Esc键，然后输入”:”，然后输入”wq”,Podfile文件及内容创建完毕</p>\n<h2 id=\"六-iOS中使用的锁\"><a href=\"#六-iOS中使用的锁\" class=\"headerlink\" title=\"六.iOS中使用的锁\"></a>六.iOS中使用的锁</h2><ol>\n<li>@synchronized 关键字加锁</li>\n<li>NSLock 对象锁</li>\n<li>NSCondition</li>\n<li>NSConditionLock 条件锁</li>\n<li>NSRecursiveLock 递归锁</li>\n<li>pthread_mutex 互斥锁（C语言）</li>\n<li>dispatch_semaphore 信号量实现加锁（GCD）</li>\n<li>OSSpinLock</li>\n</ol>\n<h2 id=\"七-UIViewController页面内容适配\"><a href=\"#七-UIViewController页面内容适配\" class=\"headerlink\" title=\"七.UIViewController页面内容适配\"></a>七.UIViewController页面内容适配</h2><p>在滚动视图中 设置<br>automaticallyAdjustsScrollViewInsets属性可以控制滚动内容是否会在bar下方显示。</p>\n<h2 id=\"八-使用终端统计项目代码总行数\"><a href=\"#八-使用终端统计项目代码总行数\" class=\"headerlink\" title=\"八.使用终端统计项目代码总行数\"></a>八.使用终端统计项目代码总行数</h2><p>1、打开终端<br>2、cd 进入项目根目录<br>3、输入命令 find . “(“ -name “<em>.m” -or -name “</em>.mm” -or -name “<em>.cpp” -or -name “</em>.h” -or -name “*.rss” “)” -print | xargs wc -l<br>4、回车</p>\n","excerpt":"","more":"<p>f## 一.LLDB的使用</p>\n<ol>\n<li>po: 对一个对象的打印，即“print-object”.</li>\n<li>p: 对一个简单类型的打印.</li>\n<li>recursiveDescription: UIView私有方法，可以打印更具体更详细的布局结构.比如 :<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">po [view recursiveDescription]</div><div class=\"line\">&lt;UIView: 0x178199640; frame = (0 64; 320 568); userInteractionEnabled = NO; tag = 99; layer = &lt;CALayer: 0x178421480&gt;&gt;</div><div class=\"line\">   | &lt;UILabel: 0x13ce20170; frame = (90 50; 140 23.86); text = &apos;搜索更多的内容&apos;; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x17008f190&gt;&gt;</div><div class=\"line\">   | &lt;CALayer: 0x170034e60&gt; (layer)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样你能更清晰的知道view的布局结构，它下面包含了一个UILabel和一个CALayer。利用这个私有方法，有时候确实能解决一些难题，曾经在做一个搜索功能的时候，遇到一些瓶颈，使用这个方法让我找到了解决问题的地方。在<a href=\"http://lyboy.farbox.com/post/uisearchbarde-shi-yong\">这篇文章</a>中有相关提到。<a href=\"https://github.com/lyroger/SearchBarPro\" title=\"SearchBarPro\">源代码</a></p>\n<h2 id=\"二-数据库相关\"><a href=\"#二-数据库相关\" class=\"headerlink\" title=\"二.数据库相关\"></a>二.数据库相关</h2><ol>\n<li>当你有多条数据插入的时候，但又不清楚数据库是否已经存在该记录，怕导致重复添加数据，你首先想到的可能就是先查询一次，然后判断是否存在相同记录，如果不存在则添加，存在则更新。但这样的操作并不适用于数据量稍微多一点的场合，现在有一种方法可以有效的解决这个问题适用,如下代码:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">replace into table (a,b) values (&apos;1&apos;,&apos;2&apos;)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>使用这条sql语句的有效性的前提是table中必须必须有唯一标示 UNIQUE，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE TABLE IF NOT EXISTS TestTable (&apos;a&apos; VARCHAR PRIMARY KEY NOT NULL UNIQUE, &apos;b&apos; VARCHAR)</div></pre></td></tr></table></figure></p>\n<p>定义好a为唯一标示后，上面的replace into 才会起效。<br>如果我的数据中一个字段并不能确定唯一性，那需要加约束；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CREATE TABLE IF NOT EXISTS TestTable (&apos;a&apos; VARCHAR PRIMARY KEY NOT NULL UNIQUE, &apos;b&apos; VARCHAR,&apos;c&apos;VARCHAR,UNIQUE(b,c) ON CONFLICT REPLACE)</div></pre></td></tr></table></figure></p>\n<p>这个时候，如果你插入的数据b，c有跟以前记录中都相同的话，那么他只会做更新操作，并不会做插入操作。这便是replace into 语句的好处。避免重复。</p>\n<h2 id=\"三-Auto-Layout\"><a href=\"#三-Auto-Layout\" class=\"headerlink\" title=\"三.Auto Layout\"></a>三.Auto Layout</h2><blockquote>\n<p>Auto Layout + UITableView-FDTemplateLayoutCell + Masonry</p>\n<h2 id=\"四-时间差\"><a href=\"#四-时间差\" class=\"headerlink\" title=\"四.时间差\"></a>四.时间差</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">mach_timebase_info_data_t info;</div><div class=\"line\">if (mach_timebase_info(&amp;info) != KERN_SUCCESS) return -1.0;</div><div class=\"line\">uint64_t start = mach_absolute_time ();</div><div class=\"line\">// 这里写入需要统计时间的执行代码</div><div class=\"line\">// ......</div><div class=\"line\">uint64_t end = mach_absolute_time ();</div><div class=\"line\">uint64_t elapsed = end - start;</div><div class=\"line\">uint64_t nanos = elapsed * info.numer / info.denom;</div><div class=\"line\">return (CGFloat)nanos / NSEC_PER_SEC;</div></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"五-pod使用提高篇\"><a href=\"#五-pod使用提高篇\" class=\"headerlink\" title=\"五.pod使用提高篇\"></a>五.pod使用提高篇</h2><h4 id=\"pod更新\"><a href=\"#pod更新\" class=\"headerlink\" title=\"pod更新:\"></a>pod更新:</h4><p>更新新的依赖库时，使用pod update 命令很多时候都卡在了Analyzing dependencies不动，使用这个命令会升级CocoaPods的spec仓库，所以跟新非常慢，要等很久。<br>在网上搜索解决此方法的命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod update --verbose --no-repo-update</div></pre></td></tr></table></figure></p>\n<h4 id=\"通过vim命令创建文件\"><a href=\"#通过vim命令创建文件\" class=\"headerlink\" title=\"通过vim命令创建文件\"></a>通过vim命令创建文件</h4><p>1：cd到相应文件夹<br>2：输入vim Podfile<br>3:这时已经创建了文件，可以在dos中输入文件内容，<br>platform :ios, ‘7.0’<br>pod ‘Masonry’<br>4:按Esc键，然后输入”:”，然后输入”wq”,Podfile文件及内容创建完毕</p>\n<h2 id=\"六-iOS中使用的锁\"><a href=\"#六-iOS中使用的锁\" class=\"headerlink\" title=\"六.iOS中使用的锁\"></a>六.iOS中使用的锁</h2><ol>\n<li>@synchronized 关键字加锁</li>\n<li>NSLock 对象锁</li>\n<li>NSCondition</li>\n<li>NSConditionLock 条件锁</li>\n<li>NSRecursiveLock 递归锁</li>\n<li>pthread_mutex 互斥锁（C语言）</li>\n<li>dispatch_semaphore 信号量实现加锁（GCD）</li>\n<li>OSSpinLock</li>\n</ol>\n<h2 id=\"七-UIViewController页面内容适配\"><a href=\"#七-UIViewController页面内容适配\" class=\"headerlink\" title=\"七.UIViewController页面内容适配\"></a>七.UIViewController页面内容适配</h2><p>在滚动视图中 设置<br>automaticallyAdjustsScrollViewInsets属性可以控制滚动内容是否会在bar下方显示。</p>\n<h2 id=\"八-使用终端统计项目代码总行数\"><a href=\"#八-使用终端统计项目代码总行数\" class=\"headerlink\" title=\"八.使用终端统计项目代码总行数\"></a>八.使用终端统计项目代码总行数</h2><p>1、打开终端<br>2、cd 进入项目根目录<br>3、输入命令 find . “(“ -name “<em>.m” -or -name “</em>.mm” -or -name “<em>.cpp” -or -name “</em>.h” -or -name “*.rss” “)” -print | xargs wc -l<br>4、回车</p>\n"},{"title":"Hello Hexo","date":"2016-11-09T01:30:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-hexo.md","raw":"---\ntitle: Hello Hexo\ndate: 2016-11-09 09:30\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-hexo","published":1,"updated":"2018-01-26T06:18:13.000Z","_id":"ciwm7foca000jzn3msrjqgcjn","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"date":"2015-10-14T05:18:00.000Z","status":"public","title":"UISearchBar的使用","_content":"\n最近在项目中写搜索比较多，然而UI设计对页面的效果和布局都有所严谨，发布测试版本后设计或多或少会拿着app跑到面前来说这些差那些，作为开发人员，这些都习以为常了。\n\n```\n简介的介绍一下，此文主要想要介绍的内容：在搜索框激活时，出现的并不是遮罩层，而是想利用遮罩层做些其他事情，比如提示语、历史搜索记录等需求。\n```\n为达到此功能，我使用了两个控件:\n \n``` objective-c\n1. UISearchBar\n2. UISearchDisplayController\n```\n然而使用这两个控件的原始效果我们可以看看iPhone手机短信或通讯录中的搜索效果，我截了一张短信搜索图,如下图：\n![](/images/iOS自带效果.png)\n\n搜索框激活的时候自带了一层遮罩的效果，但很多时候，设计需求是有各式各样的变化的，可能你不需要这层遮罩层，而是想利用这个空间来做其他的用途，比如一旦搜索框激活，在遮罩层处，我想把这个空间用来做提示，或做历史搜索记录等需求，我们先来看看微信的搜索是怎么样的吧！\n\n![](/images/微信效果.png)\n这个效果不错吧，充分利用了空间，将遮罩层替换成了提示语，“搜索更多内容”，点击提示还是会让UISearchBar失去激活效果，虽然不知道微信是否是使用了UISearchBar和UISearchDisplayController来达到此效果的，但使用这两个控件肯定能实现这个效果。\n## 先来了解UISearchBar\nUISearchBar主要是用来输入搜索词，系统提供的UISearchBar自定义的方式并不是很友好，扩展性并不理想，想要充分了解UISearchBar，我们先来看看UISearchBar的堆栈结构吧。\n```objective-c\n(lldb) po [mySearchBar recursiveDescription]\n<UISearchBar: 0x13f518bc0; frame = (0 0; 320 40); text = ''; gestureRecognizers = <NSArray: 0x17005cfb0>; layer = <CALayer: 0x1700297e0>>\n   | <UIView: 0x17018db60; frame = (0 0; 320 40); clipsToBounds = YES; autoresize = W+H; layer = <CALayer: 0x170034560>>\n   |    | <UISearchBarBackground: 0x13f611e10; frame = (0 0; 320 40); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x178039920>>\n   |    | <UISearchBarTextField: 0x13f51a170; frame = (0 0; 0 0); text = ''; clipsToBounds = YES; opaque = NO; layer = <CALayer: 0x170034620>>\n   |    |    | <_UISearchBarSearchFieldBackgroundView: 0x13f612fa0; frame = (0 0; 0 0); opaque = NO; autoresize = W+H; userInteractionEnabled = NO; layer = <CALayer: 0x178037fc0>>\n   ```\n我们打印出UISearchBar的堆栈结构后，我们可以清晰的看出它是由一个UIView组成，这个UIView下又有一个UISearchBarBackground和一个UISearchBarTextField，UISearchBarTextField下还有一个_UISearchBarSearchFieldBackgroundView。这些UIView并没有被UISearchBar   提供，所以你想自定义UISearchBar就得从这些视图入手，下面我修改了UISearchBarTextField的背景色，如：\n```objective-c\nmySearchBar = [[UISearchBar alloc] initWithFrame:CGRectMake(0, 0, mScreenWidth, 40)];\n    mySearchBar.delegate = self;\n    mySearchBar.barTintColor = [UIColor whiteColor];\n    [mySearchBar setPlaceholder:@\"搜索\"];\n    UIColor *bgColor = [UIColor colorWithRed:0xff green:0xff blue:0xff alpha:1];\n    mySearchBar.backgroundImage = [self imageFromColor:bgColor frame:mySearchBar.bounds];\n    for (UIView *subView in mySearchBar.subviews)\n    {\n        for (UIView *secondLevelSubview in subView.subviews){\n            if ([secondLevelSubview isKindOfClass:[UITextField class]])\n            {\n                UITextField *searchBarTextField = (UITextField *)secondLevelSubview;                searchBarTextField.backgroundColor = GreyishWhiteColor;\n                break;\n            }\n        }\n    }\n```\n在for循环里 我找到了UISearchBarTextField，并改变了他的背景色。这里不是这篇文章主要讲解的，自定义UISearchBar就不过多讲了。\n## 我们再来了解下UISearchDisplayController\n只有在激活的情况下，UISearchDisplayController才会显示出来。\n```objective-c\nsearchDisplayController = [[UISearchDisplayController alloc] initWithSearchBar:mySearchBar contentsController:self];\n    searchDisplayController.searchResultsDataSource = self;\n    searchDisplayController.searchResultsDelegate = self;\n    searchDisplayController.delegate = self;\n```\n在这里先初始化controller,初始化的时候注意了，将先前初始化的UISearchBar作为初始化参数穿进去了，这个时候其实就把UISearchBar和UISearchDisplayController关联起来了。搜索激活时，我们将会看到上面提到的遮罩层，其实这就是UISearchDisplayController下面的_UISearchDisplayControllerDimmingView,为什么这么说呢，我们用老方法吧，使用recursiveDescription 把堆栈结构打印出来\n\n```\npo [searchDisplayController recursiveDescription]\nerror: Execution was interrupted, reason: Attempted to dereference an invalid ObjC Object or send it an unrecognized selector.\nThe process has been returned to the state before expression evaluation.\n```\n发现他并不是UIView的子类，我们跟进去查看一下，原来是继承NSObject的，那他的所呈现的UIView是放在什么视图上面的呢，我们看看他的属性，发现还有一个searchContentsController，那么我们把searchContentsController堆栈打印出来看看\n```objective-c\n(lldb) po [controller.searchContentsController.view recursiveDescription]\n<UIView: 0x1781971b0; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer: 0x178228fa0>>\n   | <UITableView: 0x14c867a00; frame = (0 0; 320 454); clipsToBounds = YES; gestureRecognizers = <NSArray: 0x17805d190>; animations = { bounds.origin=<CABasicAnimation: 0x17022e1c0>; bounds.size=<CABasicAnimation: 0x17022e220>; }; layer = <CALayer: 0x17803c380>; contentOffset: {0, -20}; contentSize: {320, 478}>\n   |    | <UIView: 0x178197760; frame = (0 -0.5; 320 0.5); hidden = YES; autoresize = W; layer = <CALayer: 0x17822a3a0>>\n   |    | <UITableViewWrapperView: 0x14c5137c0; frame = (0 0; 320 454); gestureRecognizers = <NSArray: 0x17805d3d0>; layer = <CALayer: 0x17822a2c0>; contentOffset: {0, 0}; contentSize: {320, 454}>\n   |    | <UISearchBar: 0x14c514cc0; frame = (0 0; 320 44); text = ''; gestureRecognizers = <NSArray: 0x17805cf50>; layer = <CALayer: 0x17822a000>>\n   |    |    | <UIView: 0x1781975c0; frame = (0 0; 320 44); autoresize = W+H; layer = <CALayer: 0x17822a0c0>>\n   |    |    |    | <UISearchBarBackground: 0x14c5122b0; frame = (0 -20; 320 64); opaque = NO; userInteractionEnabled = NO; animations = { position=<CABasicAnimation: 0x17022f140>; bounds.origin=<CABasicAnimation: 0x17022f380>; bounds.size=<CABasicAnimation: 0x17022f3e0>; contentsCenter=<CABasicAnimation: 0x17022f4c0>; }; layer = <CALayer: 0x17822a160>>\n   |    |    |    | <UISearchBarTextField: 0x14c518b40; frame = (8 8; 239 28); text = ''; clipsToBounds = YES; opaque = NO; gestureRecognizers = <NSArray: 0x17805d970>; animations = { position=<CABasicAnimation: 0x17022f560>; bounds.origin=<CABasicAnimation: 0x17022f6a0>; bounds.size=<CABasicAnimation: 0x17022f700>; }; layer = <CALayer: 0x17003e500>>\n   |    |    |    |    | <_UISearchBarSearchFieldBackgroundView: 0x14c617ff0; frame = (0 0; 239 28); opaque = NO; autoresize = W+H; userInteractionEnabled = NO; animations = { position=<CABasicAnimation: 0x17022f740>; bounds.origin=<CABasicAnimation: 0x17822bea0>; bounds.size=<CABasicAnimation: 0x17822bda0>; }; layer = <CALayer: 0x170225de0>>\n   |    |    |    |    | <UISearchBarTextFieldLabel: 0x14c618950; frame = (29 1; 203 25); text = '搜索'; opaque = NO; userInteractionEnabled = NO; animations = { position=<CABasicAnimation: 0x17822c560>; bounds.origin=<CABasicAnimation: 0x17822c6a0>; bounds.size=<CABasicAnimation: 0x17822c700>; }; layer = <_UILabelLayer: 0x170087f80>>\n   |    |    |    |    |    | <_UILabelContentLayer: 0x17822b240> (layer)\n   |    |    |    |    | <UIFieldEditor: 0x14c522e10; frame = (28 2; 204 24); text = ''; clipsToBounds = YES; opaque = NO; gestureRecognizers = <NSArray: 0x17805a3d0>; layer = <CALayer: 0x1782285e0>; contentOffset: {0, 0}; contentSize: {204, 24}>\n   |    |    |    |    |    | <_UIFieldEditorContentView: 0x1781981f0; frame = (0 0; 204 24); opaque = NO; userInteractionEnabled = NO; gestureRecognizers = <NSArray: 0x1702441d0>; layer = <CALayer: 0x178227d40>>\n   |    |    |    |    |    |    | <UITextSelectionView: 0x14c50e2d0; frame = (0 0; 0 0); userInteractionEnabled = NO; layer = <CALayer: 0x178227aa0>>\n   |    |    |    |    |    | <UIImageView: 0x1701ef500; frame = (200.5 12; 3.5 12); alpha = 0; opaque = NO; autoresize = LM; userInteractionEnabled = NO; layer = <CALayer: 0x17022f900>>\n   |    |    |    |    |    | <UIImageView: 0x1781ef200; frame = (197 20.5; 7 3.5); alpha = 0; opaque = NO; autoresize = TM; userInteractionEnabled = NO; layer = <CALayer: 0x17822ca60>>\n   |    |    |    |    | <UIImageView: 0x1701ee700; frame = (8 7.5; 13 13); opaque = NO; userInteractionEnabled = NO; animations = { position=<CABasicAnimation: 0x17822c0e0>; }; layer = <CALayer: 0x17022a3c0>>\n   |    |    |    | <UINavigationButton: 0x14c615af0; frame = (258 6; 54 30); opaque = NO; animations = { position=<CABasicAnimation: 0x17822bc60>; opacity=<CABasicAnimation: 0x17822bf60>; }; layer = <CALayer: 0x17003d180>>\n   |    |    |    |    | <UIButtonLabel: 0x14c60e1a0; frame = (0 4; 53.5 20.5); text = 'Cancel'; opaque = NO; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x170087da0>>\n   |    | <UIView: 0x170198600; frame = (0 44; 320 0); animations = { position=<CABasicAnimation: 0x17022e180>; }; layer = <CALayer: 0x17022aa00>>\n   | <UISearchDisplayControllerContainerView: 0x1701efe00; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer: 0x17022d620>>\n   |    | <UIView: 0x170196e70; frame = (0 0; 320 568); layer = <CALayer: 0x17022d800>>\n   |    |    | <UISearchResultsTableView: 0x14d046200; frame = (0 0; 320 568); clipsToBounds = YES; hidden = YES; autoresize = W+H; gestureRecognizers = <NSArray: 0x170240450>; layer = <CALayer: 0x17022aa20>; contentOffset: {0, 0}; contentSize: {320, 44}>\n   |    |    |    | <UITableViewWrapperView: 0x14c6198f0; frame = (0 0; 320 568); gestureRecognizers = <NSArray: 0x170240690>; layer = <CALayer: 0x17022ab00>; contentOffset: {0, 0}; contentSize: {320, 568}>\n   |    |    |    |    | <UITableViewCell: 0x14c60fe10; frame = (0 0; 320 44); text = '搜索第一行'; autoresize = W; layer = <CALayer: 0x170225ac0>>\n   |    |    |    |    |    | <UITableViewCellContentView: 0x178196b30; frame = (0 0; 320 43.5); gestureRecognizers = <NSArray: 0x17805a760>; layer = <CALayer: 0x17803a680>>\n   |    |    |    |    |    |    | <UITableViewLabel: 0x14c5049b0; frame = (15 0; 290 43.5); text = '搜索第一行'; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x178084f10>>\n   |    |    |    |    |    |    |    | <_UILabelContentLayer: 0x17003e820> (layer)\n   |    |    |    |    |    | <_UITableViewCellSeparatorView: 0x1781c3840; frame = (15 43.5; 305 0.5); layer = <CALayer: 0x17822bb20>>\n   |    |    |    | <UIImageView: 0x1701f0800; frame = (0 564.5; 320 3.5); alpha = 0; opaque = NO; autoresize = TM; userInteractionEnabled = NO; layer = <CALayer: 0x17022e6a0>>\n   |    |    |    | <UIImageView: 0x1701f0900; frame = (316.5 524; 3.5 44); alpha = 0; opaque = NO; autoresize = LM; userInteractionEnabled = NO; layer = <CALayer: 0x17022e880>>\n   |    | <UIView: 0x170197eb0; frame = (0 20; 320 44); animations = { position=<CABasicAnimation: 0x17022f0c0>; }; layer = <CALayer: 0x17022d7c0>>\n   |    | <UIView: 0x170197f80; frame = (0 64; 320 504); animations = { bounds.origin=<CABasicAnimation: 0x17022f100>; bounds.size=<CABasicAnimation: 0x17022f160>; position=<CABasicAnimation: 0x17022f220>; }; layer = <CALayer: 0x17022d7e0>>\n   |    |    | <_UISearchDisplayControllerDimmingView: 0x1701c3840; frame = (0 0; 320 504); alpha = 0.4; opaque = NO; autoresize = W+H; animations = { position=<CABasicAnimation: 0x17022f1a0>; bounds.origin=<CABasicAnimation: 0x17022f2c0>; bounds.size=<CABasicAnimation: 0x17022f320>; opacity=<CABasicAnimation: 0x17822c8c0>; }; layer = <CALayer: 0x17022df60>>\n```\n打印出来的东西有点多，不要着急，要了解清楚这里面的结构还需要耐心和细心，我们先找到UISearchDisplayControllerContainerView，这个view下面有三个子view，其中一个子view中加载着UISearchResultsTableView，这个UISearchResultsTableView是估计大家都很熟悉吧，搜索出来的数据就是加载到这个UISearchResultsTableView上的，然后我们再仔细看看，三个子view中还有一个view下加载着_UISearchDisplayControllerDimmingView，我们试图在这个view上加一些东西，看看会有什么变化,我这里把预先初始化好了的提示页面加载到这个view上，代码如下：\n```objective-c\n- (void)addTipsViewWithController：(UISearchDisplayController*)controller\n{\n    UIView *supV = controller.searchResultsTableView.superview;\n    UIView *supsupV = supV.superview;\n    for (UIView *view in supsupV.subviews) {\n        for (UIView *sencondView in view.subviews) {\n            if ([sencondView isKindOfClass:[NSClassFromString(@\"_UISearchDisplayControllerDimmingView\") class]]) {\n                NSLog(@\"_UISearchDisplayControllerDimmingView\");\n                if (![sencondView viewWithTag:99]) {\n                    [sencondView addSubview:self.tempSearchDisplayBackgroungView];\n                }\n                sencondView.alpha = 1;\n            }\n        }\n    }\n}\n```\n或许你的 NSLog(@\"_UISearchDisplayControllerDimmingView\");日志重来就没打印出来，不用着急，你可以延时加载此view\n```objective-c\n- (void)searchDisplayControllerWillBeginSearch:(UISearchDisplayController *)controller\n{\n    [self performSelector:@selector(addTipsViewWithView:) withObject:controller afterDelay:0.1];\n}\n```\n这样就没问题了。然后我们来看看效果，是不是发现阴影层上有了我们自己加的页面呢？我们再修改下自己定义的提示页面，设置frame的大小为阴影层的大小，放在阴影层上，但每次都需要将阴影层的alpha设为1，如果每次设置，第二次以及后面搜索时，你加载的提示页面讲是透明的。最后来看看我的效果见下图：\n\n![](/images/最终效果.png)\n\n\n## 总结\n遇到一些扩展性不是很强，或者布局复杂都不要着急，一定要静下心来慢慢查看，熟悉使用UIView的recursiveDescription，强调一定是UIView对象，如果觉得recursiveDescription打印出来的不够直观，推荐使用工具Reveal工具，不过他不是免费的哦。这款软件能直观立体的将试图展示出来，很快的定位试图结构。如有需要该文中提到的相关工程，可以到[这里][mark_SearchBar]下载。还有其他更好的方法，也希望大家多多交流。祝好！\n[mark_SearchBar]: https://github.com/lyroger/SearchBarPro (SearchBarPro)\n-------\n关注我的「lyroger」微信公众号：\n\n![](/images/qrcode_for_gh_6f53ca8d5aea_258.jpg)","source":"_posts/UISearchBar的使用.md","raw":"---\ndate: 2015-10-14 13:18\nstatus: public\ntitle: UISearchBar的使用\ncategory: 基础篇\n---\n\n最近在项目中写搜索比较多，然而UI设计对页面的效果和布局都有所严谨，发布测试版本后设计或多或少会拿着app跑到面前来说这些差那些，作为开发人员，这些都习以为常了。\n\n```\n简介的介绍一下，此文主要想要介绍的内容：在搜索框激活时，出现的并不是遮罩层，而是想利用遮罩层做些其他事情，比如提示语、历史搜索记录等需求。\n```\n为达到此功能，我使用了两个控件:\n \n``` objective-c\n1. UISearchBar\n2. UISearchDisplayController\n```\n然而使用这两个控件的原始效果我们可以看看iPhone手机短信或通讯录中的搜索效果，我截了一张短信搜索图,如下图：\n![](/images/iOS自带效果.png)\n\n搜索框激活的时候自带了一层遮罩的效果，但很多时候，设计需求是有各式各样的变化的，可能你不需要这层遮罩层，而是想利用这个空间来做其他的用途，比如一旦搜索框激活，在遮罩层处，我想把这个空间用来做提示，或做历史搜索记录等需求，我们先来看看微信的搜索是怎么样的吧！\n\n![](/images/微信效果.png)\n这个效果不错吧，充分利用了空间，将遮罩层替换成了提示语，“搜索更多内容”，点击提示还是会让UISearchBar失去激活效果，虽然不知道微信是否是使用了UISearchBar和UISearchDisplayController来达到此效果的，但使用这两个控件肯定能实现这个效果。\n## 先来了解UISearchBar\nUISearchBar主要是用来输入搜索词，系统提供的UISearchBar自定义的方式并不是很友好，扩展性并不理想，想要充分了解UISearchBar，我们先来看看UISearchBar的堆栈结构吧。\n```objective-c\n(lldb) po [mySearchBar recursiveDescription]\n<UISearchBar: 0x13f518bc0; frame = (0 0; 320 40); text = ''; gestureRecognizers = <NSArray: 0x17005cfb0>; layer = <CALayer: 0x1700297e0>>\n   | <UIView: 0x17018db60; frame = (0 0; 320 40); clipsToBounds = YES; autoresize = W+H; layer = <CALayer: 0x170034560>>\n   |    | <UISearchBarBackground: 0x13f611e10; frame = (0 0; 320 40); opaque = NO; userInteractionEnabled = NO; layer = <CALayer: 0x178039920>>\n   |    | <UISearchBarTextField: 0x13f51a170; frame = (0 0; 0 0); text = ''; clipsToBounds = YES; opaque = NO; layer = <CALayer: 0x170034620>>\n   |    |    | <_UISearchBarSearchFieldBackgroundView: 0x13f612fa0; frame = (0 0; 0 0); opaque = NO; autoresize = W+H; userInteractionEnabled = NO; layer = <CALayer: 0x178037fc0>>\n   ```\n我们打印出UISearchBar的堆栈结构后，我们可以清晰的看出它是由一个UIView组成，这个UIView下又有一个UISearchBarBackground和一个UISearchBarTextField，UISearchBarTextField下还有一个_UISearchBarSearchFieldBackgroundView。这些UIView并没有被UISearchBar   提供，所以你想自定义UISearchBar就得从这些视图入手，下面我修改了UISearchBarTextField的背景色，如：\n```objective-c\nmySearchBar = [[UISearchBar alloc] initWithFrame:CGRectMake(0, 0, mScreenWidth, 40)];\n    mySearchBar.delegate = self;\n    mySearchBar.barTintColor = [UIColor whiteColor];\n    [mySearchBar setPlaceholder:@\"搜索\"];\n    UIColor *bgColor = [UIColor colorWithRed:0xff green:0xff blue:0xff alpha:1];\n    mySearchBar.backgroundImage = [self imageFromColor:bgColor frame:mySearchBar.bounds];\n    for (UIView *subView in mySearchBar.subviews)\n    {\n        for (UIView *secondLevelSubview in subView.subviews){\n            if ([secondLevelSubview isKindOfClass:[UITextField class]])\n            {\n                UITextField *searchBarTextField = (UITextField *)secondLevelSubview;                searchBarTextField.backgroundColor = GreyishWhiteColor;\n                break;\n            }\n        }\n    }\n```\n在for循环里 我找到了UISearchBarTextField，并改变了他的背景色。这里不是这篇文章主要讲解的，自定义UISearchBar就不过多讲了。\n## 我们再来了解下UISearchDisplayController\n只有在激活的情况下，UISearchDisplayController才会显示出来。\n```objective-c\nsearchDisplayController = [[UISearchDisplayController alloc] initWithSearchBar:mySearchBar contentsController:self];\n    searchDisplayController.searchResultsDataSource = self;\n    searchDisplayController.searchResultsDelegate = self;\n    searchDisplayController.delegate = self;\n```\n在这里先初始化controller,初始化的时候注意了，将先前初始化的UISearchBar作为初始化参数穿进去了，这个时候其实就把UISearchBar和UISearchDisplayController关联起来了。搜索激活时，我们将会看到上面提到的遮罩层，其实这就是UISearchDisplayController下面的_UISearchDisplayControllerDimmingView,为什么这么说呢，我们用老方法吧，使用recursiveDescription 把堆栈结构打印出来\n\n```\npo [searchDisplayController recursiveDescription]\nerror: Execution was interrupted, reason: Attempted to dereference an invalid ObjC Object or send it an unrecognized selector.\nThe process has been returned to the state before expression evaluation.\n```\n发现他并不是UIView的子类，我们跟进去查看一下，原来是继承NSObject的，那他的所呈现的UIView是放在什么视图上面的呢，我们看看他的属性，发现还有一个searchContentsController，那么我们把searchContentsController堆栈打印出来看看\n```objective-c\n(lldb) po [controller.searchContentsController.view recursiveDescription]\n<UIView: 0x1781971b0; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer: 0x178228fa0>>\n   | <UITableView: 0x14c867a00; frame = (0 0; 320 454); clipsToBounds = YES; gestureRecognizers = <NSArray: 0x17805d190>; animations = { bounds.origin=<CABasicAnimation: 0x17022e1c0>; bounds.size=<CABasicAnimation: 0x17022e220>; }; layer = <CALayer: 0x17803c380>; contentOffset: {0, -20}; contentSize: {320, 478}>\n   |    | <UIView: 0x178197760; frame = (0 -0.5; 320 0.5); hidden = YES; autoresize = W; layer = <CALayer: 0x17822a3a0>>\n   |    | <UITableViewWrapperView: 0x14c5137c0; frame = (0 0; 320 454); gestureRecognizers = <NSArray: 0x17805d3d0>; layer = <CALayer: 0x17822a2c0>; contentOffset: {0, 0}; contentSize: {320, 454}>\n   |    | <UISearchBar: 0x14c514cc0; frame = (0 0; 320 44); text = ''; gestureRecognizers = <NSArray: 0x17805cf50>; layer = <CALayer: 0x17822a000>>\n   |    |    | <UIView: 0x1781975c0; frame = (0 0; 320 44); autoresize = W+H; layer = <CALayer: 0x17822a0c0>>\n   |    |    |    | <UISearchBarBackground: 0x14c5122b0; frame = (0 -20; 320 64); opaque = NO; userInteractionEnabled = NO; animations = { position=<CABasicAnimation: 0x17022f140>; bounds.origin=<CABasicAnimation: 0x17022f380>; bounds.size=<CABasicAnimation: 0x17022f3e0>; contentsCenter=<CABasicAnimation: 0x17022f4c0>; }; layer = <CALayer: 0x17822a160>>\n   |    |    |    | <UISearchBarTextField: 0x14c518b40; frame = (8 8; 239 28); text = ''; clipsToBounds = YES; opaque = NO; gestureRecognizers = <NSArray: 0x17805d970>; animations = { position=<CABasicAnimation: 0x17022f560>; bounds.origin=<CABasicAnimation: 0x17022f6a0>; bounds.size=<CABasicAnimation: 0x17022f700>; }; layer = <CALayer: 0x17003e500>>\n   |    |    |    |    | <_UISearchBarSearchFieldBackgroundView: 0x14c617ff0; frame = (0 0; 239 28); opaque = NO; autoresize = W+H; userInteractionEnabled = NO; animations = { position=<CABasicAnimation: 0x17022f740>; bounds.origin=<CABasicAnimation: 0x17822bea0>; bounds.size=<CABasicAnimation: 0x17822bda0>; }; layer = <CALayer: 0x170225de0>>\n   |    |    |    |    | <UISearchBarTextFieldLabel: 0x14c618950; frame = (29 1; 203 25); text = '搜索'; opaque = NO; userInteractionEnabled = NO; animations = { position=<CABasicAnimation: 0x17822c560>; bounds.origin=<CABasicAnimation: 0x17822c6a0>; bounds.size=<CABasicAnimation: 0x17822c700>; }; layer = <_UILabelLayer: 0x170087f80>>\n   |    |    |    |    |    | <_UILabelContentLayer: 0x17822b240> (layer)\n   |    |    |    |    | <UIFieldEditor: 0x14c522e10; frame = (28 2; 204 24); text = ''; clipsToBounds = YES; opaque = NO; gestureRecognizers = <NSArray: 0x17805a3d0>; layer = <CALayer: 0x1782285e0>; contentOffset: {0, 0}; contentSize: {204, 24}>\n   |    |    |    |    |    | <_UIFieldEditorContentView: 0x1781981f0; frame = (0 0; 204 24); opaque = NO; userInteractionEnabled = NO; gestureRecognizers = <NSArray: 0x1702441d0>; layer = <CALayer: 0x178227d40>>\n   |    |    |    |    |    |    | <UITextSelectionView: 0x14c50e2d0; frame = (0 0; 0 0); userInteractionEnabled = NO; layer = <CALayer: 0x178227aa0>>\n   |    |    |    |    |    | <UIImageView: 0x1701ef500; frame = (200.5 12; 3.5 12); alpha = 0; opaque = NO; autoresize = LM; userInteractionEnabled = NO; layer = <CALayer: 0x17022f900>>\n   |    |    |    |    |    | <UIImageView: 0x1781ef200; frame = (197 20.5; 7 3.5); alpha = 0; opaque = NO; autoresize = TM; userInteractionEnabled = NO; layer = <CALayer: 0x17822ca60>>\n   |    |    |    |    | <UIImageView: 0x1701ee700; frame = (8 7.5; 13 13); opaque = NO; userInteractionEnabled = NO; animations = { position=<CABasicAnimation: 0x17822c0e0>; }; layer = <CALayer: 0x17022a3c0>>\n   |    |    |    | <UINavigationButton: 0x14c615af0; frame = (258 6; 54 30); opaque = NO; animations = { position=<CABasicAnimation: 0x17822bc60>; opacity=<CABasicAnimation: 0x17822bf60>; }; layer = <CALayer: 0x17003d180>>\n   |    |    |    |    | <UIButtonLabel: 0x14c60e1a0; frame = (0 4; 53.5 20.5); text = 'Cancel'; opaque = NO; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x170087da0>>\n   |    | <UIView: 0x170198600; frame = (0 44; 320 0); animations = { position=<CABasicAnimation: 0x17022e180>; }; layer = <CALayer: 0x17022aa00>>\n   | <UISearchDisplayControllerContainerView: 0x1701efe00; frame = (0 0; 320 568); autoresize = W+H; layer = <CALayer: 0x17022d620>>\n   |    | <UIView: 0x170196e70; frame = (0 0; 320 568); layer = <CALayer: 0x17022d800>>\n   |    |    | <UISearchResultsTableView: 0x14d046200; frame = (0 0; 320 568); clipsToBounds = YES; hidden = YES; autoresize = W+H; gestureRecognizers = <NSArray: 0x170240450>; layer = <CALayer: 0x17022aa20>; contentOffset: {0, 0}; contentSize: {320, 44}>\n   |    |    |    | <UITableViewWrapperView: 0x14c6198f0; frame = (0 0; 320 568); gestureRecognizers = <NSArray: 0x170240690>; layer = <CALayer: 0x17022ab00>; contentOffset: {0, 0}; contentSize: {320, 568}>\n   |    |    |    |    | <UITableViewCell: 0x14c60fe10; frame = (0 0; 320 44); text = '搜索第一行'; autoresize = W; layer = <CALayer: 0x170225ac0>>\n   |    |    |    |    |    | <UITableViewCellContentView: 0x178196b30; frame = (0 0; 320 43.5); gestureRecognizers = <NSArray: 0x17805a760>; layer = <CALayer: 0x17803a680>>\n   |    |    |    |    |    |    | <UITableViewLabel: 0x14c5049b0; frame = (15 0; 290 43.5); text = '搜索第一行'; userInteractionEnabled = NO; layer = <_UILabelLayer: 0x178084f10>>\n   |    |    |    |    |    |    |    | <_UILabelContentLayer: 0x17003e820> (layer)\n   |    |    |    |    |    | <_UITableViewCellSeparatorView: 0x1781c3840; frame = (15 43.5; 305 0.5); layer = <CALayer: 0x17822bb20>>\n   |    |    |    | <UIImageView: 0x1701f0800; frame = (0 564.5; 320 3.5); alpha = 0; opaque = NO; autoresize = TM; userInteractionEnabled = NO; layer = <CALayer: 0x17022e6a0>>\n   |    |    |    | <UIImageView: 0x1701f0900; frame = (316.5 524; 3.5 44); alpha = 0; opaque = NO; autoresize = LM; userInteractionEnabled = NO; layer = <CALayer: 0x17022e880>>\n   |    | <UIView: 0x170197eb0; frame = (0 20; 320 44); animations = { position=<CABasicAnimation: 0x17022f0c0>; }; layer = <CALayer: 0x17022d7c0>>\n   |    | <UIView: 0x170197f80; frame = (0 64; 320 504); animations = { bounds.origin=<CABasicAnimation: 0x17022f100>; bounds.size=<CABasicAnimation: 0x17022f160>; position=<CABasicAnimation: 0x17022f220>; }; layer = <CALayer: 0x17022d7e0>>\n   |    |    | <_UISearchDisplayControllerDimmingView: 0x1701c3840; frame = (0 0; 320 504); alpha = 0.4; opaque = NO; autoresize = W+H; animations = { position=<CABasicAnimation: 0x17022f1a0>; bounds.origin=<CABasicAnimation: 0x17022f2c0>; bounds.size=<CABasicAnimation: 0x17022f320>; opacity=<CABasicAnimation: 0x17822c8c0>; }; layer = <CALayer: 0x17022df60>>\n```\n打印出来的东西有点多，不要着急，要了解清楚这里面的结构还需要耐心和细心，我们先找到UISearchDisplayControllerContainerView，这个view下面有三个子view，其中一个子view中加载着UISearchResultsTableView，这个UISearchResultsTableView是估计大家都很熟悉吧，搜索出来的数据就是加载到这个UISearchResultsTableView上的，然后我们再仔细看看，三个子view中还有一个view下加载着_UISearchDisplayControllerDimmingView，我们试图在这个view上加一些东西，看看会有什么变化,我这里把预先初始化好了的提示页面加载到这个view上，代码如下：\n```objective-c\n- (void)addTipsViewWithController：(UISearchDisplayController*)controller\n{\n    UIView *supV = controller.searchResultsTableView.superview;\n    UIView *supsupV = supV.superview;\n    for (UIView *view in supsupV.subviews) {\n        for (UIView *sencondView in view.subviews) {\n            if ([sencondView isKindOfClass:[NSClassFromString(@\"_UISearchDisplayControllerDimmingView\") class]]) {\n                NSLog(@\"_UISearchDisplayControllerDimmingView\");\n                if (![sencondView viewWithTag:99]) {\n                    [sencondView addSubview:self.tempSearchDisplayBackgroungView];\n                }\n                sencondView.alpha = 1;\n            }\n        }\n    }\n}\n```\n或许你的 NSLog(@\"_UISearchDisplayControllerDimmingView\");日志重来就没打印出来，不用着急，你可以延时加载此view\n```objective-c\n- (void)searchDisplayControllerWillBeginSearch:(UISearchDisplayController *)controller\n{\n    [self performSelector:@selector(addTipsViewWithView:) withObject:controller afterDelay:0.1];\n}\n```\n这样就没问题了。然后我们来看看效果，是不是发现阴影层上有了我们自己加的页面呢？我们再修改下自己定义的提示页面，设置frame的大小为阴影层的大小，放在阴影层上，但每次都需要将阴影层的alpha设为1，如果每次设置，第二次以及后面搜索时，你加载的提示页面讲是透明的。最后来看看我的效果见下图：\n\n![](/images/最终效果.png)\n\n\n## 总结\n遇到一些扩展性不是很强，或者布局复杂都不要着急，一定要静下心来慢慢查看，熟悉使用UIView的recursiveDescription，强调一定是UIView对象，如果觉得recursiveDescription打印出来的不够直观，推荐使用工具Reveal工具，不过他不是免费的哦。这款软件能直观立体的将试图展示出来，很快的定位试图结构。如有需要该文中提到的相关工程，可以到[这里][mark_SearchBar]下载。还有其他更好的方法，也希望大家多多交流。祝好！\n[mark_SearchBar]: https://github.com/lyroger/SearchBarPro (SearchBarPro)\n-------\n关注我的「lyroger」微信公众号：\n\n![](/images/qrcode_for_gh_6f53ca8d5aea_258.jpg)","slug":"UISearchBar的使用","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7focc000mzn3mppvlsfiq","content":"<p>最近在项目中写搜索比较多，然而UI设计对页面的效果和布局都有所严谨，发布测试版本后设计或多或少会拿着app跑到面前来说这些差那些，作为开发人员，这些都习以为常了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">简介的介绍一下，此文主要想要介绍的内容：在搜索框激活时，出现的并不是遮罩层，而是想利用遮罩层做些其他事情，比如提示语、历史搜索记录等需求。</div></pre></td></tr></table></figure>\n<p>为达到此功能，我使用了两个控件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. UISearchBar</div><div class=\"line\">2. UISearchDisplayController</div></pre></td></tr></table></figure>\n<p>然而使用这两个控件的原始效果我们可以看看iPhone手机短信或通讯录中的搜索效果，我截了一张短信搜索图,如下图：<br><img src=\"/images/iOS自带效果.png\" alt=\"\"></p>\n<p>搜索框激活的时候自带了一层遮罩的效果，但很多时候，设计需求是有各式各样的变化的，可能你不需要这层遮罩层，而是想利用这个空间来做其他的用途，比如一旦搜索框激活，在遮罩层处，我想把这个空间用来做提示，或做历史搜索记录等需求，我们先来看看微信的搜索是怎么样的吧！</p>\n<p><img src=\"/images/微信效果.png\" alt=\"\"><br>这个效果不错吧，充分利用了空间，将遮罩层替换成了提示语，“搜索更多内容”，点击提示还是会让UISearchBar失去激活效果，虽然不知道微信是否是使用了UISearchBar和UISearchDisplayController来达到此效果的，但使用这两个控件肯定能实现这个效果。</p>\n<h2 id=\"先来了解UISearchBar\"><a href=\"#先来了解UISearchBar\" class=\"headerlink\" title=\"先来了解UISearchBar\"></a>先来了解UISearchBar</h2><p>UISearchBar主要是用来输入搜索词，系统提供的UISearchBar自定义的方式并不是很友好，扩展性并不理想，想要充分了解UISearchBar，我们先来看看UISearchBar的堆栈结构吧。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po [mySearchBar recursiveDescription]</div><div class=\"line\">&lt;UISearchBar: 0x13f518bc0; frame = (0 0; 320 40); text = &apos;&apos;; gestureRecognizers = &lt;NSArray: 0x17005cfb0&gt;; layer = &lt;CALayer: 0x1700297e0&gt;&gt;</div><div class=\"line\">   | &lt;UIView: 0x17018db60; frame = (0 0; 320 40); clipsToBounds = YES; autoresize = W+H; layer = &lt;CALayer: 0x170034560&gt;&gt;</div><div class=\"line\">   |    | &lt;UISearchBarBackground: 0x13f611e10; frame = (0 0; 320 40); opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x178039920&gt;&gt;</div><div class=\"line\">   |    | &lt;UISearchBarTextField: 0x13f51a170; frame = (0 0; 0 0); text = &apos;&apos;; clipsToBounds = YES; opaque = NO; layer = &lt;CALayer: 0x170034620&gt;&gt;</div><div class=\"line\">   |    |    | &lt;_UISearchBarSearchFieldBackgroundView: 0x13f612fa0; frame = (0 0; 0 0); opaque = NO; autoresize = W+H; userInteractionEnabled = NO; layer = &lt;CALayer: 0x178037fc0&gt;&gt;</div></pre></td></tr></table></figure></p>\n<p>我们打印出UISearchBar的堆栈结构后，我们可以清晰的看出它是由一个UIView组成，这个UIView下又有一个UISearchBarBackground和一个UISearchBarTextField，UISearchBarTextField下还有一个_UISearchBarSearchFieldBackgroundView。这些UIView并没有被UISearchBar   提供，所以你想自定义UISearchBar就得从这些视图入手，下面我修改了UISearchBarTextField的背景色，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">mySearchBar = [[UISearchBar alloc] initWithFrame:CGRectMake(0, 0, mScreenWidth, 40)];</div><div class=\"line\">    mySearchBar.delegate = self;</div><div class=\"line\">    mySearchBar.barTintColor = [UIColor whiteColor];</div><div class=\"line\">    [mySearchBar setPlaceholder:@&quot;搜索&quot;];</div><div class=\"line\">    UIColor *bgColor = [UIColor colorWithRed:0xff green:0xff blue:0xff alpha:1];</div><div class=\"line\">    mySearchBar.backgroundImage = [self imageFromColor:bgColor frame:mySearchBar.bounds];</div><div class=\"line\">    for (UIView *subView in mySearchBar.subviews)</div><div class=\"line\">    &#123;</div><div class=\"line\">        for (UIView *secondLevelSubview in subView.subviews)&#123;</div><div class=\"line\">            if ([secondLevelSubview isKindOfClass:[UITextField class]])</div><div class=\"line\">            &#123;</div><div class=\"line\">                UITextField *searchBarTextField = (UITextField *)secondLevelSubview;                searchBarTextField.backgroundColor = GreyishWhiteColor;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在for循环里 我找到了UISearchBarTextField，并改变了他的背景色。这里不是这篇文章主要讲解的，自定义UISearchBar就不过多讲了。</p>\n<h2 id=\"我们再来了解下UISearchDisplayController\"><a href=\"#我们再来了解下UISearchDisplayController\" class=\"headerlink\" title=\"我们再来了解下UISearchDisplayController\"></a>我们再来了解下UISearchDisplayController</h2><p>只有在激活的情况下，UISearchDisplayController才会显示出来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">searchDisplayController = [[UISearchDisplayController alloc] initWithSearchBar:mySearchBar contentsController:self];</div><div class=\"line\">    searchDisplayController.searchResultsDataSource = self;</div><div class=\"line\">    searchDisplayController.searchResultsDelegate = self;</div><div class=\"line\">    searchDisplayController.delegate = self;</div></pre></td></tr></table></figure></p>\n<p>在这里先初始化controller,初始化的时候注意了，将先前初始化的UISearchBar作为初始化参数穿进去了，这个时候其实就把UISearchBar和UISearchDisplayController关联起来了。搜索激活时，我们将会看到上面提到的遮罩层，其实这就是UISearchDisplayController下面的_UISearchDisplayControllerDimmingView,为什么这么说呢，我们用老方法吧，使用recursiveDescription 把堆栈结构打印出来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">po [searchDisplayController recursiveDescription]</div><div class=\"line\">error: Execution was interrupted, reason: Attempted to dereference an invalid ObjC Object or send it an unrecognized selector.</div><div class=\"line\">The process has been returned to the state before expression evaluation.</div></pre></td></tr></table></figure>\n<p>发现他并不是UIView的子类，我们跟进去查看一下，原来是继承NSObject的，那他的所呈现的UIView是放在什么视图上面的呢，我们看看他的属性，发现还有一个searchContentsController，那么我们把searchContentsController堆栈打印出来看看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po [controller.searchContentsController.view recursiveDescription]</div><div class=\"line\">&lt;UIView: 0x1781971b0; frame = (0 0; 320 568); autoresize = W+H; layer = &lt;CALayer: 0x178228fa0&gt;&gt;</div><div class=\"line\">   | &lt;UITableView: 0x14c867a00; frame = (0 0; 320 454); clipsToBounds = YES; gestureRecognizers = &lt;NSArray: 0x17805d190&gt;; animations = &#123; bounds.origin=&lt;CABasicAnimation: 0x17022e1c0&gt;; bounds.size=&lt;CABasicAnimation: 0x17022e220&gt;; &#125;; layer = &lt;CALayer: 0x17803c380&gt;; contentOffset: &#123;0, -20&#125;; contentSize: &#123;320, 478&#125;&gt;</div><div class=\"line\">   |    | &lt;UIView: 0x178197760; frame = (0 -0.5; 320 0.5); hidden = YES; autoresize = W; layer = &lt;CALayer: 0x17822a3a0&gt;&gt;</div><div class=\"line\">   |    | &lt;UITableViewWrapperView: 0x14c5137c0; frame = (0 0; 320 454); gestureRecognizers = &lt;NSArray: 0x17805d3d0&gt;; layer = &lt;CALayer: 0x17822a2c0&gt;; contentOffset: &#123;0, 0&#125;; contentSize: &#123;320, 454&#125;&gt;</div><div class=\"line\">   |    | &lt;UISearchBar: 0x14c514cc0; frame = (0 0; 320 44); text = &apos;&apos;; gestureRecognizers = &lt;NSArray: 0x17805cf50&gt;; layer = &lt;CALayer: 0x17822a000&gt;&gt;</div><div class=\"line\">   |    |    | &lt;UIView: 0x1781975c0; frame = (0 0; 320 44); autoresize = W+H; layer = &lt;CALayer: 0x17822a0c0&gt;&gt;</div><div class=\"line\">   |    |    |    | &lt;UISearchBarBackground: 0x14c5122b0; frame = (0 -20; 320 64); opaque = NO; userInteractionEnabled = NO; animations = &#123; position=&lt;CABasicAnimation: 0x17022f140&gt;; bounds.origin=&lt;CABasicAnimation: 0x17022f380&gt;; bounds.size=&lt;CABasicAnimation: 0x17022f3e0&gt;; contentsCenter=&lt;CABasicAnimation: 0x17022f4c0&gt;; &#125;; layer = &lt;CALayer: 0x17822a160&gt;&gt;</div><div class=\"line\">   |    |    |    | &lt;UISearchBarTextField: 0x14c518b40; frame = (8 8; 239 28); text = &apos;&apos;; clipsToBounds = YES; opaque = NO; gestureRecognizers = &lt;NSArray: 0x17805d970&gt;; animations = &#123; position=&lt;CABasicAnimation: 0x17022f560&gt;; bounds.origin=&lt;CABasicAnimation: 0x17022f6a0&gt;; bounds.size=&lt;CABasicAnimation: 0x17022f700&gt;; &#125;; layer = &lt;CALayer: 0x17003e500&gt;&gt;</div><div class=\"line\">   |    |    |    |    | &lt;_UISearchBarSearchFieldBackgroundView: 0x14c617ff0; frame = (0 0; 239 28); opaque = NO; autoresize = W+H; userInteractionEnabled = NO; animations = &#123; position=&lt;CABasicAnimation: 0x17022f740&gt;; bounds.origin=&lt;CABasicAnimation: 0x17822bea0&gt;; bounds.size=&lt;CABasicAnimation: 0x17822bda0&gt;; &#125;; layer = &lt;CALayer: 0x170225de0&gt;&gt;</div><div class=\"line\">   |    |    |    |    | &lt;UISearchBarTextFieldLabel: 0x14c618950; frame = (29 1; 203 25); text = &apos;搜索&apos;; opaque = NO; userInteractionEnabled = NO; animations = &#123; position=&lt;CABasicAnimation: 0x17822c560&gt;; bounds.origin=&lt;CABasicAnimation: 0x17822c6a0&gt;; bounds.size=&lt;CABasicAnimation: 0x17822c700&gt;; &#125;; layer = &lt;_UILabelLayer: 0x170087f80&gt;&gt;</div><div class=\"line\">   |    |    |    |    |    | &lt;_UILabelContentLayer: 0x17822b240&gt; (layer)</div><div class=\"line\">   |    |    |    |    | &lt;UIFieldEditor: 0x14c522e10; frame = (28 2; 204 24); text = &apos;&apos;; clipsToBounds = YES; opaque = NO; gestureRecognizers = &lt;NSArray: 0x17805a3d0&gt;; layer = &lt;CALayer: 0x1782285e0&gt;; contentOffset: &#123;0, 0&#125;; contentSize: &#123;204, 24&#125;&gt;</div><div class=\"line\">   |    |    |    |    |    | &lt;_UIFieldEditorContentView: 0x1781981f0; frame = (0 0; 204 24); opaque = NO; userInteractionEnabled = NO; gestureRecognizers = &lt;NSArray: 0x1702441d0&gt;; layer = &lt;CALayer: 0x178227d40&gt;&gt;</div><div class=\"line\">   |    |    |    |    |    |    | &lt;UITextSelectionView: 0x14c50e2d0; frame = (0 0; 0 0); userInteractionEnabled = NO; layer = &lt;CALayer: 0x178227aa0&gt;&gt;</div><div class=\"line\">   |    |    |    |    |    | &lt;UIImageView: 0x1701ef500; frame = (200.5 12; 3.5 12); alpha = 0; opaque = NO; autoresize = LM; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17022f900&gt;&gt;</div><div class=\"line\">   |    |    |    |    |    | &lt;UIImageView: 0x1781ef200; frame = (197 20.5; 7 3.5); alpha = 0; opaque = NO; autoresize = TM; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17822ca60&gt;&gt;</div><div class=\"line\">   |    |    |    |    | &lt;UIImageView: 0x1701ee700; frame = (8 7.5; 13 13); opaque = NO; userInteractionEnabled = NO; animations = &#123; position=&lt;CABasicAnimation: 0x17822c0e0&gt;; &#125;; layer = &lt;CALayer: 0x17022a3c0&gt;&gt;</div><div class=\"line\">   |    |    |    | &lt;UINavigationButton: 0x14c615af0; frame = (258 6; 54 30); opaque = NO; animations = &#123; position=&lt;CABasicAnimation: 0x17822bc60&gt;; opacity=&lt;CABasicAnimation: 0x17822bf60&gt;; &#125;; layer = &lt;CALayer: 0x17003d180&gt;&gt;</div><div class=\"line\">   |    |    |    |    | &lt;UIButtonLabel: 0x14c60e1a0; frame = (0 4; 53.5 20.5); text = &apos;Cancel&apos;; opaque = NO; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x170087da0&gt;&gt;</div><div class=\"line\">   |    | &lt;UIView: 0x170198600; frame = (0 44; 320 0); animations = &#123; position=&lt;CABasicAnimation: 0x17022e180&gt;; &#125;; layer = &lt;CALayer: 0x17022aa00&gt;&gt;</div><div class=\"line\">   | &lt;UISearchDisplayControllerContainerView: 0x1701efe00; frame = (0 0; 320 568); autoresize = W+H; layer = &lt;CALayer: 0x17022d620&gt;&gt;</div><div class=\"line\">   |    | &lt;UIView: 0x170196e70; frame = (0 0; 320 568); layer = &lt;CALayer: 0x17022d800&gt;&gt;</div><div class=\"line\">   |    |    | &lt;UISearchResultsTableView: 0x14d046200; frame = (0 0; 320 568); clipsToBounds = YES; hidden = YES; autoresize = W+H; gestureRecognizers = &lt;NSArray: 0x170240450&gt;; layer = &lt;CALayer: 0x17022aa20&gt;; contentOffset: &#123;0, 0&#125;; contentSize: &#123;320, 44&#125;&gt;</div><div class=\"line\">   |    |    |    | &lt;UITableViewWrapperView: 0x14c6198f0; frame = (0 0; 320 568); gestureRecognizers = &lt;NSArray: 0x170240690&gt;; layer = &lt;CALayer: 0x17022ab00&gt;; contentOffset: &#123;0, 0&#125;; contentSize: &#123;320, 568&#125;&gt;</div><div class=\"line\">   |    |    |    |    | &lt;UITableViewCell: 0x14c60fe10; frame = (0 0; 320 44); text = &apos;搜索第一行&apos;; autoresize = W; layer = &lt;CALayer: 0x170225ac0&gt;&gt;</div><div class=\"line\">   |    |    |    |    |    | &lt;UITableViewCellContentView: 0x178196b30; frame = (0 0; 320 43.5); gestureRecognizers = &lt;NSArray: 0x17805a760&gt;; layer = &lt;CALayer: 0x17803a680&gt;&gt;</div><div class=\"line\">   |    |    |    |    |    |    | &lt;UITableViewLabel: 0x14c5049b0; frame = (15 0; 290 43.5); text = &apos;搜索第一行&apos;; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x178084f10&gt;&gt;</div><div class=\"line\">   |    |    |    |    |    |    |    | &lt;_UILabelContentLayer: 0x17003e820&gt; (layer)</div><div class=\"line\">   |    |    |    |    |    | &lt;_UITableViewCellSeparatorView: 0x1781c3840; frame = (15 43.5; 305 0.5); layer = &lt;CALayer: 0x17822bb20&gt;&gt;</div><div class=\"line\">   |    |    |    | &lt;UIImageView: 0x1701f0800; frame = (0 564.5; 320 3.5); alpha = 0; opaque = NO; autoresize = TM; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17022e6a0&gt;&gt;</div><div class=\"line\">   |    |    |    | &lt;UIImageView: 0x1701f0900; frame = (316.5 524; 3.5 44); alpha = 0; opaque = NO; autoresize = LM; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17022e880&gt;&gt;</div><div class=\"line\">   |    | &lt;UIView: 0x170197eb0; frame = (0 20; 320 44); animations = &#123; position=&lt;CABasicAnimation: 0x17022f0c0&gt;; &#125;; layer = &lt;CALayer: 0x17022d7c0&gt;&gt;</div><div class=\"line\">   |    | &lt;UIView: 0x170197f80; frame = (0 64; 320 504); animations = &#123; bounds.origin=&lt;CABasicAnimation: 0x17022f100&gt;; bounds.size=&lt;CABasicAnimation: 0x17022f160&gt;; position=&lt;CABasicAnimation: 0x17022f220&gt;; &#125;; layer = &lt;CALayer: 0x17022d7e0&gt;&gt;</div><div class=\"line\">   |    |    | &lt;_UISearchDisplayControllerDimmingView: 0x1701c3840; frame = (0 0; 320 504); alpha = 0.4; opaque = NO; autoresize = W+H; animations = &#123; position=&lt;CABasicAnimation: 0x17022f1a0&gt;; bounds.origin=&lt;CABasicAnimation: 0x17022f2c0&gt;; bounds.size=&lt;CABasicAnimation: 0x17022f320&gt;; opacity=&lt;CABasicAnimation: 0x17822c8c0&gt;; &#125;; layer = &lt;CALayer: 0x17022df60&gt;&gt;</div></pre></td></tr></table></figure></p>\n<p>打印出来的东西有点多，不要着急，要了解清楚这里面的结构还需要耐心和细心，我们先找到UISearchDisplayControllerContainerView，这个view下面有三个子view，其中一个子view中加载着UISearchResultsTableView，这个UISearchResultsTableView是估计大家都很熟悉吧，搜索出来的数据就是加载到这个UISearchResultsTableView上的，然后我们再仔细看看，三个子view中还有一个view下加载着_UISearchDisplayControllerDimmingView，我们试图在这个view上加一些东西，看看会有什么变化,我这里把预先初始化好了的提示页面加载到这个view上，代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)addTipsViewWithController：(UISearchDisplayController*)controller</div><div class=\"line\">&#123;</div><div class=\"line\">    UIView *supV = controller.searchResultsTableView.superview;</div><div class=\"line\">    UIView *supsupV = supV.superview;</div><div class=\"line\">    for (UIView *view in supsupV.subviews) &#123;</div><div class=\"line\">        for (UIView *sencondView in view.subviews) &#123;</div><div class=\"line\">            if ([sencondView isKindOfClass:[NSClassFromString(@&quot;_UISearchDisplayControllerDimmingView&quot;) class]]) &#123;</div><div class=\"line\">                NSLog(@&quot;_UISearchDisplayControllerDimmingView&quot;);</div><div class=\"line\">                if (![sencondView viewWithTag:99]) &#123;</div><div class=\"line\">                    [sencondView addSubview:self.tempSearchDisplayBackgroungView];</div><div class=\"line\">                &#125;</div><div class=\"line\">                sencondView.alpha = 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>或许你的 NSLog(@”_UISearchDisplayControllerDimmingView”);日志重来就没打印出来，不用着急，你可以延时加载此view<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)searchDisplayControllerWillBeginSearch:(UISearchDisplayController *)controller</div><div class=\"line\">&#123;</div><div class=\"line\">    [self performSelector:@selector(addTipsViewWithView:) withObject:controller afterDelay:0.1];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样就没问题了。然后我们来看看效果，是不是发现阴影层上有了我们自己加的页面呢？我们再修改下自己定义的提示页面，设置frame的大小为阴影层的大小，放在阴影层上，但每次都需要将阴影层的alpha设为1，如果每次设置，第二次以及后面搜索时，你加载的提示页面讲是透明的。最后来看看我的效果见下图：</p>\n<p><img src=\"/images/最终效果.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>遇到一些扩展性不是很强，或者布局复杂都不要着急，一定要静下心来慢慢查看，熟悉使用UIView的recursiveDescription，强调一定是UIView对象，如果觉得recursiveDescription打印出来的不够直观，推荐使用工具Reveal工具，不过他不是免费的哦。这款软件能直观立体的将试图展示出来，很快的定位试图结构。如有需要该文中提到的相关工程，可以到[这里][mark_SearchBar]下载。还有其他更好的方法，也希望大家多多交流。祝好！</p>\n<h2 id=\"mark-SearchBar-https-github-com-lyroger-SearchBarPro-SearchBarPro\"><a href=\"#mark-SearchBar-https-github-com-lyroger-SearchBarPro-SearchBarPro\" class=\"headerlink\" title=\"[mark_SearchBar]: https://github.com/lyroger/SearchBarPro (SearchBarPro)\"></a>[mark_SearchBar]: <a href=\"https://github.com/lyroger/SearchBarPro\" target=\"_blank\" rel=\"external\">https://github.com/lyroger/SearchBarPro</a> (SearchBarPro)</h2><p>关注我的「lyroger」微信公众号：</p>\n<p><img src=\"/images/qrcode_for_gh_6f53ca8d5aea_258.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<p>最近在项目中写搜索比较多，然而UI设计对页面的效果和布局都有所严谨，发布测试版本后设计或多或少会拿着app跑到面前来说这些差那些，作为开发人员，这些都习以为常了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">简介的介绍一下，此文主要想要介绍的内容：在搜索框激活时，出现的并不是遮罩层，而是想利用遮罩层做些其他事情，比如提示语、历史搜索记录等需求。</div></pre></td></tr></table></figure>\n<p>为达到此功能，我使用了两个控件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. UISearchBar</div><div class=\"line\">2. UISearchDisplayController</div></pre></td></tr></table></figure>\n<p>然而使用这两个控件的原始效果我们可以看看iPhone手机短信或通讯录中的搜索效果，我截了一张短信搜索图,如下图：<br><img src=\"/images/iOS自带效果.png\" alt=\"\"></p>\n<p>搜索框激活的时候自带了一层遮罩的效果，但很多时候，设计需求是有各式各样的变化的，可能你不需要这层遮罩层，而是想利用这个空间来做其他的用途，比如一旦搜索框激活，在遮罩层处，我想把这个空间用来做提示，或做历史搜索记录等需求，我们先来看看微信的搜索是怎么样的吧！</p>\n<p><img src=\"/images/微信效果.png\" alt=\"\"><br>这个效果不错吧，充分利用了空间，将遮罩层替换成了提示语，“搜索更多内容”，点击提示还是会让UISearchBar失去激活效果，虽然不知道微信是否是使用了UISearchBar和UISearchDisplayController来达到此效果的，但使用这两个控件肯定能实现这个效果。</p>\n<h2 id=\"先来了解UISearchBar\"><a href=\"#先来了解UISearchBar\" class=\"headerlink\" title=\"先来了解UISearchBar\"></a>先来了解UISearchBar</h2><p>UISearchBar主要是用来输入搜索词，系统提供的UISearchBar自定义的方式并不是很友好，扩展性并不理想，想要充分了解UISearchBar，我们先来看看UISearchBar的堆栈结构吧。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po [mySearchBar recursiveDescription]</div><div class=\"line\">&lt;UISearchBar: 0x13f518bc0; frame = (0 0; 320 40); text = &apos;&apos;; gestureRecognizers = &lt;NSArray: 0x17005cfb0&gt;; layer = &lt;CALayer: 0x1700297e0&gt;&gt;</div><div class=\"line\">   | &lt;UIView: 0x17018db60; frame = (0 0; 320 40); clipsToBounds = YES; autoresize = W+H; layer = &lt;CALayer: 0x170034560&gt;&gt;</div><div class=\"line\">   |    | &lt;UISearchBarBackground: 0x13f611e10; frame = (0 0; 320 40); opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x178039920&gt;&gt;</div><div class=\"line\">   |    | &lt;UISearchBarTextField: 0x13f51a170; frame = (0 0; 0 0); text = &apos;&apos;; clipsToBounds = YES; opaque = NO; layer = &lt;CALayer: 0x170034620&gt;&gt;</div><div class=\"line\">   |    |    | &lt;_UISearchBarSearchFieldBackgroundView: 0x13f612fa0; frame = (0 0; 0 0); opaque = NO; autoresize = W+H; userInteractionEnabled = NO; layer = &lt;CALayer: 0x178037fc0&gt;&gt;</div></pre></td></tr></table></figure></p>\n<p>我们打印出UISearchBar的堆栈结构后，我们可以清晰的看出它是由一个UIView组成，这个UIView下又有一个UISearchBarBackground和一个UISearchBarTextField，UISearchBarTextField下还有一个_UISearchBarSearchFieldBackgroundView。这些UIView并没有被UISearchBar   提供，所以你想自定义UISearchBar就得从这些视图入手，下面我修改了UISearchBarTextField的背景色，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">mySearchBar = [[UISearchBar alloc] initWithFrame:CGRectMake(0, 0, mScreenWidth, 40)];</div><div class=\"line\">    mySearchBar.delegate = self;</div><div class=\"line\">    mySearchBar.barTintColor = [UIColor whiteColor];</div><div class=\"line\">    [mySearchBar setPlaceholder:@&quot;搜索&quot;];</div><div class=\"line\">    UIColor *bgColor = [UIColor colorWithRed:0xff green:0xff blue:0xff alpha:1];</div><div class=\"line\">    mySearchBar.backgroundImage = [self imageFromColor:bgColor frame:mySearchBar.bounds];</div><div class=\"line\">    for (UIView *subView in mySearchBar.subviews)</div><div class=\"line\">    &#123;</div><div class=\"line\">        for (UIView *secondLevelSubview in subView.subviews)&#123;</div><div class=\"line\">            if ([secondLevelSubview isKindOfClass:[UITextField class]])</div><div class=\"line\">            &#123;</div><div class=\"line\">                UITextField *searchBarTextField = (UITextField *)secondLevelSubview;                searchBarTextField.backgroundColor = GreyishWhiteColor;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>在for循环里 我找到了UISearchBarTextField，并改变了他的背景色。这里不是这篇文章主要讲解的，自定义UISearchBar就不过多讲了。</p>\n<h2 id=\"我们再来了解下UISearchDisplayController\"><a href=\"#我们再来了解下UISearchDisplayController\" class=\"headerlink\" title=\"我们再来了解下UISearchDisplayController\"></a>我们再来了解下UISearchDisplayController</h2><p>只有在激活的情况下，UISearchDisplayController才会显示出来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">searchDisplayController = [[UISearchDisplayController alloc] initWithSearchBar:mySearchBar contentsController:self];</div><div class=\"line\">    searchDisplayController.searchResultsDataSource = self;</div><div class=\"line\">    searchDisplayController.searchResultsDelegate = self;</div><div class=\"line\">    searchDisplayController.delegate = self;</div></pre></td></tr></table></figure></p>\n<p>在这里先初始化controller,初始化的时候注意了，将先前初始化的UISearchBar作为初始化参数穿进去了，这个时候其实就把UISearchBar和UISearchDisplayController关联起来了。搜索激活时，我们将会看到上面提到的遮罩层，其实这就是UISearchDisplayController下面的_UISearchDisplayControllerDimmingView,为什么这么说呢，我们用老方法吧，使用recursiveDescription 把堆栈结构打印出来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">po [searchDisplayController recursiveDescription]</div><div class=\"line\">error: Execution was interrupted, reason: Attempted to dereference an invalid ObjC Object or send it an unrecognized selector.</div><div class=\"line\">The process has been returned to the state before expression evaluation.</div></pre></td></tr></table></figure>\n<p>发现他并不是UIView的子类，我们跟进去查看一下，原来是继承NSObject的，那他的所呈现的UIView是放在什么视图上面的呢，我们看看他的属性，发现还有一个searchContentsController，那么我们把searchContentsController堆栈打印出来看看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">(lldb) po [controller.searchContentsController.view recursiveDescription]</div><div class=\"line\">&lt;UIView: 0x1781971b0; frame = (0 0; 320 568); autoresize = W+H; layer = &lt;CALayer: 0x178228fa0&gt;&gt;</div><div class=\"line\">   | &lt;UITableView: 0x14c867a00; frame = (0 0; 320 454); clipsToBounds = YES; gestureRecognizers = &lt;NSArray: 0x17805d190&gt;; animations = &#123; bounds.origin=&lt;CABasicAnimation: 0x17022e1c0&gt;; bounds.size=&lt;CABasicAnimation: 0x17022e220&gt;; &#125;; layer = &lt;CALayer: 0x17803c380&gt;; contentOffset: &#123;0, -20&#125;; contentSize: &#123;320, 478&#125;&gt;</div><div class=\"line\">   |    | &lt;UIView: 0x178197760; frame = (0 -0.5; 320 0.5); hidden = YES; autoresize = W; layer = &lt;CALayer: 0x17822a3a0&gt;&gt;</div><div class=\"line\">   |    | &lt;UITableViewWrapperView: 0x14c5137c0; frame = (0 0; 320 454); gestureRecognizers = &lt;NSArray: 0x17805d3d0&gt;; layer = &lt;CALayer: 0x17822a2c0&gt;; contentOffset: &#123;0, 0&#125;; contentSize: &#123;320, 454&#125;&gt;</div><div class=\"line\">   |    | &lt;UISearchBar: 0x14c514cc0; frame = (0 0; 320 44); text = &apos;&apos;; gestureRecognizers = &lt;NSArray: 0x17805cf50&gt;; layer = &lt;CALayer: 0x17822a000&gt;&gt;</div><div class=\"line\">   |    |    | &lt;UIView: 0x1781975c0; frame = (0 0; 320 44); autoresize = W+H; layer = &lt;CALayer: 0x17822a0c0&gt;&gt;</div><div class=\"line\">   |    |    |    | &lt;UISearchBarBackground: 0x14c5122b0; frame = (0 -20; 320 64); opaque = NO; userInteractionEnabled = NO; animations = &#123; position=&lt;CABasicAnimation: 0x17022f140&gt;; bounds.origin=&lt;CABasicAnimation: 0x17022f380&gt;; bounds.size=&lt;CABasicAnimation: 0x17022f3e0&gt;; contentsCenter=&lt;CABasicAnimation: 0x17022f4c0&gt;; &#125;; layer = &lt;CALayer: 0x17822a160&gt;&gt;</div><div class=\"line\">   |    |    |    | &lt;UISearchBarTextField: 0x14c518b40; frame = (8 8; 239 28); text = &apos;&apos;; clipsToBounds = YES; opaque = NO; gestureRecognizers = &lt;NSArray: 0x17805d970&gt;; animations = &#123; position=&lt;CABasicAnimation: 0x17022f560&gt;; bounds.origin=&lt;CABasicAnimation: 0x17022f6a0&gt;; bounds.size=&lt;CABasicAnimation: 0x17022f700&gt;; &#125;; layer = &lt;CALayer: 0x17003e500&gt;&gt;</div><div class=\"line\">   |    |    |    |    | &lt;_UISearchBarSearchFieldBackgroundView: 0x14c617ff0; frame = (0 0; 239 28); opaque = NO; autoresize = W+H; userInteractionEnabled = NO; animations = &#123; position=&lt;CABasicAnimation: 0x17022f740&gt;; bounds.origin=&lt;CABasicAnimation: 0x17822bea0&gt;; bounds.size=&lt;CABasicAnimation: 0x17822bda0&gt;; &#125;; layer = &lt;CALayer: 0x170225de0&gt;&gt;</div><div class=\"line\">   |    |    |    |    | &lt;UISearchBarTextFieldLabel: 0x14c618950; frame = (29 1; 203 25); text = &apos;搜索&apos;; opaque = NO; userInteractionEnabled = NO; animations = &#123; position=&lt;CABasicAnimation: 0x17822c560&gt;; bounds.origin=&lt;CABasicAnimation: 0x17822c6a0&gt;; bounds.size=&lt;CABasicAnimation: 0x17822c700&gt;; &#125;; layer = &lt;_UILabelLayer: 0x170087f80&gt;&gt;</div><div class=\"line\">   |    |    |    |    |    | &lt;_UILabelContentLayer: 0x17822b240&gt; (layer)</div><div class=\"line\">   |    |    |    |    | &lt;UIFieldEditor: 0x14c522e10; frame = (28 2; 204 24); text = &apos;&apos;; clipsToBounds = YES; opaque = NO; gestureRecognizers = &lt;NSArray: 0x17805a3d0&gt;; layer = &lt;CALayer: 0x1782285e0&gt;; contentOffset: &#123;0, 0&#125;; contentSize: &#123;204, 24&#125;&gt;</div><div class=\"line\">   |    |    |    |    |    | &lt;_UIFieldEditorContentView: 0x1781981f0; frame = (0 0; 204 24); opaque = NO; userInteractionEnabled = NO; gestureRecognizers = &lt;NSArray: 0x1702441d0&gt;; layer = &lt;CALayer: 0x178227d40&gt;&gt;</div><div class=\"line\">   |    |    |    |    |    |    | &lt;UITextSelectionView: 0x14c50e2d0; frame = (0 0; 0 0); userInteractionEnabled = NO; layer = &lt;CALayer: 0x178227aa0&gt;&gt;</div><div class=\"line\">   |    |    |    |    |    | &lt;UIImageView: 0x1701ef500; frame = (200.5 12; 3.5 12); alpha = 0; opaque = NO; autoresize = LM; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17022f900&gt;&gt;</div><div class=\"line\">   |    |    |    |    |    | &lt;UIImageView: 0x1781ef200; frame = (197 20.5; 7 3.5); alpha = 0; opaque = NO; autoresize = TM; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17822ca60&gt;&gt;</div><div class=\"line\">   |    |    |    |    | &lt;UIImageView: 0x1701ee700; frame = (8 7.5; 13 13); opaque = NO; userInteractionEnabled = NO; animations = &#123; position=&lt;CABasicAnimation: 0x17822c0e0&gt;; &#125;; layer = &lt;CALayer: 0x17022a3c0&gt;&gt;</div><div class=\"line\">   |    |    |    | &lt;UINavigationButton: 0x14c615af0; frame = (258 6; 54 30); opaque = NO; animations = &#123; position=&lt;CABasicAnimation: 0x17822bc60&gt;; opacity=&lt;CABasicAnimation: 0x17822bf60&gt;; &#125;; layer = &lt;CALayer: 0x17003d180&gt;&gt;</div><div class=\"line\">   |    |    |    |    | &lt;UIButtonLabel: 0x14c60e1a0; frame = (0 4; 53.5 20.5); text = &apos;Cancel&apos;; opaque = NO; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x170087da0&gt;&gt;</div><div class=\"line\">   |    | &lt;UIView: 0x170198600; frame = (0 44; 320 0); animations = &#123; position=&lt;CABasicAnimation: 0x17022e180&gt;; &#125;; layer = &lt;CALayer: 0x17022aa00&gt;&gt;</div><div class=\"line\">   | &lt;UISearchDisplayControllerContainerView: 0x1701efe00; frame = (0 0; 320 568); autoresize = W+H; layer = &lt;CALayer: 0x17022d620&gt;&gt;</div><div class=\"line\">   |    | &lt;UIView: 0x170196e70; frame = (0 0; 320 568); layer = &lt;CALayer: 0x17022d800&gt;&gt;</div><div class=\"line\">   |    |    | &lt;UISearchResultsTableView: 0x14d046200; frame = (0 0; 320 568); clipsToBounds = YES; hidden = YES; autoresize = W+H; gestureRecognizers = &lt;NSArray: 0x170240450&gt;; layer = &lt;CALayer: 0x17022aa20&gt;; contentOffset: &#123;0, 0&#125;; contentSize: &#123;320, 44&#125;&gt;</div><div class=\"line\">   |    |    |    | &lt;UITableViewWrapperView: 0x14c6198f0; frame = (0 0; 320 568); gestureRecognizers = &lt;NSArray: 0x170240690&gt;; layer = &lt;CALayer: 0x17022ab00&gt;; contentOffset: &#123;0, 0&#125;; contentSize: &#123;320, 568&#125;&gt;</div><div class=\"line\">   |    |    |    |    | &lt;UITableViewCell: 0x14c60fe10; frame = (0 0; 320 44); text = &apos;搜索第一行&apos;; autoresize = W; layer = &lt;CALayer: 0x170225ac0&gt;&gt;</div><div class=\"line\">   |    |    |    |    |    | &lt;UITableViewCellContentView: 0x178196b30; frame = (0 0; 320 43.5); gestureRecognizers = &lt;NSArray: 0x17805a760&gt;; layer = &lt;CALayer: 0x17803a680&gt;&gt;</div><div class=\"line\">   |    |    |    |    |    |    | &lt;UITableViewLabel: 0x14c5049b0; frame = (15 0; 290 43.5); text = &apos;搜索第一行&apos;; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x178084f10&gt;&gt;</div><div class=\"line\">   |    |    |    |    |    |    |    | &lt;_UILabelContentLayer: 0x17003e820&gt; (layer)</div><div class=\"line\">   |    |    |    |    |    | &lt;_UITableViewCellSeparatorView: 0x1781c3840; frame = (15 43.5; 305 0.5); layer = &lt;CALayer: 0x17822bb20&gt;&gt;</div><div class=\"line\">   |    |    |    | &lt;UIImageView: 0x1701f0800; frame = (0 564.5; 320 3.5); alpha = 0; opaque = NO; autoresize = TM; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17022e6a0&gt;&gt;</div><div class=\"line\">   |    |    |    | &lt;UIImageView: 0x1701f0900; frame = (316.5 524; 3.5 44); alpha = 0; opaque = NO; autoresize = LM; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17022e880&gt;&gt;</div><div class=\"line\">   |    | &lt;UIView: 0x170197eb0; frame = (0 20; 320 44); animations = &#123; position=&lt;CABasicAnimation: 0x17022f0c0&gt;; &#125;; layer = &lt;CALayer: 0x17022d7c0&gt;&gt;</div><div class=\"line\">   |    | &lt;UIView: 0x170197f80; frame = (0 64; 320 504); animations = &#123; bounds.origin=&lt;CABasicAnimation: 0x17022f100&gt;; bounds.size=&lt;CABasicAnimation: 0x17022f160&gt;; position=&lt;CABasicAnimation: 0x17022f220&gt;; &#125;; layer = &lt;CALayer: 0x17022d7e0&gt;&gt;</div><div class=\"line\">   |    |    | &lt;_UISearchDisplayControllerDimmingView: 0x1701c3840; frame = (0 0; 320 504); alpha = 0.4; opaque = NO; autoresize = W+H; animations = &#123; position=&lt;CABasicAnimation: 0x17022f1a0&gt;; bounds.origin=&lt;CABasicAnimation: 0x17022f2c0&gt;; bounds.size=&lt;CABasicAnimation: 0x17022f320&gt;; opacity=&lt;CABasicAnimation: 0x17822c8c0&gt;; &#125;; layer = &lt;CALayer: 0x17022df60&gt;&gt;</div></pre></td></tr></table></figure></p>\n<p>打印出来的东西有点多，不要着急，要了解清楚这里面的结构还需要耐心和细心，我们先找到UISearchDisplayControllerContainerView，这个view下面有三个子view，其中一个子view中加载着UISearchResultsTableView，这个UISearchResultsTableView是估计大家都很熟悉吧，搜索出来的数据就是加载到这个UISearchResultsTableView上的，然后我们再仔细看看，三个子view中还有一个view下加载着_UISearchDisplayControllerDimmingView，我们试图在这个view上加一些东西，看看会有什么变化,我这里把预先初始化好了的提示页面加载到这个view上，代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)addTipsViewWithController：(UISearchDisplayController*)controller</div><div class=\"line\">&#123;</div><div class=\"line\">    UIView *supV = controller.searchResultsTableView.superview;</div><div class=\"line\">    UIView *supsupV = supV.superview;</div><div class=\"line\">    for (UIView *view in supsupV.subviews) &#123;</div><div class=\"line\">        for (UIView *sencondView in view.subviews) &#123;</div><div class=\"line\">            if ([sencondView isKindOfClass:[NSClassFromString(@&quot;_UISearchDisplayControllerDimmingView&quot;) class]]) &#123;</div><div class=\"line\">                NSLog(@&quot;_UISearchDisplayControllerDimmingView&quot;);</div><div class=\"line\">                if (![sencondView viewWithTag:99]) &#123;</div><div class=\"line\">                    [sencondView addSubview:self.tempSearchDisplayBackgroungView];</div><div class=\"line\">                &#125;</div><div class=\"line\">                sencondView.alpha = 1;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>或许你的 NSLog(@”_UISearchDisplayControllerDimmingView”);日志重来就没打印出来，不用着急，你可以延时加载此view<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)searchDisplayControllerWillBeginSearch:(UISearchDisplayController *)controller</div><div class=\"line\">&#123;</div><div class=\"line\">    [self performSelector:@selector(addTipsViewWithView:) withObject:controller afterDelay:0.1];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样就没问题了。然后我们来看看效果，是不是发现阴影层上有了我们自己加的页面呢？我们再修改下自己定义的提示页面，设置frame的大小为阴影层的大小，放在阴影层上，但每次都需要将阴影层的alpha设为1，如果每次设置，第二次以及后面搜索时，你加载的提示页面讲是透明的。最后来看看我的效果见下图：</p>\n<p><img src=\"/images/最终效果.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>遇到一些扩展性不是很强，或者布局复杂都不要着急，一定要静下心来慢慢查看，熟悉使用UIView的recursiveDescription，强调一定是UIView对象，如果觉得recursiveDescription打印出来的不够直观，推荐使用工具Reveal工具，不过他不是免费的哦。这款软件能直观立体的将试图展示出来，很快的定位试图结构。如有需要该文中提到的相关工程，可以到[这里][mark_SearchBar]下载。还有其他更好的方法，也希望大家多多交流。祝好！</p>\n<h2 id=\"mark-SearchBar-https-github-com-lyroger-SearchBarPro-SearchBarPro\"><a href=\"#mark-SearchBar-https-github-com-lyroger-SearchBarPro-SearchBarPro\" class=\"headerlink\" title=\"[mark_SearchBar]: https://github.com/lyroger/SearchBarPro (SearchBarPro)\"></a>[mark_SearchBar]: <a href=\"https://github.com/lyroger/SearchBarPro\">https://github.com/lyroger/SearchBarPro</a> (SearchBarPro)</h2><p>关注我的「lyroger」微信公众号：</p>\n<p><img src=\"/images/qrcode_for_gh_6f53ca8d5aea_258.jpg\" alt=\"\"></p>\n"},{"date":"2016-02-25T01:37:00.000Z","status":"public","title":"iOS基础深究","_content":"\n## 一、assign与weak的区别\nassign适用于基本数据类型，weak是适用于NSObject对象，并且是一个弱引用。 \nassign其实也可以用来修饰对象，那么我们为什么不用它呢？因为被assign修饰的对象在释放之后，指针的地址还是存在的，也就是说指针并没有被置为nil。如果在后续的内存分配中，刚好分到了这块地址，程序就会崩溃掉。 \n而weak修饰的对象在释放之后，指针地址会被置为nil。所以现在一般弱引用就是用weak。 \n所以在使用assign修饰对象，就有可能会导致程序EXC_BAD_ACCESS异常，也就是所谓的野指针错误！\n\n## 二、nonatomic与atomic\nnonatomic: 非原子性访问，对属性赋值的时候不加锁，多线程并发访问会提高性能。若不加此属性，则默认是两个访问方法都为原子型事务访问。\natomic:是Objc使用的一种线程保护技术，基本上来讲，是防止在写未完成的时候被另外一个线程读取，造成数据错误。而这种机制是耗费系统资源的，所以在iPhone这种小型设备上，如果没有使用多线程间的通讯编程，那么nonatomic是一个非常好的选择。\n\n## 三、ARC模式下重写set方法\n网上很多人说直接赋值就OK了，我感觉不太妥，这里我验证了下，如果是strong修饰的属性，是可以直接赋值的，如果是copy，那么需要copy一份了。看看下面代码\n1.首先定义两个copy属性及测试方法\n```objective-c\n@property (nonatomic,copy) NSString *test;\n@property (nonatomic,copy) NSMutableString *testMutableString;\n......\n//测试方法\n- (void)testProperty\n{\n    NSString *testString = @\"test\";\n    NSMutableString *testMutableString = [NSMutableString stringWithFormat:@\"testMutableString\"];\n    self.test = testString;\n    self.testMutableString = testMutableString;\n}\n```\n2.重写两个属性的set方法，验证直接赋值\n```objective-c\n- (void)setTest:(NSString *)test\n{\n    _test = test;\n    NSLog(@\"_test = %p,test = %p\",_test,test);\n}\n\n- (void)setTestMutableString:(NSMutableString *)testMutableString\n{\n    _testMutableString = testMutableString;\n    NSLog(@\"_testMutableString = %p,testMutableString = %p\",_testMutableString,testMutableString);\n}\n```\n打印出来的日志显示:\n```\n2016-02-25 10:23:30.618 DemoList[4341:2473539] _test = 0x1001364d0,test = 0x1001364d0\n2016-02-25 10:23:30.621 DemoList[4341:2473539] _testMutableString = 0x13ef2b950,testMutableString = 0x13ef2b950\n```\n直接赋值的方式从这里可以看出来，打印的地址都是一样的，只是引用而已，并没有产生新的对象。\n3.我们再来看看copy一份的结果。\n```objective-c\n- (void)setTest:(NSString *)test\n{\n    _test = [test copy];\n    NSLog(@\"_test = %p,test = %p\",_test,test);\n}\n\n- (void)setTestMutableString:(NSMutableString *)testMutableString\n{\n    _testMutableString = [testMutableString copy];\n    NSLog(@\"_testMutableString = %p,testMutableString = %p\",_testMutableString,testMutableString);\n}\n```\n//打印出来的日志显示\n```\n2016-02-25 10:12:26.642 DemoList[4332:2471119] _test = 0x10018a4d0,test = 0x10018a4d0\n2016-02-25 10:12:26.645 DemoList[4332:2471119] _testMutableString = 0x15d76b6d0,testMutableString = 0x15d6abd40\n```\n这个时候你会发现，NSString的属性地址还是一样的，NSMutabeString的属性地址不一样了，这样就对了，NSString的属性其实希望的就是引用一份，而可变字符的就是希望真正的copy一份，如果地址还一样，那么就没必要使用可变的对象了。\n总结下ARC模式的set方法，使用copy修饰属性时，最好使用copy去赋值。其他的可以直接赋值就是了。\n\n## 四、block属性为什么需要使用copy修饰\n因为block变量默认是声明为栈变量的，为了能够在block的声明域外使用，所以要把block拷贝（copy）到堆，所以说为了block属性声明和实际的操作一致，最好声明为copy。","source":"_posts/iOS基础深究.md","raw":"---\ndate: 2016-02-25 09:37\nstatus: public\ntitle: iOS基础深究\ncategory: 基础篇\n---\n\n## 一、assign与weak的区别\nassign适用于基本数据类型，weak是适用于NSObject对象，并且是一个弱引用。 \nassign其实也可以用来修饰对象，那么我们为什么不用它呢？因为被assign修饰的对象在释放之后，指针的地址还是存在的，也就是说指针并没有被置为nil。如果在后续的内存分配中，刚好分到了这块地址，程序就会崩溃掉。 \n而weak修饰的对象在释放之后，指针地址会被置为nil。所以现在一般弱引用就是用weak。 \n所以在使用assign修饰对象，就有可能会导致程序EXC_BAD_ACCESS异常，也就是所谓的野指针错误！\n\n## 二、nonatomic与atomic\nnonatomic: 非原子性访问，对属性赋值的时候不加锁，多线程并发访问会提高性能。若不加此属性，则默认是两个访问方法都为原子型事务访问。\natomic:是Objc使用的一种线程保护技术，基本上来讲，是防止在写未完成的时候被另外一个线程读取，造成数据错误。而这种机制是耗费系统资源的，所以在iPhone这种小型设备上，如果没有使用多线程间的通讯编程，那么nonatomic是一个非常好的选择。\n\n## 三、ARC模式下重写set方法\n网上很多人说直接赋值就OK了，我感觉不太妥，这里我验证了下，如果是strong修饰的属性，是可以直接赋值的，如果是copy，那么需要copy一份了。看看下面代码\n1.首先定义两个copy属性及测试方法\n```objective-c\n@property (nonatomic,copy) NSString *test;\n@property (nonatomic,copy) NSMutableString *testMutableString;\n......\n//测试方法\n- (void)testProperty\n{\n    NSString *testString = @\"test\";\n    NSMutableString *testMutableString = [NSMutableString stringWithFormat:@\"testMutableString\"];\n    self.test = testString;\n    self.testMutableString = testMutableString;\n}\n```\n2.重写两个属性的set方法，验证直接赋值\n```objective-c\n- (void)setTest:(NSString *)test\n{\n    _test = test;\n    NSLog(@\"_test = %p,test = %p\",_test,test);\n}\n\n- (void)setTestMutableString:(NSMutableString *)testMutableString\n{\n    _testMutableString = testMutableString;\n    NSLog(@\"_testMutableString = %p,testMutableString = %p\",_testMutableString,testMutableString);\n}\n```\n打印出来的日志显示:\n```\n2016-02-25 10:23:30.618 DemoList[4341:2473539] _test = 0x1001364d0,test = 0x1001364d0\n2016-02-25 10:23:30.621 DemoList[4341:2473539] _testMutableString = 0x13ef2b950,testMutableString = 0x13ef2b950\n```\n直接赋值的方式从这里可以看出来，打印的地址都是一样的，只是引用而已，并没有产生新的对象。\n3.我们再来看看copy一份的结果。\n```objective-c\n- (void)setTest:(NSString *)test\n{\n    _test = [test copy];\n    NSLog(@\"_test = %p,test = %p\",_test,test);\n}\n\n- (void)setTestMutableString:(NSMutableString *)testMutableString\n{\n    _testMutableString = [testMutableString copy];\n    NSLog(@\"_testMutableString = %p,testMutableString = %p\",_testMutableString,testMutableString);\n}\n```\n//打印出来的日志显示\n```\n2016-02-25 10:12:26.642 DemoList[4332:2471119] _test = 0x10018a4d0,test = 0x10018a4d0\n2016-02-25 10:12:26.645 DemoList[4332:2471119] _testMutableString = 0x15d76b6d0,testMutableString = 0x15d6abd40\n```\n这个时候你会发现，NSString的属性地址还是一样的，NSMutabeString的属性地址不一样了，这样就对了，NSString的属性其实希望的就是引用一份，而可变字符的就是希望真正的copy一份，如果地址还一样，那么就没必要使用可变的对象了。\n总结下ARC模式的set方法，使用copy修饰属性时，最好使用copy去赋值。其他的可以直接赋值就是了。\n\n## 四、block属性为什么需要使用copy修饰\n因为block变量默认是声明为栈变量的，为了能够在block的声明域外使用，所以要把block拷贝（copy）到堆，所以说为了block属性声明和实际的操作一致，最好声明为copy。","slug":"iOS基础深究","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7foce000ozn3masfu0svl","content":"<h2 id=\"一、assign与weak的区别\"><a href=\"#一、assign与weak的区别\" class=\"headerlink\" title=\"一、assign与weak的区别\"></a>一、assign与weak的区别</h2><p>assign适用于基本数据类型，weak是适用于NSObject对象，并且是一个弱引用。<br>assign其实也可以用来修饰对象，那么我们为什么不用它呢？因为被assign修饰的对象在释放之后，指针的地址还是存在的，也就是说指针并没有被置为nil。如果在后续的内存分配中，刚好分到了这块地址，程序就会崩溃掉。<br>而weak修饰的对象在释放之后，指针地址会被置为nil。所以现在一般弱引用就是用weak。<br>所以在使用assign修饰对象，就有可能会导致程序EXC_BAD_ACCESS异常，也就是所谓的野指针错误！</p>\n<h2 id=\"二、nonatomic与atomic\"><a href=\"#二、nonatomic与atomic\" class=\"headerlink\" title=\"二、nonatomic与atomic\"></a>二、nonatomic与atomic</h2><p>nonatomic: 非原子性访问，对属性赋值的时候不加锁，多线程并发访问会提高性能。若不加此属性，则默认是两个访问方法都为原子型事务访问。<br>atomic:是Objc使用的一种线程保护技术，基本上来讲，是防止在写未完成的时候被另外一个线程读取，造成数据错误。而这种机制是耗费系统资源的，所以在iPhone这种小型设备上，如果没有使用多线程间的通讯编程，那么nonatomic是一个非常好的选择。</p>\n<h2 id=\"三、ARC模式下重写set方法\"><a href=\"#三、ARC模式下重写set方法\" class=\"headerlink\" title=\"三、ARC模式下重写set方法\"></a>三、ARC模式下重写set方法</h2><p>网上很多人说直接赋值就OK了，我感觉不太妥，这里我验证了下，如果是strong修饰的属性，是可以直接赋值的，如果是copy，那么需要copy一份了。看看下面代码<br>1.首先定义两个copy属性及测试方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@property (nonatomic,copy) NSString *test;</div><div class=\"line\">@property (nonatomic,copy) NSMutableString *testMutableString;</div><div class=\"line\">......</div><div class=\"line\">//测试方法</div><div class=\"line\">- (void)testProperty</div><div class=\"line\">&#123;</div><div class=\"line\">    NSString *testString = @&quot;test&quot;;</div><div class=\"line\">    NSMutableString *testMutableString = [NSMutableString stringWithFormat:@&quot;testMutableString&quot;];</div><div class=\"line\">    self.test = testString;</div><div class=\"line\">    self.testMutableString = testMutableString;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.重写两个属性的set方法，验证直接赋值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)setTest:(NSString *)test</div><div class=\"line\">&#123;</div><div class=\"line\">    _test = test;</div><div class=\"line\">    NSLog(@&quot;_test = %p,test = %p&quot;,_test,test);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setTestMutableString:(NSMutableString *)testMutableString</div><div class=\"line\">&#123;</div><div class=\"line\">    _testMutableString = testMutableString;</div><div class=\"line\">    NSLog(@&quot;_testMutableString = %p,testMutableString = %p&quot;,_testMutableString,testMutableString);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>打印出来的日志显示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-02-25 10:23:30.618 DemoList[4341:2473539] _test = 0x1001364d0,test = 0x1001364d0</div><div class=\"line\">2016-02-25 10:23:30.621 DemoList[4341:2473539] _testMutableString = 0x13ef2b950,testMutableString = 0x13ef2b950</div></pre></td></tr></table></figure></p>\n<p>直接赋值的方式从这里可以看出来，打印的地址都是一样的，只是引用而已，并没有产生新的对象。<br>3.我们再来看看copy一份的结果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)setTest:(NSString *)test</div><div class=\"line\">&#123;</div><div class=\"line\">    _test = [test copy];</div><div class=\"line\">    NSLog(@&quot;_test = %p,test = %p&quot;,_test,test);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setTestMutableString:(NSMutableString *)testMutableString</div><div class=\"line\">&#123;</div><div class=\"line\">    _testMutableString = [testMutableString copy];</div><div class=\"line\">    NSLog(@&quot;_testMutableString = %p,testMutableString = %p&quot;,_testMutableString,testMutableString);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>//打印出来的日志显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-02-25 10:12:26.642 DemoList[4332:2471119] _test = 0x10018a4d0,test = 0x10018a4d0</div><div class=\"line\">2016-02-25 10:12:26.645 DemoList[4332:2471119] _testMutableString = 0x15d76b6d0,testMutableString = 0x15d6abd40</div></pre></td></tr></table></figure></p>\n<p>这个时候你会发现，NSString的属性地址还是一样的，NSMutabeString的属性地址不一样了，这样就对了，NSString的属性其实希望的就是引用一份，而可变字符的就是希望真正的copy一份，如果地址还一样，那么就没必要使用可变的对象了。<br>总结下ARC模式的set方法，使用copy修饰属性时，最好使用copy去赋值。其他的可以直接赋值就是了。</p>\n<h2 id=\"四、block属性为什么需要使用copy修饰\"><a href=\"#四、block属性为什么需要使用copy修饰\" class=\"headerlink\" title=\"四、block属性为什么需要使用copy修饰\"></a>四、block属性为什么需要使用copy修饰</h2><p>因为block变量默认是声明为栈变量的，为了能够在block的声明域外使用，所以要把block拷贝（copy）到堆，所以说为了block属性声明和实际的操作一致，最好声明为copy。</p>\n","excerpt":"","more":"<h2 id=\"一、assign与weak的区别\"><a href=\"#一、assign与weak的区别\" class=\"headerlink\" title=\"一、assign与weak的区别\"></a>一、assign与weak的区别</h2><p>assign适用于基本数据类型，weak是适用于NSObject对象，并且是一个弱引用。<br>assign其实也可以用来修饰对象，那么我们为什么不用它呢？因为被assign修饰的对象在释放之后，指针的地址还是存在的，也就是说指针并没有被置为nil。如果在后续的内存分配中，刚好分到了这块地址，程序就会崩溃掉。<br>而weak修饰的对象在释放之后，指针地址会被置为nil。所以现在一般弱引用就是用weak。<br>所以在使用assign修饰对象，就有可能会导致程序EXC_BAD_ACCESS异常，也就是所谓的野指针错误！</p>\n<h2 id=\"二、nonatomic与atomic\"><a href=\"#二、nonatomic与atomic\" class=\"headerlink\" title=\"二、nonatomic与atomic\"></a>二、nonatomic与atomic</h2><p>nonatomic: 非原子性访问，对属性赋值的时候不加锁，多线程并发访问会提高性能。若不加此属性，则默认是两个访问方法都为原子型事务访问。<br>atomic:是Objc使用的一种线程保护技术，基本上来讲，是防止在写未完成的时候被另外一个线程读取，造成数据错误。而这种机制是耗费系统资源的，所以在iPhone这种小型设备上，如果没有使用多线程间的通讯编程，那么nonatomic是一个非常好的选择。</p>\n<h2 id=\"三、ARC模式下重写set方法\"><a href=\"#三、ARC模式下重写set方法\" class=\"headerlink\" title=\"三、ARC模式下重写set方法\"></a>三、ARC模式下重写set方法</h2><p>网上很多人说直接赋值就OK了，我感觉不太妥，这里我验证了下，如果是strong修饰的属性，是可以直接赋值的，如果是copy，那么需要copy一份了。看看下面代码<br>1.首先定义两个copy属性及测试方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@property (nonatomic,copy) NSString *test;</div><div class=\"line\">@property (nonatomic,copy) NSMutableString *testMutableString;</div><div class=\"line\">......</div><div class=\"line\">//测试方法</div><div class=\"line\">- (void)testProperty</div><div class=\"line\">&#123;</div><div class=\"line\">    NSString *testString = @&quot;test&quot;;</div><div class=\"line\">    NSMutableString *testMutableString = [NSMutableString stringWithFormat:@&quot;testMutableString&quot;];</div><div class=\"line\">    self.test = testString;</div><div class=\"line\">    self.testMutableString = testMutableString;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.重写两个属性的set方法，验证直接赋值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)setTest:(NSString *)test</div><div class=\"line\">&#123;</div><div class=\"line\">    _test = test;</div><div class=\"line\">    NSLog(@&quot;_test = %p,test = %p&quot;,_test,test);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setTestMutableString:(NSMutableString *)testMutableString</div><div class=\"line\">&#123;</div><div class=\"line\">    _testMutableString = testMutableString;</div><div class=\"line\">    NSLog(@&quot;_testMutableString = %p,testMutableString = %p&quot;,_testMutableString,testMutableString);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>打印出来的日志显示:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-02-25 10:23:30.618 DemoList[4341:2473539] _test = 0x1001364d0,test = 0x1001364d0</div><div class=\"line\">2016-02-25 10:23:30.621 DemoList[4341:2473539] _testMutableString = 0x13ef2b950,testMutableString = 0x13ef2b950</div></pre></td></tr></table></figure></p>\n<p>直接赋值的方式从这里可以看出来，打印的地址都是一样的，只是引用而已，并没有产生新的对象。<br>3.我们再来看看copy一份的结果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)setTest:(NSString *)test</div><div class=\"line\">&#123;</div><div class=\"line\">    _test = [test copy];</div><div class=\"line\">    NSLog(@&quot;_test = %p,test = %p&quot;,_test,test);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setTestMutableString:(NSMutableString *)testMutableString</div><div class=\"line\">&#123;</div><div class=\"line\">    _testMutableString = [testMutableString copy];</div><div class=\"line\">    NSLog(@&quot;_testMutableString = %p,testMutableString = %p&quot;,_testMutableString,testMutableString);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>//打印出来的日志显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">2016-02-25 10:12:26.642 DemoList[4332:2471119] _test = 0x10018a4d0,test = 0x10018a4d0</div><div class=\"line\">2016-02-25 10:12:26.645 DemoList[4332:2471119] _testMutableString = 0x15d76b6d0,testMutableString = 0x15d6abd40</div></pre></td></tr></table></figure></p>\n<p>这个时候你会发现，NSString的属性地址还是一样的，NSMutabeString的属性地址不一样了，这样就对了，NSString的属性其实希望的就是引用一份，而可变字符的就是希望真正的copy一份，如果地址还一样，那么就没必要使用可变的对象了。<br>总结下ARC模式的set方法，使用copy修饰属性时，最好使用copy去赋值。其他的可以直接赋值就是了。</p>\n<h2 id=\"四、block属性为什么需要使用copy修饰\"><a href=\"#四、block属性为什么需要使用copy修饰\" class=\"headerlink\" title=\"四、block属性为什么需要使用copy修饰\"></a>四、block属性为什么需要使用copy修饰</h2><p>因为block变量默认是声明为栈变量的，为了能够在block的声明域外使用，所以要把block拷贝（copy）到堆，所以说为了block属性声明和实际的操作一致，最好声明为copy。</p>\n"},{"date":"2015-12-31T08:48:00.000Z","status":"public","title":"runtime那些事（一）","_content":"\n> 工作中，确实没有刻意去使用runtime机制，作为一种实用的机制，我们不得不去累积这些知识，然后灵活使用。为了为runtime的知识累积，准备写一些关于runtime系列的文章。\n#### 一、消息转发机制\n下面一张图详细的概括了每个函数调用的先后以及执行的前提\n\n![](/images/runtime消息转发.png)","source":"_posts/runtime那些事（一）.md","raw":"---\ndate: 2015-12-31 16:48\nstatus: public\ntitle: runtime那些事（一）\ncategory: 高效篇\ntag: runtime\n---\n\n> 工作中，确实没有刻意去使用runtime机制，作为一种实用的机制，我们不得不去累积这些知识，然后灵活使用。为了为runtime的知识累积，准备写一些关于runtime系列的文章。\n#### 一、消息转发机制\n下面一张图详细的概括了每个函数调用的先后以及执行的前提\n\n![](/images/runtime消息转发.png)","slug":"runtime那些事（一）","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7focg000rzn3mi95c67yh","content":"<blockquote>\n<p>工作中，确实没有刻意去使用runtime机制，作为一种实用的机制，我们不得不去累积这些知识，然后灵活使用。为了为runtime的知识累积，准备写一些关于runtime系列的文章。</p>\n<h4 id=\"一、消息转发机制\"><a href=\"#一、消息转发机制\" class=\"headerlink\" title=\"一、消息转发机制\"></a>一、消息转发机制</h4><p>下面一张图详细的概括了每个函数调用的先后以及执行的前提</p>\n</blockquote>\n<p><img src=\"/images/runtime消息转发.png\" alt=\"\"></p>\n","excerpt":"","more":"<blockquote>\n<p>工作中，确实没有刻意去使用runtime机制，作为一种实用的机制，我们不得不去累积这些知识，然后灵活使用。为了为runtime的知识累积，准备写一些关于runtime系列的文章。</p>\n<h4 id=\"一、消息转发机制\"><a href=\"#一、消息转发机制\" class=\"headerlink\" title=\"一、消息转发机制\"></a>一、消息转发机制</h4><p>下面一张图详细的概括了每个函数调用的先后以及执行的前提</p>\n</blockquote>\n<p><img src=\"/images/runtime消息转发.png\" alt=\"\"></p>\n"},{"date":"2016-07-18T03:26:00.000Z","status":"public","title":"swift实战","_content":"\n## OC调用swift方式\n在OC代码中引入头文件 #import \"项目名称-swift.h\"\n即可用OC语法调用swift写的代码了。\n## swift中如何写Block\n在swift中定义一个闭包的关键词为 `typealias`\n在A类中定义一个闭包\n```swift\n//定义一个闭包\ntypealias LoginSuceesedBlock = (successed:Bool)->Void\nclass LoginViewController:UIViewController{\n    //将函数指针赋值给loginActionBlock闭包\n    func initWithBlock(closure:LoginSuceesedBlock?){\n        loginActionBlock = closure\n    }\n    private func loginAction(sender:AnyObject?) {\n        let loginSuccessed:Bool = loginViewModel.loginRequestAction(textUserName.text!,passWord: textPwd.text!)\n        if loginSuccessed {\n            //block 回调\n            if (loginActionBlock != nil) {\n                self.loginActionBlock!(successed: true)\n            }\n        } else {\n            let alert:UIAlertView =  UIAlertView()\n            alert.title = \"提示\"\n            alert.message = \"登录失败\"\n            alert.addButtonWithTitle(\"OK\")\n            alert.show()\n        }\n    }\n}\n```\n在B类中传一个函数到A类\n```swift\nfunc authorizeOperation() {\n        let loginVC = LoginViewController()\n        loginVC.initWithBlock(loginActionSuccessed)\n        self.navigationController?.pushViewController(loginVC, animated: true)\n    }\nfunc loginActionSuccessed(successed:Bool) -> Void {\n        if successed {\n            //todo loginSuccessed something\n        }\n    }\n```\n\n","source":"_posts/swift实战.md","raw":"---\ndate: 2016-07-18 11:26\nstatus: public\ntitle: swift实战\ncategory: swift\ntag: swift\n---\n\n## OC调用swift方式\n在OC代码中引入头文件 #import \"项目名称-swift.h\"\n即可用OC语法调用swift写的代码了。\n## swift中如何写Block\n在swift中定义一个闭包的关键词为 `typealias`\n在A类中定义一个闭包\n```swift\n//定义一个闭包\ntypealias LoginSuceesedBlock = (successed:Bool)->Void\nclass LoginViewController:UIViewController{\n    //将函数指针赋值给loginActionBlock闭包\n    func initWithBlock(closure:LoginSuceesedBlock?){\n        loginActionBlock = closure\n    }\n    private func loginAction(sender:AnyObject?) {\n        let loginSuccessed:Bool = loginViewModel.loginRequestAction(textUserName.text!,passWord: textPwd.text!)\n        if loginSuccessed {\n            //block 回调\n            if (loginActionBlock != nil) {\n                self.loginActionBlock!(successed: true)\n            }\n        } else {\n            let alert:UIAlertView =  UIAlertView()\n            alert.title = \"提示\"\n            alert.message = \"登录失败\"\n            alert.addButtonWithTitle(\"OK\")\n            alert.show()\n        }\n    }\n}\n```\n在B类中传一个函数到A类\n```swift\nfunc authorizeOperation() {\n        let loginVC = LoginViewController()\n        loginVC.initWithBlock(loginActionSuccessed)\n        self.navigationController?.pushViewController(loginVC, animated: true)\n    }\nfunc loginActionSuccessed(successed:Bool) -> Void {\n        if successed {\n            //todo loginSuccessed something\n        }\n    }\n```\n\n","slug":"swift实战","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7focj000tzn3mpiocoroc","content":"<h2 id=\"OC调用swift方式\"><a href=\"#OC调用swift方式\" class=\"headerlink\" title=\"OC调用swift方式\"></a>OC调用swift方式</h2><p>在OC代码中引入头文件 #import “项目名称-swift.h”<br>即可用OC语法调用swift写的代码了。</p>\n<h2 id=\"swift中如何写Block\"><a href=\"#swift中如何写Block\" class=\"headerlink\" title=\"swift中如何写Block\"></a>swift中如何写Block</h2><p>在swift中定义一个闭包的关键词为 <code>typealias</code><br>在A类中定义一个闭包<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个闭包</span></div><div class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">LoginSuceesedBlock</span> = (successed:<span class=\"type\">Bool</span>)-&gt;<span class=\"type\">Void</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginViewController</span>:<span class=\"title\">UIViewController</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//将函数指针赋值给loginActionBlock闭包</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initWithBlock</span><span class=\"params\">(closure:LoginSuceesedBlock?)</span></span>&#123;</div><div class=\"line\">        loginActionBlock = closure</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loginAction</span><span class=\"params\">(sender:AnyObject?)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> loginSuccessed:<span class=\"type\">Bool</span> = loginViewModel.loginRequestAction(textUserName.text!,passWord: textPwd.text!)</div><div class=\"line\">        <span class=\"keyword\">if</span> loginSuccessed &#123;</div><div class=\"line\">            <span class=\"comment\">//block 回调</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (loginActionBlock != <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">self</span>.loginActionBlock!(successed: <span class=\"literal\">true</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> alert:<span class=\"type\">UIAlertView</span> =  <span class=\"type\">UIAlertView</span>()</div><div class=\"line\">            alert.title = <span class=\"string\">\"提示\"</span></div><div class=\"line\">            alert.message = <span class=\"string\">\"登录失败\"</span></div><div class=\"line\">            alert.addButtonWithTitle(<span class=\"string\">\"OK\"</span>)</div><div class=\"line\">            alert.show()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在B类中传一个函数到A类<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">authorizeOperation</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> loginVC = <span class=\"type\">LoginViewController</span>()</div><div class=\"line\">        loginVC.initWithBlock(loginActionSuccessed)</div><div class=\"line\">        <span class=\"keyword\">self</span>.navigationController?.pushViewController(loginVC, animated: <span class=\"literal\">true</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loginActionSuccessed</span><span class=\"params\">(successed:Bool)</span></span> -&gt; <span class=\"type\">Void</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> successed &#123;</div><div class=\"line\">            <span class=\"comment\">//todo loginSuccessed something</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h2 id=\"OC调用swift方式\"><a href=\"#OC调用swift方式\" class=\"headerlink\" title=\"OC调用swift方式\"></a>OC调用swift方式</h2><p>在OC代码中引入头文件 #import “项目名称-swift.h”<br>即可用OC语法调用swift写的代码了。</p>\n<h2 id=\"swift中如何写Block\"><a href=\"#swift中如何写Block\" class=\"headerlink\" title=\"swift中如何写Block\"></a>swift中如何写Block</h2><p>在swift中定义一个闭包的关键词为 <code>typealias</code><br>在A类中定义一个闭包<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个闭包</span></div><div class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">LoginSuceesedBlock</span> = (successed:<span class=\"type\">Bool</span>)-&gt;<span class=\"type\">Void</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginViewController</span>:<span class=\"title\">UIViewController</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//将函数指针赋值给loginActionBlock闭包</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initWithBlock</span><span class=\"params\">(closure:LoginSuceesedBlock?)</span></span>&#123;</div><div class=\"line\">        loginActionBlock = closure</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loginAction</span><span class=\"params\">(sender:AnyObject?)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> loginSuccessed:<span class=\"type\">Bool</span> = loginViewModel.loginRequestAction(textUserName.text!,passWord: textPwd.text!)</div><div class=\"line\">        <span class=\"keyword\">if</span> loginSuccessed &#123;</div><div class=\"line\">            <span class=\"comment\">//block 回调</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (loginActionBlock != <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">self</span>.loginActionBlock!(successed: <span class=\"literal\">true</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> alert:<span class=\"type\">UIAlertView</span> =  <span class=\"type\">UIAlertView</span>()</div><div class=\"line\">            alert.title = <span class=\"string\">\"提示\"</span></div><div class=\"line\">            alert.message = <span class=\"string\">\"登录失败\"</span></div><div class=\"line\">            alert.addButtonWithTitle(<span class=\"string\">\"OK\"</span>)</div><div class=\"line\">            alert.show()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在B类中传一个函数到A类<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">authorizeOperation</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> loginVC = <span class=\"type\">LoginViewController</span>()</div><div class=\"line\">        loginVC.initWithBlock(loginActionSuccessed)</div><div class=\"line\">        <span class=\"keyword\">self</span>.navigationController?.pushViewController(loginVC, animated: <span class=\"literal\">true</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">loginActionSuccessed</span><span class=\"params\">(successed:Bool)</span></span> -&gt; <span class=\"type\">Void</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> successed &#123;</div><div class=\"line\">            <span class=\"comment\">//todo loginSuccessed something</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n"},{"date":"2015-12-14T06:35:00.000Z","status":"public","title":"swift学习笔记（基础篇）","_content":"\n####一数值型字面量\n* 一个十进制数，没有前缀\n* 一个二进制数，前缀是0b\n* 一个八进制数，前缀是0o\n* 一个十六进制数，前缀是0x\n\n列如：下面的所有整数字面量的十进制值都是17\n>let decimalInteger = 17\nlet binaryInteger = 0b10001       // 二进制的17\nlet octalInteger = 0o21           // 八进制的17\nlet hexadecimalInteger = 0x11     // 十六进制的17","source":"_posts/swift学习笔记（基础篇）.md","raw":"---\ndate: 2015-12-14 14:35\nstatus: public\ntitle: swift学习笔记（基础篇）\ncategory: swift\n---\n\n####一数值型字面量\n* 一个十进制数，没有前缀\n* 一个二进制数，前缀是0b\n* 一个八进制数，前缀是0o\n* 一个十六进制数，前缀是0x\n\n列如：下面的所有整数字面量的十进制值都是17\n>let decimalInteger = 17\nlet binaryInteger = 0b10001       // 二进制的17\nlet octalInteger = 0o21           // 八进制的17\nlet hexadecimalInteger = 0x11     // 十六进制的17","slug":"swift学习笔记（基础篇）","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7focn000xzn3malf8fcjq","content":"<p>####一数值型字面量</p>\n<ul>\n<li>一个十进制数，没有前缀</li>\n<li>一个二进制数，前缀是0b</li>\n<li>一个八进制数，前缀是0o</li>\n<li>一个十六进制数，前缀是0x</li>\n</ul>\n<p>列如：下面的所有整数字面量的十进制值都是17</p>\n<blockquote>\n<p>let decimalInteger = 17<br>let binaryInteger = 0b10001       // 二进制的17<br>let octalInteger = 0o21           // 八进制的17<br>let hexadecimalInteger = 0x11     // 十六进制的17</p>\n</blockquote>\n","excerpt":"","more":"<p>####一数值型字面量</p>\n<ul>\n<li>一个十进制数，没有前缀</li>\n<li>一个二进制数，前缀是0b</li>\n<li>一个八进制数，前缀是0o</li>\n<li>一个十六进制数，前缀是0x</li>\n</ul>\n<p>列如：下面的所有整数字面量的十进制值都是17</p>\n<blockquote>\n<p>let decimalInteger = 17<br>let binaryInteger = 0b10001       // 二进制的17<br>let octalInteger = 0o21           // 八进制的17<br>let hexadecimalInteger = 0x11     // 十六进制的17</p>\n</blockquote>\n"},{"date":"2016-02-24T02:47:00.000Z","status":"public","title":"关于字符串的分割","_content":"\n今天在字符串分割上遇到一个坑，一不小心便踩了，问题是这样的：我接收到服务端传过来的一个包含多个图片地址的字符串，使用“,”分割，我使用\"componentsSeparatedByString:\"来分割，将多个图片地址存入数组，并根据数组的个数来加载默认图片，等图片下载完成后替换对应的默认图片。现在服务端给我返回了一个@\"\"字符串，我的代码如下:\n```objective-c\n    NSArray *descImages = [descImage componentsSeparatedByString:@\",\"];\n```\n其实这个时候descImage等于\"\"，但使用\"componentsSeparatedByString:\"分割返回的数组是有一个对象的，就是一个空字符串，这个可能我并没想到，导致服务端返回空字符串时，我这边也多加载了一个图片，这个图片还一直下载不下来。这个也让我明白：\"componentsSeparatedByString:\"的意思，有分割字符就根据字符分割返回数组，没分割字符则返回被分割的字符串，@\"\"也是一个字符串，它也是有内存地址的，跟nil并不一样。看看下面的代码就明白了:\n```objective-c\n- (void)testComponentSeparatedByString\n{\n    NSString *descImage = @\"\";\n    NSArray *descImages = [descImage componentsSeparatedByString:@\",\"];\n    NSLog(@\"descImages = %@,descImages.count=%zd,descImage = %p,nil= %p\",descImages,descImages.count,descImage,nil);\n}\n打印出来的\ndescImages = (\n    \"\"\n),descImages.count=1,descImage = 0x1001d5690,nil= 0x0\n```\n因此要解决这个问题就得加一个判断给descImage.length>0即可。\n### 衍生学习\ncomponentsSeparatedByCharactersInSet的使用，使用多个字符分割字符串：\n```objective-c\nNSString *str = @\"A~B^C\";\nNSArray *arr = [str componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@\"^~\"]];\nNSLog(@\"%@\", arr);\n打印出来\n(\n    A,\n    B,\n    C\n)\n```","source":"_posts/关于字符串的分割.md","raw":"---\ndate: 2016-02-24 10:47\nstatus: public\ntitle: 关于字符串的分割\ncategory: 基础篇\n---\n\n今天在字符串分割上遇到一个坑，一不小心便踩了，问题是这样的：我接收到服务端传过来的一个包含多个图片地址的字符串，使用“,”分割，我使用\"componentsSeparatedByString:\"来分割，将多个图片地址存入数组，并根据数组的个数来加载默认图片，等图片下载完成后替换对应的默认图片。现在服务端给我返回了一个@\"\"字符串，我的代码如下:\n```objective-c\n    NSArray *descImages = [descImage componentsSeparatedByString:@\",\"];\n```\n其实这个时候descImage等于\"\"，但使用\"componentsSeparatedByString:\"分割返回的数组是有一个对象的，就是一个空字符串，这个可能我并没想到，导致服务端返回空字符串时，我这边也多加载了一个图片，这个图片还一直下载不下来。这个也让我明白：\"componentsSeparatedByString:\"的意思，有分割字符就根据字符分割返回数组，没分割字符则返回被分割的字符串，@\"\"也是一个字符串，它也是有内存地址的，跟nil并不一样。看看下面的代码就明白了:\n```objective-c\n- (void)testComponentSeparatedByString\n{\n    NSString *descImage = @\"\";\n    NSArray *descImages = [descImage componentsSeparatedByString:@\",\"];\n    NSLog(@\"descImages = %@,descImages.count=%zd,descImage = %p,nil= %p\",descImages,descImages.count,descImage,nil);\n}\n打印出来的\ndescImages = (\n    \"\"\n),descImages.count=1,descImage = 0x1001d5690,nil= 0x0\n```\n因此要解决这个问题就得加一个判断给descImage.length>0即可。\n### 衍生学习\ncomponentsSeparatedByCharactersInSet的使用，使用多个字符分割字符串：\n```objective-c\nNSString *str = @\"A~B^C\";\nNSArray *arr = [str componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@\"^~\"]];\nNSLog(@\"%@\", arr);\n打印出来\n(\n    A,\n    B,\n    C\n)\n```","slug":"关于字符串的分割","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7foco000zzn3mrbkfah84","content":"<p>今天在字符串分割上遇到一个坑，一不小心便踩了，问题是这样的：我接收到服务端传过来的一个包含多个图片地址的字符串，使用“,”分割，我使用”componentsSeparatedByString:”来分割，将多个图片地址存入数组，并根据数组的个数来加载默认图片，等图片下载完成后替换对应的默认图片。现在服务端给我返回了一个@””字符串，我的代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSArray *descImages = [descImage componentsSeparatedByString:@&quot;,&quot;];</div></pre></td></tr></table></figure></p>\n<p>其实这个时候descImage等于””，但使用”componentsSeparatedByString:”分割返回的数组是有一个对象的，就是一个空字符串，这个可能我并没想到，导致服务端返回空字符串时，我这边也多加载了一个图片，这个图片还一直下载不下来。这个也让我明白：”componentsSeparatedByString:”的意思，有分割字符就根据字符分割返回数组，没分割字符则返回被分割的字符串，@””也是一个字符串，它也是有内存地址的，跟nil并不一样。看看下面的代码就明白了:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)testComponentSeparatedByString</div><div class=\"line\">&#123;</div><div class=\"line\">    NSString *descImage = @&quot;&quot;;</div><div class=\"line\">    NSArray *descImages = [descImage componentsSeparatedByString:@&quot;,&quot;];</div><div class=\"line\">    NSLog(@&quot;descImages = %@,descImages.count=%zd,descImage = %p,nil= %p&quot;,descImages,descImages.count,descImage,nil);</div><div class=\"line\">&#125;</div><div class=\"line\">打印出来的</div><div class=\"line\">descImages = (</div><div class=\"line\">    &quot;&quot;</div><div class=\"line\">),descImages.count=1,descImage = 0x1001d5690,nil= 0x0</div></pre></td></tr></table></figure></p>\n<p>因此要解决这个问题就得加一个判断给descImage.length&gt;0即可。</p>\n<h3 id=\"衍生学习\"><a href=\"#衍生学习\" class=\"headerlink\" title=\"衍生学习\"></a>衍生学习</h3><p>componentsSeparatedByCharactersInSet的使用，使用多个字符分割字符串：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSString *str = @&quot;A~B^C&quot;;</div><div class=\"line\">NSArray *arr = [str componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@&quot;^~&quot;]];</div><div class=\"line\">NSLog(@&quot;%@&quot;, arr);</div><div class=\"line\">打印出来</div><div class=\"line\">(</div><div class=\"line\">    A,</div><div class=\"line\">    B,</div><div class=\"line\">    C</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>今天在字符串分割上遇到一个坑，一不小心便踩了，问题是这样的：我接收到服务端传过来的一个包含多个图片地址的字符串，使用“,”分割，我使用”componentsSeparatedByString:”来分割，将多个图片地址存入数组，并根据数组的个数来加载默认图片，等图片下载完成后替换对应的默认图片。现在服务端给我返回了一个@””字符串，我的代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSArray *descImages = [descImage componentsSeparatedByString:@&quot;,&quot;];</div></pre></td></tr></table></figure></p>\n<p>其实这个时候descImage等于””，但使用”componentsSeparatedByString:”分割返回的数组是有一个对象的，就是一个空字符串，这个可能我并没想到，导致服务端返回空字符串时，我这边也多加载了一个图片，这个图片还一直下载不下来。这个也让我明白：”componentsSeparatedByString:”的意思，有分割字符就根据字符分割返回数组，没分割字符则返回被分割的字符串，@””也是一个字符串，它也是有内存地址的，跟nil并不一样。看看下面的代码就明白了:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)testComponentSeparatedByString</div><div class=\"line\">&#123;</div><div class=\"line\">    NSString *descImage = @&quot;&quot;;</div><div class=\"line\">    NSArray *descImages = [descImage componentsSeparatedByString:@&quot;,&quot;];</div><div class=\"line\">    NSLog(@&quot;descImages = %@,descImages.count=%zd,descImage = %p,nil= %p&quot;,descImages,descImages.count,descImage,nil);</div><div class=\"line\">&#125;</div><div class=\"line\">打印出来的</div><div class=\"line\">descImages = (</div><div class=\"line\">    &quot;&quot;</div><div class=\"line\">),descImages.count=1,descImage = 0x1001d5690,nil= 0x0</div></pre></td></tr></table></figure></p>\n<p>因此要解决这个问题就得加一个判断给descImage.length&gt;0即可。</p>\n<h3 id=\"衍生学习\"><a href=\"#衍生学习\" class=\"headerlink\" title=\"衍生学习\"></a>衍生学习</h3><p>componentsSeparatedByCharactersInSet的使用，使用多个字符分割字符串：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSString *str = @&quot;A~B^C&quot;;</div><div class=\"line\">NSArray *arr = [str componentsSeparatedByCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@&quot;^~&quot;]];</div><div class=\"line\">NSLog(@&quot;%@&quot;, arr);</div><div class=\"line\">打印出来</div><div class=\"line\">(</div><div class=\"line\">    A,</div><div class=\"line\">    B,</div><div class=\"line\">    C</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n"},{"title":"使用Cordova搭建混合框架","date":"2016-09-23T06:22:31.000Z","_content":"\n## 前言\n  入职公司不久，花了一个多月开发了一个原生APP，这也只是个开始，首先强调的是，我们公司并不是外包公司，但需要开发的项目其实还挺多的，为了解决这个问题，我们需要周期短，响应快，来满足公司的需求，我们只能抛弃纯原生APP的开发方案，选择目前市场比较热门的技术方案：*Hybrid App*。使用*Hybrid App*的技术框架其实有很多开源的技术方案，比如使用[Cordova](http://cordova.apache.org)，[React Native](http://reactnative.cn)，等。这两个技术方案其实都还不错，由于我们公司有人以前有使用*Cordova*框架的经验，所以我们选择了*Cordova*,这个理由听起来感觉有些过不去，但有时候领导就是喜欢听取有经验的方案。不过走到现在确实觉得*Cordova*也很不错,没出什么问题，也都能满足项目上的需求。\n  \n## 搭建框架\n 接下来我们来搭建一个*Hybrid App*试试手吧，创建一个`MyHybridDemo`，使用`Pod`来管理*Cordova*框架，可以通过命令`pod 'Cordova'`从Github上下载*Cordova*，集成*Cordova*到工程中后，还缺html5与原生代码交互的桥梁，需要一些js的支撑，你可以查看[官网](http://cordova.apache.org/docs/en/latest/guide/cli/index.html)的文档，一步一步创建相应文件。也可以直接从我的[MyHybridDemo](https://github.com/lyroger/MyHybridDemo)中拷贝www文件夹和config.xml文件集成到你的工程中。到这里集成框架算是ok了，接下来就是写业务代码了。在写业务代码之前首先来介绍一下www目录下的文件和config.xml文件的作用。\n 使用终端cd到www目录下，使用`tree -L 4`（需安装tree工具）命令查看www目录：\n ```js\n.\n├── assets\n│   ├── images\n│   ├── js\n│   └── style\n├── cordova-js-src\n│   ├── exec.js\n│   └── platform.js\n├── cordova.js\n├── cordova_plugins.js\n├── index.html\n└── plugins\n    ├── com.exmind.photopickerplugin\n ```\n* `assets`:该目录是用来放资源文件的，比如h5相关的业务图片，视频等资源文件。\n* `cordova-js-src`:该目录是存放cordova的js框架代码，这个你直接拷贝过来就ok了，不用多管。\n* `cordova.js`:该文件是cordova的js框架代码。直接拷贝。\n* `cordova_plugins.js`:该js文件是cordova来定义js插件文件，他包含定义插件的文件的路径，插件ID，以及插件名称。最终获取一个插件集合。\n* `plugins`:该文件夹是js调用原生插件的入口，所有插件可以放到此文件夹中。比如拍照，定位，分享等插件js。\n* 最后还有一个config.xml文件,该xml文件主要是用作配置属性的。可以配置h5入口，也可以配置UIWebView的属性等。\n\n## 插件的配置和定义\n  了解了框架后，来实战一下，用例就拿web端调用APP的系统相机和相册吧。\n  \n  一. 首先我们用`Objective-C`原生代码写好调用系统相机和相册的方法。具体实现我就不写了，需要注意的一点就是该类需要继承Cordova的`CDVPlugin`类，调用的插件方法需要传一个`CDVInvokedUrlCommand`类型的参数，以便回调。\n  ```objective-c\n@interface PhotoPickerPlugin : CDVPlugin\n// 获取图片\n- (void)getPictures:(CDVInvokedUrlCommand *)command;\n// 删除图片文件\n- (void)deleteFile:(CDVInvokedUrlCommand *)command;\n@end\n  ```\n  \n  二. 写完原生代码后，如何让web端调起我们的代码呢？框架搭建好后，其实只要稍作配置就ok了，你只需要动动四个文件。\n  1. 第一个就是config.xml，这个是配置你的插件名称，告诉Cordova你定义了这么个插件类（这里我们定义的是：`PhotoPickerPlugin`）。  \n  2. 第二个文件:添加一个`PhotoPickerPlugin.js`插件类，供web端调用的。\n ```js \ncordova.define(\"com.exmind.photopickerplugin.PhotoPickerPlugin\", function(require, exports, module) {\n           \n   var argscheck = require('cordova/argscheck');\n   var exec = require('cordova/exec');\n   var PhotoPickerPlugin = function() {\n   \n   };\n   // 获取系统相册图片\n   PhotoPickerPlugin.prototype.getPictures = function(success, fail, maxCount) {\n       exec(success, fail, \"PhotoPickerPlugin\", \"getPictures\", [maxCount]);\n   };\n   // 删除图片\n   PhotoPickerPlugin.prototype.deleteFile = function(success, fail, filePaths) {\n       exec(success, fail, \"PhotoPickerPlugin\", \"deleteFile\", filePaths);\n   };\n   \n   var me = new PhotoPickerPlugin();\n   module.exports = me;\n});\n ```\n  3. 第三个文件：`cordova_plugins.js`，在这个文件中你需要定义插件js插件类以及他的路径和唯一标示。\n ```js \n{\n  \"file\": \"plugins/com.exmind.photopickerplugin/www/PhotoPickerPlugin.js\",\n  \"id\": \"com.exmind.photopickerplugin.PhotoPickerPlugin\",\n  \"clobbers\": [\n               \"PhotoPickerPlugin\"\n               ]\n}\n ```\n  4. 最后一个文件就是在使用该插件的地方引用`cordova_plugins.js` 和 `cordova.js`。\n  \n修改好这四个文件后，js代码就可以直接调用`PhotoPickerPlugin`的`getPictures:`,`deleteFile:`方法了。\n调用方式:\n```js\nPhotoPickerPlugin. getPictures(function (success) {}, function (fail) {},6);\n```\n如何让原生代码返回数据给web端呢？web端拿到success，和fail回调，原生代码如何将数据组织到这个回调用呢？我们回到`PhotoPickerPlugin.m`类中，来看看实现。\n```objective-c\n- (void)imagePickerController:(TZImagePickerController *)picker didFinishPickingPhotos:(NSArray<UIImage *> *)photos sourceAssets:(NSArray *)assets isSelectOriginalPhoto:(BOOL)isSelectOriginalPhoto\n{\n    CDVPluginResult* result = nil;\n    NSMutableArray *resultStrings = [[NSMutableArray alloc] init];\n    NSData* data = nil;\n    NSError* err = nil;\n    NSFileManager* fileMgr = [[NSFileManager alloc] init];\n    NSString* filePath;\n    \n    for (UIImage *image in photos) {\n        int i = 1;\n        do {\n            filePath = [NSString stringWithFormat:@\"%@/%@%04d.%@\", [self getFileDocPath], @\"cdv_photo_\", i++, @\"jpg\"];\n        } while ([fileMgr fileExistsAtPath:filePath]);\n        \n        @autoreleasepool {\n            data = UIImageJPEGRepresentation(image,0.5);\n            if (![data writeToFile:filePath options:NSAtomicWrite error:&err]) {\n                result = [CDVPluginResult resultWithStatus:CDVCommandStatus_IO_EXCEPTION messageAsString:[err localizedDescription]];\n                break;\n            } else {\n                [resultStrings addObject:[[NSURL fileURLWithPath:filePath] absoluteString]];\n            }\n        }\n    }\n    result = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsArray:resultStrings];\n    [self.commandDelegate sendPluginResult:result callbackId:self.pCommand.callbackId];\n}\n```\n\n看最后一句代码，便是将结果通过`CDVPluginResult`类发送给对应的command。\n到此我们应该掌握了如何从web端调用App端的代码了。在其他场景，其实还需要App端调用web端的方法，那如何调用呢？熟悉UIWebView的同学应该都知道UIWebView中有一个`stringByEvaluatingJavaScriptFromString:`方法。对，你可以使用该方法调用js方法，不过cordova也封装了一个方法供你使用，你可以通过`CDVCommandDelegateImpl`类的`evalJs:`方法实现调用js代码。","source":"_posts/使用Cordova搭建混合框架.md","raw":"---\ntitle: 使用Cordova搭建混合框架\ndate: 2016-09-23 14:22:31\ntags: Hybrid App\ncategory: 框架\n\n---\n\n## 前言\n  入职公司不久，花了一个多月开发了一个原生APP，这也只是个开始，首先强调的是，我们公司并不是外包公司，但需要开发的项目其实还挺多的，为了解决这个问题，我们需要周期短，响应快，来满足公司的需求，我们只能抛弃纯原生APP的开发方案，选择目前市场比较热门的技术方案：*Hybrid App*。使用*Hybrid App*的技术框架其实有很多开源的技术方案，比如使用[Cordova](http://cordova.apache.org)，[React Native](http://reactnative.cn)，等。这两个技术方案其实都还不错，由于我们公司有人以前有使用*Cordova*框架的经验，所以我们选择了*Cordova*,这个理由听起来感觉有些过不去，但有时候领导就是喜欢听取有经验的方案。不过走到现在确实觉得*Cordova*也很不错,没出什么问题，也都能满足项目上的需求。\n  \n## 搭建框架\n 接下来我们来搭建一个*Hybrid App*试试手吧，创建一个`MyHybridDemo`，使用`Pod`来管理*Cordova*框架，可以通过命令`pod 'Cordova'`从Github上下载*Cordova*，集成*Cordova*到工程中后，还缺html5与原生代码交互的桥梁，需要一些js的支撑，你可以查看[官网](http://cordova.apache.org/docs/en/latest/guide/cli/index.html)的文档，一步一步创建相应文件。也可以直接从我的[MyHybridDemo](https://github.com/lyroger/MyHybridDemo)中拷贝www文件夹和config.xml文件集成到你的工程中。到这里集成框架算是ok了，接下来就是写业务代码了。在写业务代码之前首先来介绍一下www目录下的文件和config.xml文件的作用。\n 使用终端cd到www目录下，使用`tree -L 4`（需安装tree工具）命令查看www目录：\n ```js\n.\n├── assets\n│   ├── images\n│   ├── js\n│   └── style\n├── cordova-js-src\n│   ├── exec.js\n│   └── platform.js\n├── cordova.js\n├── cordova_plugins.js\n├── index.html\n└── plugins\n    ├── com.exmind.photopickerplugin\n ```\n* `assets`:该目录是用来放资源文件的，比如h5相关的业务图片，视频等资源文件。\n* `cordova-js-src`:该目录是存放cordova的js框架代码，这个你直接拷贝过来就ok了，不用多管。\n* `cordova.js`:该文件是cordova的js框架代码。直接拷贝。\n* `cordova_plugins.js`:该js文件是cordova来定义js插件文件，他包含定义插件的文件的路径，插件ID，以及插件名称。最终获取一个插件集合。\n* `plugins`:该文件夹是js调用原生插件的入口，所有插件可以放到此文件夹中。比如拍照，定位，分享等插件js。\n* 最后还有一个config.xml文件,该xml文件主要是用作配置属性的。可以配置h5入口，也可以配置UIWebView的属性等。\n\n## 插件的配置和定义\n  了解了框架后，来实战一下，用例就拿web端调用APP的系统相机和相册吧。\n  \n  一. 首先我们用`Objective-C`原生代码写好调用系统相机和相册的方法。具体实现我就不写了，需要注意的一点就是该类需要继承Cordova的`CDVPlugin`类，调用的插件方法需要传一个`CDVInvokedUrlCommand`类型的参数，以便回调。\n  ```objective-c\n@interface PhotoPickerPlugin : CDVPlugin\n// 获取图片\n- (void)getPictures:(CDVInvokedUrlCommand *)command;\n// 删除图片文件\n- (void)deleteFile:(CDVInvokedUrlCommand *)command;\n@end\n  ```\n  \n  二. 写完原生代码后，如何让web端调起我们的代码呢？框架搭建好后，其实只要稍作配置就ok了，你只需要动动四个文件。\n  1. 第一个就是config.xml，这个是配置你的插件名称，告诉Cordova你定义了这么个插件类（这里我们定义的是：`PhotoPickerPlugin`）。  \n  2. 第二个文件:添加一个`PhotoPickerPlugin.js`插件类，供web端调用的。\n ```js \ncordova.define(\"com.exmind.photopickerplugin.PhotoPickerPlugin\", function(require, exports, module) {\n           \n   var argscheck = require('cordova/argscheck');\n   var exec = require('cordova/exec');\n   var PhotoPickerPlugin = function() {\n   \n   };\n   // 获取系统相册图片\n   PhotoPickerPlugin.prototype.getPictures = function(success, fail, maxCount) {\n       exec(success, fail, \"PhotoPickerPlugin\", \"getPictures\", [maxCount]);\n   };\n   // 删除图片\n   PhotoPickerPlugin.prototype.deleteFile = function(success, fail, filePaths) {\n       exec(success, fail, \"PhotoPickerPlugin\", \"deleteFile\", filePaths);\n   };\n   \n   var me = new PhotoPickerPlugin();\n   module.exports = me;\n});\n ```\n  3. 第三个文件：`cordova_plugins.js`，在这个文件中你需要定义插件js插件类以及他的路径和唯一标示。\n ```js \n{\n  \"file\": \"plugins/com.exmind.photopickerplugin/www/PhotoPickerPlugin.js\",\n  \"id\": \"com.exmind.photopickerplugin.PhotoPickerPlugin\",\n  \"clobbers\": [\n               \"PhotoPickerPlugin\"\n               ]\n}\n ```\n  4. 最后一个文件就是在使用该插件的地方引用`cordova_plugins.js` 和 `cordova.js`。\n  \n修改好这四个文件后，js代码就可以直接调用`PhotoPickerPlugin`的`getPictures:`,`deleteFile:`方法了。\n调用方式:\n```js\nPhotoPickerPlugin. getPictures(function (success) {}, function (fail) {},6);\n```\n如何让原生代码返回数据给web端呢？web端拿到success，和fail回调，原生代码如何将数据组织到这个回调用呢？我们回到`PhotoPickerPlugin.m`类中，来看看实现。\n```objective-c\n- (void)imagePickerController:(TZImagePickerController *)picker didFinishPickingPhotos:(NSArray<UIImage *> *)photos sourceAssets:(NSArray *)assets isSelectOriginalPhoto:(BOOL)isSelectOriginalPhoto\n{\n    CDVPluginResult* result = nil;\n    NSMutableArray *resultStrings = [[NSMutableArray alloc] init];\n    NSData* data = nil;\n    NSError* err = nil;\n    NSFileManager* fileMgr = [[NSFileManager alloc] init];\n    NSString* filePath;\n    \n    for (UIImage *image in photos) {\n        int i = 1;\n        do {\n            filePath = [NSString stringWithFormat:@\"%@/%@%04d.%@\", [self getFileDocPath], @\"cdv_photo_\", i++, @\"jpg\"];\n        } while ([fileMgr fileExistsAtPath:filePath]);\n        \n        @autoreleasepool {\n            data = UIImageJPEGRepresentation(image,0.5);\n            if (![data writeToFile:filePath options:NSAtomicWrite error:&err]) {\n                result = [CDVPluginResult resultWithStatus:CDVCommandStatus_IO_EXCEPTION messageAsString:[err localizedDescription]];\n                break;\n            } else {\n                [resultStrings addObject:[[NSURL fileURLWithPath:filePath] absoluteString]];\n            }\n        }\n    }\n    result = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsArray:resultStrings];\n    [self.commandDelegate sendPluginResult:result callbackId:self.pCommand.callbackId];\n}\n```\n\n看最后一句代码，便是将结果通过`CDVPluginResult`类发送给对应的command。\n到此我们应该掌握了如何从web端调用App端的代码了。在其他场景，其实还需要App端调用web端的方法，那如何调用呢？熟悉UIWebView的同学应该都知道UIWebView中有一个`stringByEvaluatingJavaScriptFromString:`方法。对，你可以使用该方法调用js方法，不过cordova也封装了一个方法供你使用，你可以通过`CDVCommandDelegateImpl`类的`evalJs:`方法实现调用js代码。","slug":"使用Cordova搭建混合框架","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7focr0013zn3mtt9e9pzm","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  入职公司不久，花了一个多月开发了一个原生APP，这也只是个开始，首先强调的是，我们公司并不是外包公司，但需要开发的项目其实还挺多的，为了解决这个问题，我们需要周期短，响应快，来满足公司的需求，我们只能抛弃纯原生APP的开发方案，选择目前市场比较热门的技术方案：<em>Hybrid App</em>。使用<em>Hybrid App</em>的技术框架其实有很多开源的技术方案，比如使用<a href=\"http://cordova.apache.org\" target=\"_blank\" rel=\"external\">Cordova</a>，<a href=\"http://reactnative.cn\" target=\"_blank\" rel=\"external\">React Native</a>，等。这两个技术方案其实都还不错，由于我们公司有人以前有使用<em>Cordova</em>框架的经验，所以我们选择了<em>Cordova</em>,这个理由听起来感觉有些过不去，但有时候领导就是喜欢听取有经验的方案。不过走到现在确实觉得<em>Cordova</em>也很不错,没出什么问题，也都能满足项目上的需求。</p>\n<h2 id=\"搭建框架\"><a href=\"#搭建框架\" class=\"headerlink\" title=\"搭建框架\"></a>搭建框架</h2><p> 接下来我们来搭建一个<em>Hybrid App</em>试试手吧，创建一个<code>MyHybridDemo</code>，使用<code>Pod</code>来管理<em>Cordova</em>框架，可以通过命令<code>pod &#39;Cordova&#39;</code>从Github上下载<em>Cordova</em>，集成<em>Cordova</em>到工程中后，还缺html5与原生代码交互的桥梁，需要一些js的支撑，你可以查看<a href=\"http://cordova.apache.org/docs/en/latest/guide/cli/index.html\" target=\"_blank\" rel=\"external\">官网</a>的文档，一步一步创建相应文件。也可以直接从我的<a href=\"https://github.com/lyroger/MyHybridDemo\" target=\"_blank\" rel=\"external\">MyHybridDemo</a>中拷贝www文件夹和config.xml文件集成到你的工程中。到这里集成框架算是ok了，接下来就是写业务代码了。在写业务代码之前首先来介绍一下www目录下的文件和config.xml文件的作用。<br> 使用终端cd到www目录下，使用<code>tree -L 4</code>（需安装tree工具）命令查看www目录：<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── assets</div><div class=\"line\">│   ├── images</div><div class=\"line\">│   ├── js</div><div class=\"line\">│   └── style</div><div class=\"line\">├── cordova-js-src</div><div class=\"line\">│   ├── exec.js</div><div class=\"line\">│   └── platform.js</div><div class=\"line\">├── cordova.js</div><div class=\"line\">├── cordova_plugins.js</div><div class=\"line\">├── index.html</div><div class=\"line\">└── plugins</div><div class=\"line\">    ├── com.exmind.photopickerplugin</div></pre></td></tr></table></figure></p>\n<ul>\n<li><code>assets</code>:该目录是用来放资源文件的，比如h5相关的业务图片，视频等资源文件。</li>\n<li><code>cordova-js-src</code>:该目录是存放cordova的js框架代码，这个你直接拷贝过来就ok了，不用多管。</li>\n<li><code>cordova.js</code>:该文件是cordova的js框架代码。直接拷贝。</li>\n<li><code>cordova_plugins.js</code>:该js文件是cordova来定义js插件文件，他包含定义插件的文件的路径，插件ID，以及插件名称。最终获取一个插件集合。</li>\n<li><code>plugins</code>:该文件夹是js调用原生插件的入口，所有插件可以放到此文件夹中。比如拍照，定位，分享等插件js。</li>\n<li>最后还有一个config.xml文件,该xml文件主要是用作配置属性的。可以配置h5入口，也可以配置UIWebView的属性等。</li>\n</ul>\n<h2 id=\"插件的配置和定义\"><a href=\"#插件的配置和定义\" class=\"headerlink\" title=\"插件的配置和定义\"></a>插件的配置和定义</h2><p>  了解了框架后，来实战一下，用例就拿web端调用APP的系统相机和相册吧。</p>\n<p>  一. 首先我们用<code>Objective-C</code>原生代码写好调用系统相机和相册的方法。具体实现我就不写了，需要注意的一点就是该类需要继承Cordova的<code>CDVPlugin</code>类，调用的插件方法需要传一个<code>CDVInvokedUrlCommand</code>类型的参数，以便回调。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface PhotoPickerPlugin : CDVPlugin</div><div class=\"line\">// 获取图片</div><div class=\"line\">- (void)getPictures:(CDVInvokedUrlCommand *)command;</div><div class=\"line\">// 删除图片文件</div><div class=\"line\">- (void)deleteFile:(CDVInvokedUrlCommand *)command;</div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<p>  二. 写完原生代码后，如何让web端调起我们的代码呢？框架搭建好后，其实只要稍作配置就ok了，你只需要动动四个文件。</p>\n<ol>\n<li>第一个就是config.xml，这个是配置你的插件名称，告诉Cordova你定义了这么个插件类（这里我们定义的是：<code>PhotoPickerPlugin</code>）。  </li>\n<li><p>第二个文件:添加一个<code>PhotoPickerPlugin.js</code>插件类，供web端调用的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">cordova.define(<span class=\"string\">\"com.exmind.photopickerplugin.PhotoPickerPlugin\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</div><div class=\"line\">           </div><div class=\"line\">   <span class=\"keyword\">var</span> argscheck = <span class=\"built_in\">require</span>(<span class=\"string\">'cordova/argscheck'</span>);</div><div class=\"line\">   <span class=\"keyword\">var</span> exec = <span class=\"built_in\">require</span>(<span class=\"string\">'cordova/exec'</span>);</div><div class=\"line\">   <span class=\"keyword\">var</span> PhotoPickerPlugin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   </div><div class=\"line\">   &#125;;</div><div class=\"line\">   <span class=\"comment\">// 获取系统相册图片</span></div><div class=\"line\">   PhotoPickerPlugin.prototype.getPictures = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">success, fail, maxCount</span>) </span>&#123;</div><div class=\"line\">       exec(success, fail, <span class=\"string\">\"PhotoPickerPlugin\"</span>, <span class=\"string\">\"getPictures\"</span>, [maxCount]);</div><div class=\"line\">   &#125;;</div><div class=\"line\">   <span class=\"comment\">// 删除图片</span></div><div class=\"line\">   PhotoPickerPlugin.prototype.deleteFile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">success, fail, filePaths</span>) </span>&#123;</div><div class=\"line\">       exec(success, fail, <span class=\"string\">\"PhotoPickerPlugin\"</span>, <span class=\"string\">\"deleteFile\"</span>, filePaths);</div><div class=\"line\">   &#125;;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"keyword\">var</span> me = <span class=\"keyword\">new</span> PhotoPickerPlugin();</div><div class=\"line\">   <span class=\"built_in\">module</span>.exports = me;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>第三个文件：<code>cordova_plugins.js</code>，在这个文件中你需要定义插件js插件类以及他的路径和唯一标示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"file\"</span>: <span class=\"string\">\"plugins/com.exmind.photopickerplugin/www/PhotoPickerPlugin.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"id\"</span>: <span class=\"string\">\"com.exmind.photopickerplugin.PhotoPickerPlugin\"</span>,</div><div class=\"line\">  <span class=\"string\">\"clobbers\"</span>: [</div><div class=\"line\">               <span class=\"string\">\"PhotoPickerPlugin\"</span></div><div class=\"line\">               ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>最后一个文件就是在使用该插件的地方引用<code>cordova_plugins.js</code> 和 <code>cordova.js</code>。</p>\n</li>\n</ol>\n<p>修改好这四个文件后，js代码就可以直接调用<code>PhotoPickerPlugin</code>的<code>getPictures:</code>,<code>deleteFile:</code>方法了。<br>调用方式:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PhotoPickerPlugin. getPictures(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">success</span>) </span>&#123;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fail</span>) </span>&#123;&#125;,<span class=\"number\">6</span>);</div></pre></td></tr></table></figure></p>\n<p>如何让原生代码返回数据给web端呢？web端拿到success，和fail回调，原生代码如何将数据组织到这个回调用呢？我们回到<code>PhotoPickerPlugin.m</code>类中，来看看实现。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)imagePickerController:(TZImagePickerController *)picker didFinishPickingPhotos:(NSArray&lt;UIImage *&gt; *)photos sourceAssets:(NSArray *)assets isSelectOriginalPhoto:(BOOL)isSelectOriginalPhoto</div><div class=\"line\">&#123;</div><div class=\"line\">    CDVPluginResult* result = nil;</div><div class=\"line\">    NSMutableArray *resultStrings = [[NSMutableArray alloc] init];</div><div class=\"line\">    NSData* data = nil;</div><div class=\"line\">    NSError* err = nil;</div><div class=\"line\">    NSFileManager* fileMgr = [[NSFileManager alloc] init];</div><div class=\"line\">    NSString* filePath;</div><div class=\"line\">    </div><div class=\"line\">    for (UIImage *image in photos) &#123;</div><div class=\"line\">        int i = 1;</div><div class=\"line\">        do &#123;</div><div class=\"line\">            filePath = [NSString stringWithFormat:@&quot;%@/%@%04d.%@&quot;, [self getFileDocPath], @&quot;cdv_photo_&quot;, i++, @&quot;jpg&quot;];</div><div class=\"line\">        &#125; while ([fileMgr fileExistsAtPath:filePath]);</div><div class=\"line\">        </div><div class=\"line\">        @autoreleasepool &#123;</div><div class=\"line\">            data = UIImageJPEGRepresentation(image,0.5);</div><div class=\"line\">            if (![data writeToFile:filePath options:NSAtomicWrite error:&amp;err]) &#123;</div><div class=\"line\">                result = [CDVPluginResult resultWithStatus:CDVCommandStatus_IO_EXCEPTION messageAsString:[err localizedDescription]];</div><div class=\"line\">                break;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                [resultStrings addObject:[[NSURL fileURLWithPath:filePath] absoluteString]];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    result = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsArray:resultStrings];</div><div class=\"line\">    [self.commandDelegate sendPluginResult:result callbackId:self.pCommand.callbackId];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看最后一句代码，便是将结果通过<code>CDVPluginResult</code>类发送给对应的command。<br>到此我们应该掌握了如何从web端调用App端的代码了。在其他场景，其实还需要App端调用web端的方法，那如何调用呢？熟悉UIWebView的同学应该都知道UIWebView中有一个<code>stringByEvaluatingJavaScriptFromString:</code>方法。对，你可以使用该方法调用js方法，不过cordova也封装了一个方法供你使用，你可以通过<code>CDVCommandDelegateImpl</code>类的<code>evalJs:</code>方法实现调用js代码。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  入职公司不久，花了一个多月开发了一个原生APP，这也只是个开始，首先强调的是，我们公司并不是外包公司，但需要开发的项目其实还挺多的，为了解决这个问题，我们需要周期短，响应快，来满足公司的需求，我们只能抛弃纯原生APP的开发方案，选择目前市场比较热门的技术方案：<em>Hybrid App</em>。使用<em>Hybrid App</em>的技术框架其实有很多开源的技术方案，比如使用<a href=\"http://cordova.apache.org\">Cordova</a>，<a href=\"http://reactnative.cn\">React Native</a>，等。这两个技术方案其实都还不错，由于我们公司有人以前有使用<em>Cordova</em>框架的经验，所以我们选择了<em>Cordova</em>,这个理由听起来感觉有些过不去，但有时候领导就是喜欢听取有经验的方案。不过走到现在确实觉得<em>Cordova</em>也很不错,没出什么问题，也都能满足项目上的需求。</p>\n<h2 id=\"搭建框架\"><a href=\"#搭建框架\" class=\"headerlink\" title=\"搭建框架\"></a>搭建框架</h2><p> 接下来我们来搭建一个<em>Hybrid App</em>试试手吧，创建一个<code>MyHybridDemo</code>，使用<code>Pod</code>来管理<em>Cordova</em>框架，可以通过命令<code>pod &#39;Cordova&#39;</code>从Github上下载<em>Cordova</em>，集成<em>Cordova</em>到工程中后，还缺html5与原生代码交互的桥梁，需要一些js的支撑，你可以查看<a href=\"http://cordova.apache.org/docs/en/latest/guide/cli/index.html\">官网</a>的文档，一步一步创建相应文件。也可以直接从我的<a href=\"https://github.com/lyroger/MyHybridDemo\">MyHybridDemo</a>中拷贝www文件夹和config.xml文件集成到你的工程中。到这里集成框架算是ok了，接下来就是写业务代码了。在写业务代码之前首先来介绍一下www目录下的文件和config.xml文件的作用。<br> 使用终端cd到www目录下，使用<code>tree -L 4</code>（需安装tree工具）命令查看www目录：<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── assets</div><div class=\"line\">│   ├── images</div><div class=\"line\">│   ├── js</div><div class=\"line\">│   └── style</div><div class=\"line\">├── cordova-js-src</div><div class=\"line\">│   ├── exec.js</div><div class=\"line\">│   └── platform.js</div><div class=\"line\">├── cordova.js</div><div class=\"line\">├── cordova_plugins.js</div><div class=\"line\">├── index.html</div><div class=\"line\">└── plugins</div><div class=\"line\">    ├── com.exmind.photopickerplugin</div></pre></td></tr></table></figure></p>\n<ul>\n<li><code>assets</code>:该目录是用来放资源文件的，比如h5相关的业务图片，视频等资源文件。</li>\n<li><code>cordova-js-src</code>:该目录是存放cordova的js框架代码，这个你直接拷贝过来就ok了，不用多管。</li>\n<li><code>cordova.js</code>:该文件是cordova的js框架代码。直接拷贝。</li>\n<li><code>cordova_plugins.js</code>:该js文件是cordova来定义js插件文件，他包含定义插件的文件的路径，插件ID，以及插件名称。最终获取一个插件集合。</li>\n<li><code>plugins</code>:该文件夹是js调用原生插件的入口，所有插件可以放到此文件夹中。比如拍照，定位，分享等插件js。</li>\n<li>最后还有一个config.xml文件,该xml文件主要是用作配置属性的。可以配置h5入口，也可以配置UIWebView的属性等。</li>\n</ul>\n<h2 id=\"插件的配置和定义\"><a href=\"#插件的配置和定义\" class=\"headerlink\" title=\"插件的配置和定义\"></a>插件的配置和定义</h2><p>  了解了框架后，来实战一下，用例就拿web端调用APP的系统相机和相册吧。</p>\n<p>  一. 首先我们用<code>Objective-C</code>原生代码写好调用系统相机和相册的方法。具体实现我就不写了，需要注意的一点就是该类需要继承Cordova的<code>CDVPlugin</code>类，调用的插件方法需要传一个<code>CDVInvokedUrlCommand</code>类型的参数，以便回调。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">@interface PhotoPickerPlugin : CDVPlugin</div><div class=\"line\">// 获取图片</div><div class=\"line\">- (void)getPictures:(CDVInvokedUrlCommand *)command;</div><div class=\"line\">// 删除图片文件</div><div class=\"line\">- (void)deleteFile:(CDVInvokedUrlCommand *)command;</div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<p>  二. 写完原生代码后，如何让web端调起我们的代码呢？框架搭建好后，其实只要稍作配置就ok了，你只需要动动四个文件。</p>\n<ol>\n<li>第一个就是config.xml，这个是配置你的插件名称，告诉Cordova你定义了这么个插件类（这里我们定义的是：<code>PhotoPickerPlugin</code>）。  </li>\n<li><p>第二个文件:添加一个<code>PhotoPickerPlugin.js</code>插件类，供web端调用的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">cordova.define(<span class=\"string\">\"com.exmind.photopickerplugin.PhotoPickerPlugin\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</div><div class=\"line\">           </div><div class=\"line\">   <span class=\"keyword\">var</span> argscheck = <span class=\"built_in\">require</span>(<span class=\"string\">'cordova/argscheck'</span>);</div><div class=\"line\">   <span class=\"keyword\">var</span> exec = <span class=\"built_in\">require</span>(<span class=\"string\">'cordova/exec'</span>);</div><div class=\"line\">   <span class=\"keyword\">var</span> PhotoPickerPlugin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   </div><div class=\"line\">   &#125;;</div><div class=\"line\">   <span class=\"comment\">// 获取系统相册图片</span></div><div class=\"line\">   PhotoPickerPlugin.prototype.getPictures = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">success, fail, maxCount</span>) </span>&#123;</div><div class=\"line\">       exec(success, fail, <span class=\"string\">\"PhotoPickerPlugin\"</span>, <span class=\"string\">\"getPictures\"</span>, [maxCount]);</div><div class=\"line\">   &#125;;</div><div class=\"line\">   <span class=\"comment\">// 删除图片</span></div><div class=\"line\">   PhotoPickerPlugin.prototype.deleteFile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">success, fail, filePaths</span>) </span>&#123;</div><div class=\"line\">       exec(success, fail, <span class=\"string\">\"PhotoPickerPlugin\"</span>, <span class=\"string\">\"deleteFile\"</span>, filePaths);</div><div class=\"line\">   &#125;;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"keyword\">var</span> me = <span class=\"keyword\">new</span> PhotoPickerPlugin();</div><div class=\"line\">   <span class=\"built_in\">module</span>.exports = me;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>第三个文件：<code>cordova_plugins.js</code>，在这个文件中你需要定义插件js插件类以及他的路径和唯一标示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"file\"</span>: <span class=\"string\">\"plugins/com.exmind.photopickerplugin/www/PhotoPickerPlugin.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"id\"</span>: <span class=\"string\">\"com.exmind.photopickerplugin.PhotoPickerPlugin\"</span>,</div><div class=\"line\">  <span class=\"string\">\"clobbers\"</span>: [</div><div class=\"line\">               <span class=\"string\">\"PhotoPickerPlugin\"</span></div><div class=\"line\">               ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>最后一个文件就是在使用该插件的地方引用<code>cordova_plugins.js</code> 和 <code>cordova.js</code>。</p>\n</li>\n</ol>\n<p>修改好这四个文件后，js代码就可以直接调用<code>PhotoPickerPlugin</code>的<code>getPictures:</code>,<code>deleteFile:</code>方法了。<br>调用方式:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PhotoPickerPlugin. getPictures(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">success</span>) </span>&#123;&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fail</span>) </span>&#123;&#125;,<span class=\"number\">6</span>);</div></pre></td></tr></table></figure></p>\n<p>如何让原生代码返回数据给web端呢？web端拿到success，和fail回调，原生代码如何将数据组织到这个回调用呢？我们回到<code>PhotoPickerPlugin.m</code>类中，来看看实现。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)imagePickerController:(TZImagePickerController *)picker didFinishPickingPhotos:(NSArray&lt;UIImage *&gt; *)photos sourceAssets:(NSArray *)assets isSelectOriginalPhoto:(BOOL)isSelectOriginalPhoto</div><div class=\"line\">&#123;</div><div class=\"line\">    CDVPluginResult* result = nil;</div><div class=\"line\">    NSMutableArray *resultStrings = [[NSMutableArray alloc] init];</div><div class=\"line\">    NSData* data = nil;</div><div class=\"line\">    NSError* err = nil;</div><div class=\"line\">    NSFileManager* fileMgr = [[NSFileManager alloc] init];</div><div class=\"line\">    NSString* filePath;</div><div class=\"line\">    </div><div class=\"line\">    for (UIImage *image in photos) &#123;</div><div class=\"line\">        int i = 1;</div><div class=\"line\">        do &#123;</div><div class=\"line\">            filePath = [NSString stringWithFormat:@&quot;%@/%@%04d.%@&quot;, [self getFileDocPath], @&quot;cdv_photo_&quot;, i++, @&quot;jpg&quot;];</div><div class=\"line\">        &#125; while ([fileMgr fileExistsAtPath:filePath]);</div><div class=\"line\">        </div><div class=\"line\">        @autoreleasepool &#123;</div><div class=\"line\">            data = UIImageJPEGRepresentation(image,0.5);</div><div class=\"line\">            if (![data writeToFile:filePath options:NSAtomicWrite error:&amp;err]) &#123;</div><div class=\"line\">                result = [CDVPluginResult resultWithStatus:CDVCommandStatus_IO_EXCEPTION messageAsString:[err localizedDescription]];</div><div class=\"line\">                break;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                [resultStrings addObject:[[NSURL fileURLWithPath:filePath] absoluteString]];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    result = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsArray:resultStrings];</div><div class=\"line\">    [self.commandDelegate sendPluginResult:result callbackId:self.pCommand.callbackId];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看最后一句代码，便是将结果通过<code>CDVPluginResult</code>类发送给对应的command。<br>到此我们应该掌握了如何从web端调用App端的代码了。在其他场景，其实还需要App端调用web端的方法，那如何调用呢？熟悉UIWebView的同学应该都知道UIWebView中有一个<code>stringByEvaluatingJavaScriptFromString:</code>方法。对，你可以使用该方法调用js方法，不过cordova也封装了一个方法供你使用，你可以通过<code>CDVCommandDelegateImpl</code>类的<code>evalJs:</code>方法实现调用js代码。</p>\n"},{"title":"关于做ipod library开发的体验","date":"2013-06-08T08:56:48.000Z","_content":"\n最近在忙着做一个文件传输的软件，刚开始也没去想项目实现的困难度，可不可行。怎么说呢，因为有类似的软件都已经上线了，别人都已经实现了，就算在可行性上面做再多的分析，也是多余的了。做这个项目也是我换工作后的第一个项目，以前做ios开发时间并不是很长，对ios开发的经验也是有限的。也没想过会遇到什么困难，既来之则安之了吧。\n\n　　项目分下来后，我被安排做音视频模块和图片模块，主要做UI和媒体文件的获取任务和播放。看起来并不是很多事情，我按照以前的工作思维，拿到需求，找到解决方案，考虑工作周期，计划工作量，恭恭敬敬的做起来。一般我的做法都是先把自己没把握的问题先去找个解决方案，要是有了这些方案后，工作起来就不会感觉到压力，就只是工作量的问题了。所以看了需求后，我第一个就是去找怎么获取ipod里面的文件，以及它们的基本属性，比如音乐文件，它们的专辑名称、歌手、封面等。当时在博客园上找到了一篇关于获取ipod音乐文件基本信息的博客，很兴奋的看完了，同时也转载到了自己的博客中，供自己以后随时翻阅，在我的博客中叫[《ios获取音乐库信息（转）》](http://www.cnblogs.com/lyanet/archive/2013/03/27/2985019.html)，当时看的也不是原文，所以我也不知道原文在哪，就只是在标题上加了个“转”字，以表非自己著作。然后我便按照此篇文章将ipod里的操作都完成了，播放音乐，音乐列表，音乐文件的封面，歌手等。其实仅仅只是做到这些，并不是很难，因为你只需要使用MPMediaQuery就可以获取ipod里的所有音乐文件，然后循环他的item就可以拿到每个音乐文件对象，根据音乐文件对象的valueForProperty：方法可以拿到你想要的东西。小说明一下：并不是你想要的所有都能拿到。正因为这个，我才遇到了些问题，也是我在此项目中遇到最困难最难解决的问题。也开始了解ios系统的基本原理。文章开始就说了，我是要做一个文件传输的软件，所以并不是只将自己程序中的文件传输，既然要提到ipod，也意味着要对ipod里面的文件进行操作，需要播放，传输等。我想：做ios开发的人都知道ios是一个比较封闭的，这也是此系统的高安全性所在。他基于沙盒原理，想要对其他程序的文件进行操作，不是系统给出的接口，你是没办法去实现你想要的需求的。所以当时我一直对ipod文件导出困惑不解，查阅了很多资料，发过很多贴，问过一些同事，但都没能解决问题。所以这个问题也拖了很久。问题不主要在于怎么导出，关键在于导出后还能提供给其他平台的系统使用，比如android系统。这就是文件的格式问题了。因为在ios系统中，提供的接口导出的文件基本上是m4a、caf等的格式。这些格式在android系统上播放不了。所以要想在其他系统中也能播放，也就只能是mp3格式了。想要导出成mp3格式的文件，我想很多人都想要这个需求吧，这是我在很多贴上看到的，但基本上没人能把这个导出成mp3格式的解决方案贴的很详细。后来我能想到的办法就是使用网上说的lame库，首先将ipod里面的文件导出成caf格式的，再通过lame库将其转换成mp3格式的。我试了，成功了，让我兴奋了一把，但导出的结果却不尽人意。有两个最严重的缺点，一个是转换的时间比较长，10M的文件转换花了一分钟，我想：对于一个文件传输的软件是接受不了这个现实的；二就是它转换后音质变底了，文件大小也明显变小了。我想这是mp3格式的问题，mp3本身就是有损的转换。做到这里了，我实在是绝望了，不知道怎么去解决这个问题了。但别的软件有是怎么解决这个问题的呢？我自己都不知道怎么去说服自己，难道别人是自己做的格式转换？还是花了钱给了苹果找了接口直接导出mp3文件？这些困惑我无法证实。突然感觉到绝望了。我也开始转移了注意，着手做了其他项目。也就在做其他项目不久，终于看到希望了，有个同事在网上找到了一个demo，导出mp3文件就在一秒之内解决。很神奇，让我有惊讶有兴奋。没有音质的损失，文件大小基本没变化，但还是丢失了一些基本元素，比如歌曲的封面、歌手等属性。要想做到属性也不丢失，还得自己加上这些属性，我想我们已经做的更好了，能导出mp3文件已经实在是让我很兴奋了。这些小问题也就先不看吧。\n\n　　导出mp3格式的文件了，问题也就解决了。我心情也平复了许多。如果有朋友也有此方面的需求，可以到这里下载[demo](https://github.com/lyroger/TSLibraryImport)","source":"_posts/关于做ipod-library开发的体验.md","raw":"---\ntitle: 关于做ipod library开发的体验\ndate: 2013-06-08 16:56:48\ntags: \ncategory: 基础篇\n---\n\n最近在忙着做一个文件传输的软件，刚开始也没去想项目实现的困难度，可不可行。怎么说呢，因为有类似的软件都已经上线了，别人都已经实现了，就算在可行性上面做再多的分析，也是多余的了。做这个项目也是我换工作后的第一个项目，以前做ios开发时间并不是很长，对ios开发的经验也是有限的。也没想过会遇到什么困难，既来之则安之了吧。\n\n　　项目分下来后，我被安排做音视频模块和图片模块，主要做UI和媒体文件的获取任务和播放。看起来并不是很多事情，我按照以前的工作思维，拿到需求，找到解决方案，考虑工作周期，计划工作量，恭恭敬敬的做起来。一般我的做法都是先把自己没把握的问题先去找个解决方案，要是有了这些方案后，工作起来就不会感觉到压力，就只是工作量的问题了。所以看了需求后，我第一个就是去找怎么获取ipod里面的文件，以及它们的基本属性，比如音乐文件，它们的专辑名称、歌手、封面等。当时在博客园上找到了一篇关于获取ipod音乐文件基本信息的博客，很兴奋的看完了，同时也转载到了自己的博客中，供自己以后随时翻阅，在我的博客中叫[《ios获取音乐库信息（转）》](http://www.cnblogs.com/lyanet/archive/2013/03/27/2985019.html)，当时看的也不是原文，所以我也不知道原文在哪，就只是在标题上加了个“转”字，以表非自己著作。然后我便按照此篇文章将ipod里的操作都完成了，播放音乐，音乐列表，音乐文件的封面，歌手等。其实仅仅只是做到这些，并不是很难，因为你只需要使用MPMediaQuery就可以获取ipod里的所有音乐文件，然后循环他的item就可以拿到每个音乐文件对象，根据音乐文件对象的valueForProperty：方法可以拿到你想要的东西。小说明一下：并不是你想要的所有都能拿到。正因为这个，我才遇到了些问题，也是我在此项目中遇到最困难最难解决的问题。也开始了解ios系统的基本原理。文章开始就说了，我是要做一个文件传输的软件，所以并不是只将自己程序中的文件传输，既然要提到ipod，也意味着要对ipod里面的文件进行操作，需要播放，传输等。我想：做ios开发的人都知道ios是一个比较封闭的，这也是此系统的高安全性所在。他基于沙盒原理，想要对其他程序的文件进行操作，不是系统给出的接口，你是没办法去实现你想要的需求的。所以当时我一直对ipod文件导出困惑不解，查阅了很多资料，发过很多贴，问过一些同事，但都没能解决问题。所以这个问题也拖了很久。问题不主要在于怎么导出，关键在于导出后还能提供给其他平台的系统使用，比如android系统。这就是文件的格式问题了。因为在ios系统中，提供的接口导出的文件基本上是m4a、caf等的格式。这些格式在android系统上播放不了。所以要想在其他系统中也能播放，也就只能是mp3格式了。想要导出成mp3格式的文件，我想很多人都想要这个需求吧，这是我在很多贴上看到的，但基本上没人能把这个导出成mp3格式的解决方案贴的很详细。后来我能想到的办法就是使用网上说的lame库，首先将ipod里面的文件导出成caf格式的，再通过lame库将其转换成mp3格式的。我试了，成功了，让我兴奋了一把，但导出的结果却不尽人意。有两个最严重的缺点，一个是转换的时间比较长，10M的文件转换花了一分钟，我想：对于一个文件传输的软件是接受不了这个现实的；二就是它转换后音质变底了，文件大小也明显变小了。我想这是mp3格式的问题，mp3本身就是有损的转换。做到这里了，我实在是绝望了，不知道怎么去解决这个问题了。但别的软件有是怎么解决这个问题的呢？我自己都不知道怎么去说服自己，难道别人是自己做的格式转换？还是花了钱给了苹果找了接口直接导出mp3文件？这些困惑我无法证实。突然感觉到绝望了。我也开始转移了注意，着手做了其他项目。也就在做其他项目不久，终于看到希望了，有个同事在网上找到了一个demo，导出mp3文件就在一秒之内解决。很神奇，让我有惊讶有兴奋。没有音质的损失，文件大小基本没变化，但还是丢失了一些基本元素，比如歌曲的封面、歌手等属性。要想做到属性也不丢失，还得自己加上这些属性，我想我们已经做的更好了，能导出mp3文件已经实在是让我很兴奋了。这些小问题也就先不看吧。\n\n　　导出mp3格式的文件了，问题也就解决了。我心情也平复了许多。如果有朋友也有此方面的需求，可以到这里下载[demo](https://github.com/lyroger/TSLibraryImport)","slug":"关于做ipod-library开发的体验","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7foct0015zn3mh9wg1wmf","content":"<p>最近在忙着做一个文件传输的软件，刚开始也没去想项目实现的困难度，可不可行。怎么说呢，因为有类似的软件都已经上线了，别人都已经实现了，就算在可行性上面做再多的分析，也是多余的了。做这个项目也是我换工作后的第一个项目，以前做ios开发时间并不是很长，对ios开发的经验也是有限的。也没想过会遇到什么困难，既来之则安之了吧。</p>\n<p>　　项目分下来后，我被安排做音视频模块和图片模块，主要做UI和媒体文件的获取任务和播放。看起来并不是很多事情，我按照以前的工作思维，拿到需求，找到解决方案，考虑工作周期，计划工作量，恭恭敬敬的做起来。一般我的做法都是先把自己没把握的问题先去找个解决方案，要是有了这些方案后，工作起来就不会感觉到压力，就只是工作量的问题了。所以看了需求后，我第一个就是去找怎么获取ipod里面的文件，以及它们的基本属性，比如音乐文件，它们的专辑名称、歌手、封面等。当时在博客园上找到了一篇关于获取ipod音乐文件基本信息的博客，很兴奋的看完了，同时也转载到了自己的博客中，供自己以后随时翻阅，在我的博客中叫<a href=\"http://www.cnblogs.com/lyanet/archive/2013/03/27/2985019.html\" target=\"_blank\" rel=\"external\">《ios获取音乐库信息（转）》</a>，当时看的也不是原文，所以我也不知道原文在哪，就只是在标题上加了个“转”字，以表非自己著作。然后我便按照此篇文章将ipod里的操作都完成了，播放音乐，音乐列表，音乐文件的封面，歌手等。其实仅仅只是做到这些，并不是很难，因为你只需要使用MPMediaQuery就可以获取ipod里的所有音乐文件，然后循环他的item就可以拿到每个音乐文件对象，根据音乐文件对象的valueForProperty：方法可以拿到你想要的东西。小说明一下：并不是你想要的所有都能拿到。正因为这个，我才遇到了些问题，也是我在此项目中遇到最困难最难解决的问题。也开始了解ios系统的基本原理。文章开始就说了，我是要做一个文件传输的软件，所以并不是只将自己程序中的文件传输，既然要提到ipod，也意味着要对ipod里面的文件进行操作，需要播放，传输等。我想：做ios开发的人都知道ios是一个比较封闭的，这也是此系统的高安全性所在。他基于沙盒原理，想要对其他程序的文件进行操作，不是系统给出的接口，你是没办法去实现你想要的需求的。所以当时我一直对ipod文件导出困惑不解，查阅了很多资料，发过很多贴，问过一些同事，但都没能解决问题。所以这个问题也拖了很久。问题不主要在于怎么导出，关键在于导出后还能提供给其他平台的系统使用，比如android系统。这就是文件的格式问题了。因为在ios系统中，提供的接口导出的文件基本上是m4a、caf等的格式。这些格式在android系统上播放不了。所以要想在其他系统中也能播放，也就只能是mp3格式了。想要导出成mp3格式的文件，我想很多人都想要这个需求吧，这是我在很多贴上看到的，但基本上没人能把这个导出成mp3格式的解决方案贴的很详细。后来我能想到的办法就是使用网上说的lame库，首先将ipod里面的文件导出成caf格式的，再通过lame库将其转换成mp3格式的。我试了，成功了，让我兴奋了一把，但导出的结果却不尽人意。有两个最严重的缺点，一个是转换的时间比较长，10M的文件转换花了一分钟，我想：对于一个文件传输的软件是接受不了这个现实的；二就是它转换后音质变底了，文件大小也明显变小了。我想这是mp3格式的问题，mp3本身就是有损的转换。做到这里了，我实在是绝望了，不知道怎么去解决这个问题了。但别的软件有是怎么解决这个问题的呢？我自己都不知道怎么去说服自己，难道别人是自己做的格式转换？还是花了钱给了苹果找了接口直接导出mp3文件？这些困惑我无法证实。突然感觉到绝望了。我也开始转移了注意，着手做了其他项目。也就在做其他项目不久，终于看到希望了，有个同事在网上找到了一个demo，导出mp3文件就在一秒之内解决。很神奇，让我有惊讶有兴奋。没有音质的损失，文件大小基本没变化，但还是丢失了一些基本元素，比如歌曲的封面、歌手等属性。要想做到属性也不丢失，还得自己加上这些属性，我想我们已经做的更好了，能导出mp3文件已经实在是让我很兴奋了。这些小问题也就先不看吧。</p>\n<p>　　导出mp3格式的文件了，问题也就解决了。我心情也平复了许多。如果有朋友也有此方面的需求，可以到这里下载<a href=\"https://github.com/lyroger/TSLibraryImport\" target=\"_blank\" rel=\"external\">demo</a></p>\n","excerpt":"","more":"<p>最近在忙着做一个文件传输的软件，刚开始也没去想项目实现的困难度，可不可行。怎么说呢，因为有类似的软件都已经上线了，别人都已经实现了，就算在可行性上面做再多的分析，也是多余的了。做这个项目也是我换工作后的第一个项目，以前做ios开发时间并不是很长，对ios开发的经验也是有限的。也没想过会遇到什么困难，既来之则安之了吧。</p>\n<p>　　项目分下来后，我被安排做音视频模块和图片模块，主要做UI和媒体文件的获取任务和播放。看起来并不是很多事情，我按照以前的工作思维，拿到需求，找到解决方案，考虑工作周期，计划工作量，恭恭敬敬的做起来。一般我的做法都是先把自己没把握的问题先去找个解决方案，要是有了这些方案后，工作起来就不会感觉到压力，就只是工作量的问题了。所以看了需求后，我第一个就是去找怎么获取ipod里面的文件，以及它们的基本属性，比如音乐文件，它们的专辑名称、歌手、封面等。当时在博客园上找到了一篇关于获取ipod音乐文件基本信息的博客，很兴奋的看完了，同时也转载到了自己的博客中，供自己以后随时翻阅，在我的博客中叫<a href=\"http://www.cnblogs.com/lyanet/archive/2013/03/27/2985019.html\">《ios获取音乐库信息（转）》</a>，当时看的也不是原文，所以我也不知道原文在哪，就只是在标题上加了个“转”字，以表非自己著作。然后我便按照此篇文章将ipod里的操作都完成了，播放音乐，音乐列表，音乐文件的封面，歌手等。其实仅仅只是做到这些，并不是很难，因为你只需要使用MPMediaQuery就可以获取ipod里的所有音乐文件，然后循环他的item就可以拿到每个音乐文件对象，根据音乐文件对象的valueForProperty：方法可以拿到你想要的东西。小说明一下：并不是你想要的所有都能拿到。正因为这个，我才遇到了些问题，也是我在此项目中遇到最困难最难解决的问题。也开始了解ios系统的基本原理。文章开始就说了，我是要做一个文件传输的软件，所以并不是只将自己程序中的文件传输，既然要提到ipod，也意味着要对ipod里面的文件进行操作，需要播放，传输等。我想：做ios开发的人都知道ios是一个比较封闭的，这也是此系统的高安全性所在。他基于沙盒原理，想要对其他程序的文件进行操作，不是系统给出的接口，你是没办法去实现你想要的需求的。所以当时我一直对ipod文件导出困惑不解，查阅了很多资料，发过很多贴，问过一些同事，但都没能解决问题。所以这个问题也拖了很久。问题不主要在于怎么导出，关键在于导出后还能提供给其他平台的系统使用，比如android系统。这就是文件的格式问题了。因为在ios系统中，提供的接口导出的文件基本上是m4a、caf等的格式。这些格式在android系统上播放不了。所以要想在其他系统中也能播放，也就只能是mp3格式了。想要导出成mp3格式的文件，我想很多人都想要这个需求吧，这是我在很多贴上看到的，但基本上没人能把这个导出成mp3格式的解决方案贴的很详细。后来我能想到的办法就是使用网上说的lame库，首先将ipod里面的文件导出成caf格式的，再通过lame库将其转换成mp3格式的。我试了，成功了，让我兴奋了一把，但导出的结果却不尽人意。有两个最严重的缺点，一个是转换的时间比较长，10M的文件转换花了一分钟，我想：对于一个文件传输的软件是接受不了这个现实的；二就是它转换后音质变底了，文件大小也明显变小了。我想这是mp3格式的问题，mp3本身就是有损的转换。做到这里了，我实在是绝望了，不知道怎么去解决这个问题了。但别的软件有是怎么解决这个问题的呢？我自己都不知道怎么去说服自己，难道别人是自己做的格式转换？还是花了钱给了苹果找了接口直接导出mp3文件？这些困惑我无法证实。突然感觉到绝望了。我也开始转移了注意，着手做了其他项目。也就在做其他项目不久，终于看到希望了，有个同事在网上找到了一个demo，导出mp3文件就在一秒之内解决。很神奇，让我有惊讶有兴奋。没有音质的损失，文件大小基本没变化，但还是丢失了一些基本元素，比如歌曲的封面、歌手等属性。要想做到属性也不丢失，还得自己加上这些属性，我想我们已经做的更好了，能导出mp3文件已经实在是让我很兴奋了。这些小问题也就先不看吧。</p>\n<p>　　导出mp3格式的文件了，问题也就解决了。我心情也平复了许多。如果有朋友也有此方面的需求，可以到这里下载<a href=\"https://github.com/lyroger/TSLibraryImport\">demo</a></p>\n"},{"date":"2015-10-16T03:06:00.000Z","status":"public","title":"动画学习篇一","_content":"\n## 前言\n  最近玩手游比较多，看到了GameCenter中个人中心有一些气泡效果特别好，于是想想怎么实现的，要是能放到自己写的程序中，也是一种不错的感觉，能感觉到应用有一种活力.\n## 进入正题\n先看看gamecenter中的效果是怎样的，然后我们在着步分析：\n\n![](/images/gameCenter1.gif)\n我们先参考单个气泡效果，就拿GameCenter气泡来说吧，仔细看看，他有一个整体画圈的效果，还有一个一张一缩的动画，想到多个动画组合成的一个效果就可以想到动画帧来做：CAKeyframeAnimation；\n首先我们来实现一个画圈的效果，看看下面代码：\n```objective-c\nCAKeyframeAnimation *pathAnimation = [CAKeyframeAnimation animationWithKeyPath:@\"position\"];\n    pathAnimation.calculationMode = kCAAnimationPaced;\n    pathAnimation.fillMode = kCAFillModeForwards;\n    pathAnimation.removedOnCompletion = NO;\n    pathAnimation.repeatCount = INFINITY;\n    pathAnimation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];\n    pathAnimation.duration = 6.0;\n    \n    CGMutablePathRef curvedPath = CGPathCreateMutable();\n    CGFloat amplitude = 10;\n    CGRect circleContainer = CGRectInset(gameView.frame, gameView.bounds.size.width / 2 - amplitude, gameView.bounds.size.width / 2 - amplitude);\n    CGPathAddEllipseInRect(curvedPath, NULL, circleContainer);\n    \n    pathAnimation.path = curvedPath;\n    CGPathRelease(curvedPath);\n    [gameView.layer addAnimation:pathAnimation forKey:@\"gameCenterAnimation\"];\n```\n代码实现效果如下图：\n\n![](/images/game1.gif)\n接下来我们来实现一张一缩的效果：\n代码如下：\n```objective-c\nCAKeyframeAnimation *scaleX = [CAKeyframeAnimation animationWithKeyPath:@\"transform.scale.x\"];\n    scaleX.duration = 1;\n    scaleX.values = @[@1.0, @1.1, @1.0];\n    scaleX.keyTimes = @[@0.0, @0.5, @1.0];\n    scaleX.repeatCount = INFINITY;\n    scaleX.autoreverses = YES;\n    \n    scaleX.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];\n    [gameView.layer addAnimation:scaleX forKey:@\"scaleX\"];\n    \n    \n    CAKeyframeAnimation *scaleY = [CAKeyframeAnimation animationWithKeyPath:@\"transform.scale.y\"];\n    scaleY.duration = 1.5;\n    scaleY.values = @[@1.0, @1.1, @1.0];\n    scaleY.keyTimes = @[@0.0, @0.5, @1.0];\n    scaleY.repeatCount = INFINITY;\n    scaleY.autoreverses = YES;\n    scaleX.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];\n    [gameView.layer addAnimation:scaleY forKey:@\"scaleY\"];\n```\n结合上面的代码一起，便可以看到整体效果：\n\n![](/images/game2.gif)\n## 总结\n很多动画其实就是由多个动画分解组合而成，所以要学会使用CAKeyframeAnimation。","source":"_posts/动画学习篇一.md","raw":"---\ndate: 2015-10-16 11:06\nstatus: public\ntitle: 动画学习篇一\ncategory: 动画\n---\n\n## 前言\n  最近玩手游比较多，看到了GameCenter中个人中心有一些气泡效果特别好，于是想想怎么实现的，要是能放到自己写的程序中，也是一种不错的感觉，能感觉到应用有一种活力.\n## 进入正题\n先看看gamecenter中的效果是怎样的，然后我们在着步分析：\n\n![](/images/gameCenter1.gif)\n我们先参考单个气泡效果，就拿GameCenter气泡来说吧，仔细看看，他有一个整体画圈的效果，还有一个一张一缩的动画，想到多个动画组合成的一个效果就可以想到动画帧来做：CAKeyframeAnimation；\n首先我们来实现一个画圈的效果，看看下面代码：\n```objective-c\nCAKeyframeAnimation *pathAnimation = [CAKeyframeAnimation animationWithKeyPath:@\"position\"];\n    pathAnimation.calculationMode = kCAAnimationPaced;\n    pathAnimation.fillMode = kCAFillModeForwards;\n    pathAnimation.removedOnCompletion = NO;\n    pathAnimation.repeatCount = INFINITY;\n    pathAnimation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];\n    pathAnimation.duration = 6.0;\n    \n    CGMutablePathRef curvedPath = CGPathCreateMutable();\n    CGFloat amplitude = 10;\n    CGRect circleContainer = CGRectInset(gameView.frame, gameView.bounds.size.width / 2 - amplitude, gameView.bounds.size.width / 2 - amplitude);\n    CGPathAddEllipseInRect(curvedPath, NULL, circleContainer);\n    \n    pathAnimation.path = curvedPath;\n    CGPathRelease(curvedPath);\n    [gameView.layer addAnimation:pathAnimation forKey:@\"gameCenterAnimation\"];\n```\n代码实现效果如下图：\n\n![](/images/game1.gif)\n接下来我们来实现一张一缩的效果：\n代码如下：\n```objective-c\nCAKeyframeAnimation *scaleX = [CAKeyframeAnimation animationWithKeyPath:@\"transform.scale.x\"];\n    scaleX.duration = 1;\n    scaleX.values = @[@1.0, @1.1, @1.0];\n    scaleX.keyTimes = @[@0.0, @0.5, @1.0];\n    scaleX.repeatCount = INFINITY;\n    scaleX.autoreverses = YES;\n    \n    scaleX.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];\n    [gameView.layer addAnimation:scaleX forKey:@\"scaleX\"];\n    \n    \n    CAKeyframeAnimation *scaleY = [CAKeyframeAnimation animationWithKeyPath:@\"transform.scale.y\"];\n    scaleY.duration = 1.5;\n    scaleY.values = @[@1.0, @1.1, @1.0];\n    scaleY.keyTimes = @[@0.0, @0.5, @1.0];\n    scaleY.repeatCount = INFINITY;\n    scaleY.autoreverses = YES;\n    scaleX.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];\n    [gameView.layer addAnimation:scaleY forKey:@\"scaleY\"];\n```\n结合上面的代码一起，便可以看到整体效果：\n\n![](/images/game2.gif)\n## 总结\n很多动画其实就是由多个动画分解组合而成，所以要学会使用CAKeyframeAnimation。","slug":"动画学习篇一","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7focy0017zn3mpddstv7g","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  最近玩手游比较多，看到了GameCenter中个人中心有一些气泡效果特别好，于是想想怎么实现的，要是能放到自己写的程序中，也是一种不错的感觉，能感觉到应用有一种活力.</p>\n<h2 id=\"进入正题\"><a href=\"#进入正题\" class=\"headerlink\" title=\"进入正题\"></a>进入正题</h2><p>先看看gamecenter中的效果是怎样的，然后我们在着步分析：</p>\n<p><img src=\"/images/gameCenter1.gif\" alt=\"\"><br>我们先参考单个气泡效果，就拿GameCenter气泡来说吧，仔细看看，他有一个整体画圈的效果，还有一个一张一缩的动画，想到多个动画组合成的一个效果就可以想到动画帧来做：CAKeyframeAnimation；<br>首先我们来实现一个画圈的效果，看看下面代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">CAKeyframeAnimation *pathAnimation = [CAKeyframeAnimation animationWithKeyPath:@&quot;position&quot;];</div><div class=\"line\">    pathAnimation.calculationMode = kCAAnimationPaced;</div><div class=\"line\">    pathAnimation.fillMode = kCAFillModeForwards;</div><div class=\"line\">    pathAnimation.removedOnCompletion = NO;</div><div class=\"line\">    pathAnimation.repeatCount = INFINITY;</div><div class=\"line\">    pathAnimation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];</div><div class=\"line\">    pathAnimation.duration = 6.0;</div><div class=\"line\">    </div><div class=\"line\">    CGMutablePathRef curvedPath = CGPathCreateMutable();</div><div class=\"line\">    CGFloat amplitude = 10;</div><div class=\"line\">    CGRect circleContainer = CGRectInset(gameView.frame, gameView.bounds.size.width / 2 - amplitude, gameView.bounds.size.width / 2 - amplitude);</div><div class=\"line\">    CGPathAddEllipseInRect(curvedPath, NULL, circleContainer);</div><div class=\"line\">    </div><div class=\"line\">    pathAnimation.path = curvedPath;</div><div class=\"line\">    CGPathRelease(curvedPath);</div><div class=\"line\">    [gameView.layer addAnimation:pathAnimation forKey:@&quot;gameCenterAnimation&quot;];</div></pre></td></tr></table></figure></p>\n<p>代码实现效果如下图：</p>\n<p><img src=\"/images/game1.gif\" alt=\"\"><br>接下来我们来实现一张一缩的效果：<br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">CAKeyframeAnimation *scaleX = [CAKeyframeAnimation animationWithKeyPath:@&quot;transform.scale.x&quot;];</div><div class=\"line\">    scaleX.duration = 1;</div><div class=\"line\">    scaleX.values = @[@1.0, @1.1, @1.0];</div><div class=\"line\">    scaleX.keyTimes = @[@0.0, @0.5, @1.0];</div><div class=\"line\">    scaleX.repeatCount = INFINITY;</div><div class=\"line\">    scaleX.autoreverses = YES;</div><div class=\"line\">    </div><div class=\"line\">    scaleX.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class=\"line\">    [gameView.layer addAnimation:scaleX forKey:@&quot;scaleX&quot;];</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    CAKeyframeAnimation *scaleY = [CAKeyframeAnimation animationWithKeyPath:@&quot;transform.scale.y&quot;];</div><div class=\"line\">    scaleY.duration = 1.5;</div><div class=\"line\">    scaleY.values = @[@1.0, @1.1, @1.0];</div><div class=\"line\">    scaleY.keyTimes = @[@0.0, @0.5, @1.0];</div><div class=\"line\">    scaleY.repeatCount = INFINITY;</div><div class=\"line\">    scaleY.autoreverses = YES;</div><div class=\"line\">    scaleX.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class=\"line\">    [gameView.layer addAnimation:scaleY forKey:@&quot;scaleY&quot;];</div></pre></td></tr></table></figure></p>\n<p>结合上面的代码一起，便可以看到整体效果：</p>\n<p><img src=\"/images/game2.gif\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>很多动画其实就是由多个动画分解组合而成，所以要学会使用CAKeyframeAnimation。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  最近玩手游比较多，看到了GameCenter中个人中心有一些气泡效果特别好，于是想想怎么实现的，要是能放到自己写的程序中，也是一种不错的感觉，能感觉到应用有一种活力.</p>\n<h2 id=\"进入正题\"><a href=\"#进入正题\" class=\"headerlink\" title=\"进入正题\"></a>进入正题</h2><p>先看看gamecenter中的效果是怎样的，然后我们在着步分析：</p>\n<p><img src=\"/images/gameCenter1.gif\" alt=\"\"><br>我们先参考单个气泡效果，就拿GameCenter气泡来说吧，仔细看看，他有一个整体画圈的效果，还有一个一张一缩的动画，想到多个动画组合成的一个效果就可以想到动画帧来做：CAKeyframeAnimation；<br>首先我们来实现一个画圈的效果，看看下面代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">CAKeyframeAnimation *pathAnimation = [CAKeyframeAnimation animationWithKeyPath:@&quot;position&quot;];</div><div class=\"line\">    pathAnimation.calculationMode = kCAAnimationPaced;</div><div class=\"line\">    pathAnimation.fillMode = kCAFillModeForwards;</div><div class=\"line\">    pathAnimation.removedOnCompletion = NO;</div><div class=\"line\">    pathAnimation.repeatCount = INFINITY;</div><div class=\"line\">    pathAnimation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];</div><div class=\"line\">    pathAnimation.duration = 6.0;</div><div class=\"line\">    </div><div class=\"line\">    CGMutablePathRef curvedPath = CGPathCreateMutable();</div><div class=\"line\">    CGFloat amplitude = 10;</div><div class=\"line\">    CGRect circleContainer = CGRectInset(gameView.frame, gameView.bounds.size.width / 2 - amplitude, gameView.bounds.size.width / 2 - amplitude);</div><div class=\"line\">    CGPathAddEllipseInRect(curvedPath, NULL, circleContainer);</div><div class=\"line\">    </div><div class=\"line\">    pathAnimation.path = curvedPath;</div><div class=\"line\">    CGPathRelease(curvedPath);</div><div class=\"line\">    [gameView.layer addAnimation:pathAnimation forKey:@&quot;gameCenterAnimation&quot;];</div></pre></td></tr></table></figure></p>\n<p>代码实现效果如下图：</p>\n<p><img src=\"/images/game1.gif\" alt=\"\"><br>接下来我们来实现一张一缩的效果：<br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">CAKeyframeAnimation *scaleX = [CAKeyframeAnimation animationWithKeyPath:@&quot;transform.scale.x&quot;];</div><div class=\"line\">    scaleX.duration = 1;</div><div class=\"line\">    scaleX.values = @[@1.0, @1.1, @1.0];</div><div class=\"line\">    scaleX.keyTimes = @[@0.0, @0.5, @1.0];</div><div class=\"line\">    scaleX.repeatCount = INFINITY;</div><div class=\"line\">    scaleX.autoreverses = YES;</div><div class=\"line\">    </div><div class=\"line\">    scaleX.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class=\"line\">    [gameView.layer addAnimation:scaleX forKey:@&quot;scaleX&quot;];</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    CAKeyframeAnimation *scaleY = [CAKeyframeAnimation animationWithKeyPath:@&quot;transform.scale.y&quot;];</div><div class=\"line\">    scaleY.duration = 1.5;</div><div class=\"line\">    scaleY.values = @[@1.0, @1.1, @1.0];</div><div class=\"line\">    scaleY.keyTimes = @[@0.0, @0.5, @1.0];</div><div class=\"line\">    scaleY.repeatCount = INFINITY;</div><div class=\"line\">    scaleY.autoreverses = YES;</div><div class=\"line\">    scaleX.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div><div class=\"line\">    [gameView.layer addAnimation:scaleY forKey:@&quot;scaleY&quot;];</div></pre></td></tr></table></figure></p>\n<p>结合上面的代码一起，便可以看到整体效果：</p>\n<p><img src=\"/images/game2.gif\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>很多动画其实就是由多个动画分解组合而成，所以要学会使用CAKeyframeAnimation。</p>\n"},{"date":"2016-01-07T06:23:00.000Z","status":"public","title":"动态修复线上bug","_content":"\n### 前言\n这个主题是在QQ空间终端开发团队公众号的一篇文章看到的([链接地址](http://zhuanlan.zhihu.com/magilu/20288657))，平时开发中确实没有使用过，为了以后派上用途，在这写这篇文章记录一下。QQ空间终端开发团队公众号一文中提到的使用TPatch来动态修复补丁，我找了很久确没找到TPatch的下载地址，而且他还不开源，但通过他我却了解到其他比较好用的动态修复补丁的框架，比如[JSPatch](http://jspatch.com),这篇文章我就JSPatch来记录如何使用JSPatch修复线上APP的bug。\n### 修复的基本原理\n能实现线上修复bug的最根本的原理是因为 Objective-C 是一门动态语言，OC上所有方法的调用/类的生成都通过 Objective-C Runtime 在运行时进行，所以我们可以通过类名/方法名反射得到相应的类和方法，也可以替换某个类的方法为新的实现，还可以新注册一个类，为类添加方法。\n### JSPatch的使用\n1. 获得AppKey\n首先你得先去[JSPatch申请账号](http://jspatch.com/Index/invite)，获得AppKey，每个App都有对应的一个唯一AppKey。\n2. 下载SDK并导入工程\n下载 SDK 后解压，将 JSPatch.framework 导入到工程中，并添加两个系统库文件：libz.dylib 和 JavaScriptCore.framework。\n3. 添加代码\n在 AppDelegate.m 里载入文件，并调用 +startWithAppKey: 方法，参数为第一步获得的 AppKey。例子：\n```objective-c\n#import <JSPatch/JSPatch.h>\n@implementation AppDelegate\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [JSPatch startWithAppKey:@\"你申请的AppKey\"];\n    // your code\n}\n@end\n```\n至此 JSPatch 接入完毕，接着你就可以在后台为这个 APP 添加JS补丁了。\n4.JS补丁代码如何写\n写到这里，其实自己也并不太熟悉 JS 补丁代码的基本语法，不过还好他提供了[文档](https://github.com/bang590/JSPatch/wiki/基础用法)，更好的是提供了机器人帮你将OC代码转换成JS代码，[转换地址](http://bang590.github.io/JSPatchConvertor/)，不过提供转换的功能实现简单的OC代码还行，比较复杂的还需人工修复，所以：如果有使用到动态修复线上 APP Bug，并且选择使用了 JSPatch，那么你就不的不好好学习一下 JS 补丁代码的语法了。\n\n### 补丁版本支持\n1. 可针对APP中对应的版本发布补丁代码。\n2. 可修改已经发布的补丁脚本代码，既重新上传该版本的脚本代码，APP重新启动时，会请求判断是否已经更新，若更新了会下载最新脚本代码覆盖原来的脚本代码，启动后并执行。\n3. 可移除已经发布的补丁脚本代码，只要在后台页面删除该版本的APP，客户端APP请求是发现该版本已经被删除，则会自动删除本地的补丁脚本代码。\n\n### 总结\n既然有这么好用的东西，记录下来并不是一件坏事，说不定以后能排上用场。另外，估计大家也会想到，既然这么强大，那为啥还要发布新版本，直接都通过 JS 脚本代码来实现新需求，这不避免了重新上线中一大堆麻烦的事情了吗？其实解决一些小问题还是可以，如果有大批需求需要上线，估计使用这种方式还是不太妥当，毕竟通过脚本代码转换到OC是需要消耗一定的性能的。\n\n----------\n> 参考文献:\n> [JSPatch实现原理详解](http://blog.cnbang.net/tech/2808/)\n> [JSPatch](http://jspatch.com)","source":"_posts/动态修复线上bug.md","raw":"---\ndate: 2016-01-07 14:23\nstatus: public\ntitle: 动态修复线上bug\ncategory: 高效篇\n---\n\n### 前言\n这个主题是在QQ空间终端开发团队公众号的一篇文章看到的([链接地址](http://zhuanlan.zhihu.com/magilu/20288657))，平时开发中确实没有使用过，为了以后派上用途，在这写这篇文章记录一下。QQ空间终端开发团队公众号一文中提到的使用TPatch来动态修复补丁，我找了很久确没找到TPatch的下载地址，而且他还不开源，但通过他我却了解到其他比较好用的动态修复补丁的框架，比如[JSPatch](http://jspatch.com),这篇文章我就JSPatch来记录如何使用JSPatch修复线上APP的bug。\n### 修复的基本原理\n能实现线上修复bug的最根本的原理是因为 Objective-C 是一门动态语言，OC上所有方法的调用/类的生成都通过 Objective-C Runtime 在运行时进行，所以我们可以通过类名/方法名反射得到相应的类和方法，也可以替换某个类的方法为新的实现，还可以新注册一个类，为类添加方法。\n### JSPatch的使用\n1. 获得AppKey\n首先你得先去[JSPatch申请账号](http://jspatch.com/Index/invite)，获得AppKey，每个App都有对应的一个唯一AppKey。\n2. 下载SDK并导入工程\n下载 SDK 后解压，将 JSPatch.framework 导入到工程中，并添加两个系统库文件：libz.dylib 和 JavaScriptCore.framework。\n3. 添加代码\n在 AppDelegate.m 里载入文件，并调用 +startWithAppKey: 方法，参数为第一步获得的 AppKey。例子：\n```objective-c\n#import <JSPatch/JSPatch.h>\n@implementation AppDelegate\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [JSPatch startWithAppKey:@\"你申请的AppKey\"];\n    // your code\n}\n@end\n```\n至此 JSPatch 接入完毕，接着你就可以在后台为这个 APP 添加JS补丁了。\n4.JS补丁代码如何写\n写到这里，其实自己也并不太熟悉 JS 补丁代码的基本语法，不过还好他提供了[文档](https://github.com/bang590/JSPatch/wiki/基础用法)，更好的是提供了机器人帮你将OC代码转换成JS代码，[转换地址](http://bang590.github.io/JSPatchConvertor/)，不过提供转换的功能实现简单的OC代码还行，比较复杂的还需人工修复，所以：如果有使用到动态修复线上 APP Bug，并且选择使用了 JSPatch，那么你就不的不好好学习一下 JS 补丁代码的语法了。\n\n### 补丁版本支持\n1. 可针对APP中对应的版本发布补丁代码。\n2. 可修改已经发布的补丁脚本代码，既重新上传该版本的脚本代码，APP重新启动时，会请求判断是否已经更新，若更新了会下载最新脚本代码覆盖原来的脚本代码，启动后并执行。\n3. 可移除已经发布的补丁脚本代码，只要在后台页面删除该版本的APP，客户端APP请求是发现该版本已经被删除，则会自动删除本地的补丁脚本代码。\n\n### 总结\n既然有这么好用的东西，记录下来并不是一件坏事，说不定以后能排上用场。另外，估计大家也会想到，既然这么强大，那为啥还要发布新版本，直接都通过 JS 脚本代码来实现新需求，这不避免了重新上线中一大堆麻烦的事情了吗？其实解决一些小问题还是可以，如果有大批需求需要上线，估计使用这种方式还是不太妥当，毕竟通过脚本代码转换到OC是需要消耗一定的性能的。\n\n----------\n> 参考文献:\n> [JSPatch实现原理详解](http://blog.cnbang.net/tech/2808/)\n> [JSPatch](http://jspatch.com)","slug":"动态修复线上bug","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7fod1001czn3mjkrbp95v","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这个主题是在QQ空间终端开发团队公众号的一篇文章看到的(<a href=\"http://zhuanlan.zhihu.com/magilu/20288657\" target=\"_blank\" rel=\"external\">链接地址</a>)，平时开发中确实没有使用过，为了以后派上用途，在这写这篇文章记录一下。QQ空间终端开发团队公众号一文中提到的使用TPatch来动态修复补丁，我找了很久确没找到TPatch的下载地址，而且他还不开源，但通过他我却了解到其他比较好用的动态修复补丁的框架，比如<a href=\"http://jspatch.com\" target=\"_blank\" rel=\"external\">JSPatch</a>,这篇文章我就JSPatch来记录如何使用JSPatch修复线上APP的bug。</p>\n<h3 id=\"修复的基本原理\"><a href=\"#修复的基本原理\" class=\"headerlink\" title=\"修复的基本原理\"></a>修复的基本原理</h3><p>能实现线上修复bug的最根本的原理是因为 Objective-C 是一门动态语言，OC上所有方法的调用/类的生成都通过 Objective-C Runtime 在运行时进行，所以我们可以通过类名/方法名反射得到相应的类和方法，也可以替换某个类的方法为新的实现，还可以新注册一个类，为类添加方法。</p>\n<h3 id=\"JSPatch的使用\"><a href=\"#JSPatch的使用\" class=\"headerlink\" title=\"JSPatch的使用\"></a>JSPatch的使用</h3><ol>\n<li>获得AppKey<br>首先你得先去<a href=\"http://jspatch.com/Index/invite\" target=\"_blank\" rel=\"external\">JSPatch申请账号</a>，获得AppKey，每个App都有对应的一个唯一AppKey。</li>\n<li>下载SDK并导入工程<br>下载 SDK 后解压，将 JSPatch.framework 导入到工程中，并添加两个系统库文件：libz.dylib 和 JavaScriptCore.framework。</li>\n<li>添加代码<br>在 AppDelegate.m 里载入文件，并调用 +startWithAppKey: 方法，参数为第一步获得的 AppKey。例子：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;JSPatch/JSPatch.h&gt;</div><div class=\"line\">@implementation AppDelegate</div><div class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class=\"line\">    [JSPatch startWithAppKey:@&quot;你申请的AppKey&quot;];</div><div class=\"line\">    // your code</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>至此 JSPatch 接入完毕，接着你就可以在后台为这个 APP 添加JS补丁了。<br>4.JS补丁代码如何写<br>写到这里，其实自己也并不太熟悉 JS 补丁代码的基本语法，不过还好他提供了<a href=\"https://github.com/bang590/JSPatch/wiki/基础用法\" target=\"_blank\" rel=\"external\">文档</a>，更好的是提供了机器人帮你将OC代码转换成JS代码，<a href=\"http://bang590.github.io/JSPatchConvertor/\" target=\"_blank\" rel=\"external\">转换地址</a>，不过提供转换的功能实现简单的OC代码还行，比较复杂的还需人工修复，所以：如果有使用到动态修复线上 APP Bug，并且选择使用了 JSPatch，那么你就不的不好好学习一下 JS 补丁代码的语法了。</p>\n<h3 id=\"补丁版本支持\"><a href=\"#补丁版本支持\" class=\"headerlink\" title=\"补丁版本支持\"></a>补丁版本支持</h3><ol>\n<li>可针对APP中对应的版本发布补丁代码。</li>\n<li>可修改已经发布的补丁脚本代码，既重新上传该版本的脚本代码，APP重新启动时，会请求判断是否已经更新，若更新了会下载最新脚本代码覆盖原来的脚本代码，启动后并执行。</li>\n<li>可移除已经发布的补丁脚本代码，只要在后台页面删除该版本的APP，客户端APP请求是发现该版本已经被删除，则会自动删除本地的补丁脚本代码。</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>既然有这么好用的东西，记录下来并不是一件坏事，说不定以后能排上用场。另外，估计大家也会想到，既然这么强大，那为啥还要发布新版本，直接都通过 JS 脚本代码来实现新需求，这不避免了重新上线中一大堆麻烦的事情了吗？其实解决一些小问题还是可以，如果有大批需求需要上线，估计使用这种方式还是不太妥当，毕竟通过脚本代码转换到OC是需要消耗一定的性能的。</p>\n<hr>\n<blockquote>\n<p>参考文献:<br><a href=\"http://blog.cnbang.net/tech/2808/\" target=\"_blank\" rel=\"external\">JSPatch实现原理详解</a><br><a href=\"http://jspatch.com\" target=\"_blank\" rel=\"external\">JSPatch</a></p>\n</blockquote>\n","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>这个主题是在QQ空间终端开发团队公众号的一篇文章看到的(<a href=\"http://zhuanlan.zhihu.com/magilu/20288657\">链接地址</a>)，平时开发中确实没有使用过，为了以后派上用途，在这写这篇文章记录一下。QQ空间终端开发团队公众号一文中提到的使用TPatch来动态修复补丁，我找了很久确没找到TPatch的下载地址，而且他还不开源，但通过他我却了解到其他比较好用的动态修复补丁的框架，比如<a href=\"http://jspatch.com\">JSPatch</a>,这篇文章我就JSPatch来记录如何使用JSPatch修复线上APP的bug。</p>\n<h3 id=\"修复的基本原理\"><a href=\"#修复的基本原理\" class=\"headerlink\" title=\"修复的基本原理\"></a>修复的基本原理</h3><p>能实现线上修复bug的最根本的原理是因为 Objective-C 是一门动态语言，OC上所有方法的调用/类的生成都通过 Objective-C Runtime 在运行时进行，所以我们可以通过类名/方法名反射得到相应的类和方法，也可以替换某个类的方法为新的实现，还可以新注册一个类，为类添加方法。</p>\n<h3 id=\"JSPatch的使用\"><a href=\"#JSPatch的使用\" class=\"headerlink\" title=\"JSPatch的使用\"></a>JSPatch的使用</h3><ol>\n<li>获得AppKey<br>首先你得先去<a href=\"http://jspatch.com/Index/invite\">JSPatch申请账号</a>，获得AppKey，每个App都有对应的一个唯一AppKey。</li>\n<li>下载SDK并导入工程<br>下载 SDK 后解压，将 JSPatch.framework 导入到工程中，并添加两个系统库文件：libz.dylib 和 JavaScriptCore.framework。</li>\n<li>添加代码<br>在 AppDelegate.m 里载入文件，并调用 +startWithAppKey: 方法，参数为第一步获得的 AppKey。例子：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;JSPatch/JSPatch.h&gt;</div><div class=\"line\">@implementation AppDelegate</div><div class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class=\"line\">    [JSPatch startWithAppKey:@&quot;你申请的AppKey&quot;];</div><div class=\"line\">    // your code</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>至此 JSPatch 接入完毕，接着你就可以在后台为这个 APP 添加JS补丁了。<br>4.JS补丁代码如何写<br>写到这里，其实自己也并不太熟悉 JS 补丁代码的基本语法，不过还好他提供了<a href=\"https://github.com/bang590/JSPatch/wiki/基础用法\">文档</a>，更好的是提供了机器人帮你将OC代码转换成JS代码，<a href=\"http://bang590.github.io/JSPatchConvertor/\">转换地址</a>，不过提供转换的功能实现简单的OC代码还行，比较复杂的还需人工修复，所以：如果有使用到动态修复线上 APP Bug，并且选择使用了 JSPatch，那么你就不的不好好学习一下 JS 补丁代码的语法了。</p>\n<h3 id=\"补丁版本支持\"><a href=\"#补丁版本支持\" class=\"headerlink\" title=\"补丁版本支持\"></a>补丁版本支持</h3><ol>\n<li>可针对APP中对应的版本发布补丁代码。</li>\n<li>可修改已经发布的补丁脚本代码，既重新上传该版本的脚本代码，APP重新启动时，会请求判断是否已经更新，若更新了会下载最新脚本代码覆盖原来的脚本代码，启动后并执行。</li>\n<li>可移除已经发布的补丁脚本代码，只要在后台页面删除该版本的APP，客户端APP请求是发现该版本已经被删除，则会自动删除本地的补丁脚本代码。</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>既然有这么好用的东西，记录下来并不是一件坏事，说不定以后能排上用场。另外，估计大家也会想到，既然这么强大，那为啥还要发布新版本，直接都通过 JS 脚本代码来实现新需求，这不避免了重新上线中一大堆麻烦的事情了吗？其实解决一些小问题还是可以，如果有大批需求需要上线，估计使用这种方式还是不太妥当，毕竟通过脚本代码转换到OC是需要消耗一定的性能的。</p>\n<hr>\n<blockquote>\n<p>参考文献:<br><a href=\"http://blog.cnbang.net/tech/2808/\">JSPatch实现原理详解</a><br><a href=\"http://jspatch.com\">JSPatch</a></p>\n</blockquote>\n"},{"date":"2015-10-22T06:29:00.000Z","status":"public","title":"升级XCode7和iOS9相关问题","_content":"\n## 一.报Bitcode相关错误。\n```\nFramework/libraries/extends/QQSDK/TencentOpenAPI.framework/TencentOpenAPI(WeiyunAPI.o)' does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n```\n1.解决方案\n工程文件中找到target->Build Settings->搜索bitcode，然后出现Enablecode选项，设置为NO即可。如图：\n\n![](/images/code.jpg)\n重新build即可消除bitcode相关问题。\n\n2.问题出现原因可以参考：[理解Bitcode：一种中间代码][mark]\n[mark]:http://www.cocoachina.com/ios/20150818/13078.html (理解Bitcode：一种中间代码)\n## 二.iOS9设备网络请求失败\n1.出现问题原因\niOS9把所有的http请求都改为https了：iOS9系统发送的网络请求将统一使用TLS 1.2 SSL。采用TLS 1.2 协议，目的是:强制增强数据访问安全，而且，系统 Foundation 框架下的相关网络请求，将不再默认使用 Http 等不安全的网络协议，而默认采用 TLS 1.2。服务器因此需要更新，以解析相关数据。如不更新，可通过在 Info.plist 中声明。\n2.具体如何在info.plist中声明\n```\n<key>NSAppTransportSecurity</key>\n<dict>\n    <key>NSAllowsArbitraryLoads</key>\n    <true/>\n</dict>\n```\n如图所示:\n\n![](/images/plist.jpg)","source":"_posts/升级XCode7和iOS9相关问题.md","raw":"---\ndate: 2015-10-22 14:29\nstatus: public\ntitle: 升级XCode7和iOS9相关问题\n---\n\n## 一.报Bitcode相关错误。\n```\nFramework/libraries/extends/QQSDK/TencentOpenAPI.framework/TencentOpenAPI(WeiyunAPI.o)' does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n```\n1.解决方案\n工程文件中找到target->Build Settings->搜索bitcode，然后出现Enablecode选项，设置为NO即可。如图：\n\n![](/images/code.jpg)\n重新build即可消除bitcode相关问题。\n\n2.问题出现原因可以参考：[理解Bitcode：一种中间代码][mark]\n[mark]:http://www.cocoachina.com/ios/20150818/13078.html (理解Bitcode：一种中间代码)\n## 二.iOS9设备网络请求失败\n1.出现问题原因\niOS9把所有的http请求都改为https了：iOS9系统发送的网络请求将统一使用TLS 1.2 SSL。采用TLS 1.2 协议，目的是:强制增强数据访问安全，而且，系统 Foundation 框架下的相关网络请求，将不再默认使用 Http 等不安全的网络协议，而默认采用 TLS 1.2。服务器因此需要更新，以解析相关数据。如不更新，可通过在 Info.plist 中声明。\n2.具体如何在info.plist中声明\n```\n<key>NSAppTransportSecurity</key>\n<dict>\n    <key>NSAllowsArbitraryLoads</key>\n    <true/>\n</dict>\n```\n如图所示:\n\n![](/images/plist.jpg)","slug":"升级XCode7和iOS9相关问题","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7fod4001ezn3mipchgbse","content":"<h2 id=\"一-报Bitcode相关错误。\"><a href=\"#一-报Bitcode相关错误。\" class=\"headerlink\" title=\"一.报Bitcode相关错误。\"></a>一.报Bitcode相关错误。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Framework/libraries/extends/QQSDK/TencentOpenAPI.framework/TencentOpenAPI(WeiyunAPI.o)&apos; does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64</div><div class=\"line\">clang: error: linker command failed with exit code 1 (use -v to see invocation)</div></pre></td></tr></table></figure>\n<p>1.解决方案<br>工程文件中找到target-&gt;Build Settings-&gt;搜索bitcode，然后出现Enablecode选项，设置为NO即可。如图：</p>\n<p><img src=\"/images/code.jpg\" alt=\"\"><br>重新build即可消除bitcode相关问题。</p>\n<p>2.问题出现原因可以参考：<a href=\"http://www.cocoachina.com/ios/20150818/13078.html\" title=\"理解Bitcode：一种中间代码\" target=\"_blank\" rel=\"external\">理解Bitcode：一种中间代码</a></p>\n<h2 id=\"二-iOS9设备网络请求失败\"><a href=\"#二-iOS9设备网络请求失败\" class=\"headerlink\" title=\"二.iOS9设备网络请求失败\"></a>二.iOS9设备网络请求失败</h2><p>1.出现问题原因<br>iOS9把所有的http请求都改为https了：iOS9系统发送的网络请求将统一使用TLS 1.2 SSL。采用TLS 1.2 协议，目的是:强制增强数据访问安全，而且，系统 Foundation 框架下的相关网络请求，将不再默认使用 Http 等不安全的网络协议，而默认采用 TLS 1.2。服务器因此需要更新，以解析相关数据。如不更新，可通过在 Info.plist 中声明。<br>2.具体如何在info.plist中声明<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;</div><div class=\"line\">&lt;dict&gt;</div><div class=\"line\">    &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;</div><div class=\"line\">    &lt;true/&gt;</div><div class=\"line\">&lt;/dict&gt;</div></pre></td></tr></table></figure></p>\n<p>如图所示:</p>\n<p><img src=\"/images/plist.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<h2 id=\"一-报Bitcode相关错误。\"><a href=\"#一-报Bitcode相关错误。\" class=\"headerlink\" title=\"一.报Bitcode相关错误。\"></a>一.报Bitcode相关错误。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Framework/libraries/extends/QQSDK/TencentOpenAPI.framework/TencentOpenAPI(WeiyunAPI.o)&apos; does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture arm64</div><div class=\"line\">clang: error: linker command failed with exit code 1 (use -v to see invocation)</div></pre></td></tr></table></figure>\n<p>1.解决方案<br>工程文件中找到target-&gt;Build Settings-&gt;搜索bitcode，然后出现Enablecode选项，设置为NO即可。如图：</p>\n<p><img src=\"/images/code.jpg\" alt=\"\"><br>重新build即可消除bitcode相关问题。</p>\n<p>2.问题出现原因可以参考：<a href=\"http://www.cocoachina.com/ios/20150818/13078.html\" title=\"理解Bitcode：一种中间代码\">理解Bitcode：一种中间代码</a></p>\n<h2 id=\"二-iOS9设备网络请求失败\"><a href=\"#二-iOS9设备网络请求失败\" class=\"headerlink\" title=\"二.iOS9设备网络请求失败\"></a>二.iOS9设备网络请求失败</h2><p>1.出现问题原因<br>iOS9把所有的http请求都改为https了：iOS9系统发送的网络请求将统一使用TLS 1.2 SSL。采用TLS 1.2 协议，目的是:强制增强数据访问安全，而且，系统 Foundation 框架下的相关网络请求，将不再默认使用 Http 等不安全的网络协议，而默认采用 TLS 1.2。服务器因此需要更新，以解析相关数据。如不更新，可通过在 Info.plist 中声明。<br>2.具体如何在info.plist中声明<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;</div><div class=\"line\">&lt;dict&gt;</div><div class=\"line\">    &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;</div><div class=\"line\">    &lt;true/&gt;</div><div class=\"line\">&lt;/dict&gt;</div></pre></td></tr></table></figure></p>\n<p>如图所示:</p>\n<p><img src=\"/images/plist.jpg\" alt=\"\"></p>\n"},{"date":"2016-01-21T06:26:00.000Z","status":"public","title":"动态添加需求(动态库)","_content":"\n## 前言\n前些天，公司提出需要动态添加一些需求给线上App，当时觉得有点不太好办，因为当时还没有头绪，后来上网查了些资料，如[这篇文章](http://blog.csdn.net/like7xiaoben/article/details/44081257)，不过他这只是将写好的动态库拷贝到本地的沙盒中，也就是有这个方法然后我有了头绪，我只需将写好的动态库压缩上传到服务器，提供线上APP下载，解压后加载动态库执行代码即可实现其功能。接下来还是来看看具体操作和过程中遇到的一些问题和注意点吧。整个需求我写了一个[demo](https://github.com/lyroger/DynamicDemo),你可以先下载这个[demo](https://github.com/lyroger/DynamicDemo),对照此文章来理解。\n### 一、生成动态库\nXcode6就支持动态库了，所以只要使用XCode6及更高版本的XCode便可以生成动态库。\n![](/images/9E729546-8D22-48A6-A3D7-88FBDD787DD9.png)\n此demo中满足需求的动态库我取名叫DynamicFramework.framework。在这个动态库中我实现了弹出一个UIViewController和在这个UIViewController中加载了动态库中的资源文件。并在这个动态库中引用了其他的动态库（此的demo中引用的是CommonFramework.framework），并调用其他库中的方法。这样就可以满足灵活调用和灵活添加需求的要求了。如果你需要给线上app提供动态库，你可以将写好的动态库压缩上传到服务器提供下载。\n### 二、加载动态库\n在主工程中我们来加载写好的动态库，从网络下载的过程我在demo就没实现了，只做了将下下来的zip文件解压的操作，加载动态库步骤很简单，先将服务器上的DynamicFramework.framework.zip文件下载到沙盒的document中（当然，如果只是写Demo，你完全可以手动拷贝到document中），找到该zip文件，解压到同一个目录下，然后将动态库复制到程序中，即可使用，具体代码如下:\n``` objective-c\n- (void)loadDynamicFrameworkModel\n{\n    NSArray* paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);\n    NSString *documentDirectory = nil;\n    if ([paths count] != 0)\n        documentDirectory = [paths objectAtIndex:0];\n    \n    //本地动态库文件\n    NSString *libName = @\"DynamicFramework.framework\";\n    NSString *destLibPath = [documentDirectory stringByAppendingPathComponent:libName];\n    \n    //第一步，判断是否存在动态库文件\n    NSFileManager *manager = [NSFileManager defaultManager];\n    if (![manager fileExistsAtPath:destLibPath]) {\n        NSLog(@\"没有动态库文件\");\n        return;\n    }\n    //第三步，复制到程序中\n    NSBundle *frameworkBundle = [NSBundle bundleWithPath:destLibPath];\n    if (frameworkBundle && [frameworkBundle load]) {\n        NSLog(@\"load Bundle success\");\n    } else {\n        NSLog(@\"load Bundle failed\");\n        return;\n    }\n}\n```\n注意:如果出问题了，是不是跟如下类似的错误。\n``` \nError loading ...... no suitable image found.  Did find: ...\n```\n其实这个错误就是我当初最当心的问题，这个就是由于写动态库时打包的签名和主工程打包的签名不一致导致主工程加载下载下来的动态库失败产生的错误。解决这个错误的办法就是保证你后续写的动态库打包时签名一定要跟线上发布的APP签名一致，否则App并不会执行你的动态库。\n### 三、调用动态库\n将动态库加载到程序中后，接下来就是调用动态库中的代码了。\n1.首先我们用运行时来加载动态库中的类，窥探是否有该类，以防使用报错奔溃。\n2.如果有动态库入口的方法类，我们则使用NSObject类 \"- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2\"来执行。\n这一步我们可以将主工程中的一些变量传入动态库中，供动态库使用，完成新需求。特别是资源信息，以下将frameworkBundle信息传入动态库中供期获取资源。\n调用代码如下:\n``` objective-c\n    //第四步，获取动态库中入口类\n    Class pacteraClass = NSClassFromString(@\"DynamaicEnterance\");\n    if (!pacteraClass) {\n        NSLog(@\"Unable to get DynamicFramework class\");\n        return;\n    }\n    //第五步，执行动态库中入口类的方法\n    NSObject *pacteraObject = [pacteraClass new];\n    [pacteraObject performSelector:@selector(showViewOnController:withBundle:) withObject:self withObject:frameworkBundle];\n```\n动态库中DynamaicEnterance类只要实现showViewOnController:withBundle:方法就可以了。\n在此方法中你可以做你想做的事情，这个桥接过程就已经完成了。此demo中就实现弹出一个UIViewcontroller并加载动态库中的图片资源和调用其他库中的函数。\n### 四、总结\n总而言之，自从苹果支持动态库后，确实方便了许多。\n1. 如果你跟我的需求一致，使用方式一致，请一定记住，你的动态库的签名需跟你的主App的签名一致，否则你的动态库将无法加载到主工程中，你的代码也将无法执行。\n2. 生成动态库只在iOS8及更高版本支持，但并不影响低版本使用。\n3. 使用动态库实现动态新增需求我并没有在线上APP中实现过，只实现与自己写的Demo。理论上在线下能实现这些功能，上传到Appstore的App也应该没问题。如有朋友遇到问题，欢迎随时留言。","source":"_posts/线上APP使用动态库添加需求方式.md","raw":"---\ndate: 2016-01-21 14:26\nstatus: public\ntitle: 动态添加需求(动态库)\ncategory: 高效篇\n---\n\n## 前言\n前些天，公司提出需要动态添加一些需求给线上App，当时觉得有点不太好办，因为当时还没有头绪，后来上网查了些资料，如[这篇文章](http://blog.csdn.net/like7xiaoben/article/details/44081257)，不过他这只是将写好的动态库拷贝到本地的沙盒中，也就是有这个方法然后我有了头绪，我只需将写好的动态库压缩上传到服务器，提供线上APP下载，解压后加载动态库执行代码即可实现其功能。接下来还是来看看具体操作和过程中遇到的一些问题和注意点吧。整个需求我写了一个[demo](https://github.com/lyroger/DynamicDemo),你可以先下载这个[demo](https://github.com/lyroger/DynamicDemo),对照此文章来理解。\n### 一、生成动态库\nXcode6就支持动态库了，所以只要使用XCode6及更高版本的XCode便可以生成动态库。\n![](/images/9E729546-8D22-48A6-A3D7-88FBDD787DD9.png)\n此demo中满足需求的动态库我取名叫DynamicFramework.framework。在这个动态库中我实现了弹出一个UIViewController和在这个UIViewController中加载了动态库中的资源文件。并在这个动态库中引用了其他的动态库（此的demo中引用的是CommonFramework.framework），并调用其他库中的方法。这样就可以满足灵活调用和灵活添加需求的要求了。如果你需要给线上app提供动态库，你可以将写好的动态库压缩上传到服务器提供下载。\n### 二、加载动态库\n在主工程中我们来加载写好的动态库，从网络下载的过程我在demo就没实现了，只做了将下下来的zip文件解压的操作，加载动态库步骤很简单，先将服务器上的DynamicFramework.framework.zip文件下载到沙盒的document中（当然，如果只是写Demo，你完全可以手动拷贝到document中），找到该zip文件，解压到同一个目录下，然后将动态库复制到程序中，即可使用，具体代码如下:\n``` objective-c\n- (void)loadDynamicFrameworkModel\n{\n    NSArray* paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);\n    NSString *documentDirectory = nil;\n    if ([paths count] != 0)\n        documentDirectory = [paths objectAtIndex:0];\n    \n    //本地动态库文件\n    NSString *libName = @\"DynamicFramework.framework\";\n    NSString *destLibPath = [documentDirectory stringByAppendingPathComponent:libName];\n    \n    //第一步，判断是否存在动态库文件\n    NSFileManager *manager = [NSFileManager defaultManager];\n    if (![manager fileExistsAtPath:destLibPath]) {\n        NSLog(@\"没有动态库文件\");\n        return;\n    }\n    //第三步，复制到程序中\n    NSBundle *frameworkBundle = [NSBundle bundleWithPath:destLibPath];\n    if (frameworkBundle && [frameworkBundle load]) {\n        NSLog(@\"load Bundle success\");\n    } else {\n        NSLog(@\"load Bundle failed\");\n        return;\n    }\n}\n```\n注意:如果出问题了，是不是跟如下类似的错误。\n``` \nError loading ...... no suitable image found.  Did find: ...\n```\n其实这个错误就是我当初最当心的问题，这个就是由于写动态库时打包的签名和主工程打包的签名不一致导致主工程加载下载下来的动态库失败产生的错误。解决这个错误的办法就是保证你后续写的动态库打包时签名一定要跟线上发布的APP签名一致，否则App并不会执行你的动态库。\n### 三、调用动态库\n将动态库加载到程序中后，接下来就是调用动态库中的代码了。\n1.首先我们用运行时来加载动态库中的类，窥探是否有该类，以防使用报错奔溃。\n2.如果有动态库入口的方法类，我们则使用NSObject类 \"- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2\"来执行。\n这一步我们可以将主工程中的一些变量传入动态库中，供动态库使用，完成新需求。特别是资源信息，以下将frameworkBundle信息传入动态库中供期获取资源。\n调用代码如下:\n``` objective-c\n    //第四步，获取动态库中入口类\n    Class pacteraClass = NSClassFromString(@\"DynamaicEnterance\");\n    if (!pacteraClass) {\n        NSLog(@\"Unable to get DynamicFramework class\");\n        return;\n    }\n    //第五步，执行动态库中入口类的方法\n    NSObject *pacteraObject = [pacteraClass new];\n    [pacteraObject performSelector:@selector(showViewOnController:withBundle:) withObject:self withObject:frameworkBundle];\n```\n动态库中DynamaicEnterance类只要实现showViewOnController:withBundle:方法就可以了。\n在此方法中你可以做你想做的事情，这个桥接过程就已经完成了。此demo中就实现弹出一个UIViewcontroller并加载动态库中的图片资源和调用其他库中的函数。\n### 四、总结\n总而言之，自从苹果支持动态库后，确实方便了许多。\n1. 如果你跟我的需求一致，使用方式一致，请一定记住，你的动态库的签名需跟你的主App的签名一致，否则你的动态库将无法加载到主工程中，你的代码也将无法执行。\n2. 生成动态库只在iOS8及更高版本支持，但并不影响低版本使用。\n3. 使用动态库实现动态新增需求我并没有在线上APP中实现过，只实现与自己写的Demo。理论上在线下能实现这些功能，上传到Appstore的App也应该没问题。如有朋友遇到问题，欢迎随时留言。","slug":"线上APP使用动态库添加需求方式","published":1,"updated":"2016-12-12T13:42:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwm7fod7001hzn3miw48yuei","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前些天，公司提出需要动态添加一些需求给线上App，当时觉得有点不太好办，因为当时还没有头绪，后来上网查了些资料，如<a href=\"http://blog.csdn.net/like7xiaoben/article/details/44081257\" target=\"_blank\" rel=\"external\">这篇文章</a>，不过他这只是将写好的动态库拷贝到本地的沙盒中，也就是有这个方法然后我有了头绪，我只需将写好的动态库压缩上传到服务器，提供线上APP下载，解压后加载动态库执行代码即可实现其功能。接下来还是来看看具体操作和过程中遇到的一些问题和注意点吧。整个需求我写了一个<a href=\"https://github.com/lyroger/DynamicDemo\" target=\"_blank\" rel=\"external\">demo</a>,你可以先下载这个<a href=\"https://github.com/lyroger/DynamicDemo\" target=\"_blank\" rel=\"external\">demo</a>,对照此文章来理解。</p>\n<h3 id=\"一、生成动态库\"><a href=\"#一、生成动态库\" class=\"headerlink\" title=\"一、生成动态库\"></a>一、生成动态库</h3><p>Xcode6就支持动态库了，所以只要使用XCode6及更高版本的XCode便可以生成动态库。<br><img src=\"/images/9E729546-8D22-48A6-A3D7-88FBDD787DD9.png\" alt=\"\"><br>此demo中满足需求的动态库我取名叫DynamicFramework.framework。在这个动态库中我实现了弹出一个UIViewController和在这个UIViewController中加载了动态库中的资源文件。并在这个动态库中引用了其他的动态库（此的demo中引用的是CommonFramework.framework），并调用其他库中的方法。这样就可以满足灵活调用和灵活添加需求的要求了。如果你需要给线上app提供动态库，你可以将写好的动态库压缩上传到服务器提供下载。</p>\n<h3 id=\"二、加载动态库\"><a href=\"#二、加载动态库\" class=\"headerlink\" title=\"二、加载动态库\"></a>二、加载动态库</h3><p>在主工程中我们来加载写好的动态库，从网络下载的过程我在demo就没实现了，只做了将下下来的zip文件解压的操作，加载动态库步骤很简单，先将服务器上的DynamicFramework.framework.zip文件下载到沙盒的document中（当然，如果只是写Demo，你完全可以手动拷贝到document中），找到该zip文件，解压到同一个目录下，然后将动态库复制到程序中，即可使用，具体代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)loadDynamicFrameworkModel</div><div class=\"line\">&#123;</div><div class=\"line\">    NSArray* paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);</div><div class=\"line\">    NSString *documentDirectory = nil;</div><div class=\"line\">    if ([paths count] != 0)</div><div class=\"line\">        documentDirectory = [paths objectAtIndex:0];</div><div class=\"line\">    </div><div class=\"line\">    //本地动态库文件</div><div class=\"line\">    NSString *libName = @&quot;DynamicFramework.framework&quot;;</div><div class=\"line\">    NSString *destLibPath = [documentDirectory stringByAppendingPathComponent:libName];</div><div class=\"line\">    </div><div class=\"line\">    //第一步，判断是否存在动态库文件</div><div class=\"line\">    NSFileManager *manager = [NSFileManager defaultManager];</div><div class=\"line\">    if (![manager fileExistsAtPath:destLibPath]) &#123;</div><div class=\"line\">        NSLog(@&quot;没有动态库文件&quot;);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //第三步，复制到程序中</div><div class=\"line\">    NSBundle *frameworkBundle = [NSBundle bundleWithPath:destLibPath];</div><div class=\"line\">    if (frameworkBundle &amp;&amp; [frameworkBundle load]) &#123;</div><div class=\"line\">        NSLog(@&quot;load Bundle success&quot;);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        NSLog(@&quot;load Bundle failed&quot;);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意:如果出问题了，是不是跟如下类似的错误。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error loading ...... no suitable image found.  Did find: ...</div></pre></td></tr></table></figure></p>\n<p>其实这个错误就是我当初最当心的问题，这个就是由于写动态库时打包的签名和主工程打包的签名不一致导致主工程加载下载下来的动态库失败产生的错误。解决这个错误的办法就是保证你后续写的动态库打包时签名一定要跟线上发布的APP签名一致，否则App并不会执行你的动态库。</p>\n<h3 id=\"三、调用动态库\"><a href=\"#三、调用动态库\" class=\"headerlink\" title=\"三、调用动态库\"></a>三、调用动态库</h3><p>将动态库加载到程序中后，接下来就是调用动态库中的代码了。<br>1.首先我们用运行时来加载动态库中的类，窥探是否有该类，以防使用报错奔溃。<br>2.如果有动态库入口的方法类，我们则使用NSObject类 “- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2”来执行。<br>这一步我们可以将主工程中的一些变量传入动态库中，供动态库使用，完成新需求。特别是资源信息，以下将frameworkBundle信息传入动态库中供期获取资源。<br>调用代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//第四步，获取动态库中入口类</div><div class=\"line\">Class pacteraClass = NSClassFromString(@&quot;DynamaicEnterance&quot;);</div><div class=\"line\">if (!pacteraClass) &#123;</div><div class=\"line\">    NSLog(@&quot;Unable to get DynamicFramework class&quot;);</div><div class=\"line\">    return;</div><div class=\"line\">&#125;</div><div class=\"line\">//第五步，执行动态库中入口类的方法</div><div class=\"line\">NSObject *pacteraObject = [pacteraClass new];</div><div class=\"line\">[pacteraObject performSelector:@selector(showViewOnController:withBundle:) withObject:self withObject:frameworkBundle];</div></pre></td></tr></table></figure></p>\n<p>动态库中DynamaicEnterance类只要实现showViewOnController:withBundle:方法就可以了。<br>在此方法中你可以做你想做的事情，这个桥接过程就已经完成了。此demo中就实现弹出一个UIViewcontroller并加载动态库中的图片资源和调用其他库中的函数。</p>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>总而言之，自从苹果支持动态库后，确实方便了许多。</p>\n<ol>\n<li>如果你跟我的需求一致，使用方式一致，请一定记住，你的动态库的签名需跟你的主App的签名一致，否则你的动态库将无法加载到主工程中，你的代码也将无法执行。</li>\n<li>生成动态库只在iOS8及更高版本支持，但并不影响低版本使用。</li>\n<li>使用动态库实现动态新增需求我并没有在线上APP中实现过，只实现与自己写的Demo。理论上在线下能实现这些功能，上传到Appstore的App也应该没问题。如有朋友遇到问题，欢迎随时留言。</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前些天，公司提出需要动态添加一些需求给线上App，当时觉得有点不太好办，因为当时还没有头绪，后来上网查了些资料，如<a href=\"http://blog.csdn.net/like7xiaoben/article/details/44081257\">这篇文章</a>，不过他这只是将写好的动态库拷贝到本地的沙盒中，也就是有这个方法然后我有了头绪，我只需将写好的动态库压缩上传到服务器，提供线上APP下载，解压后加载动态库执行代码即可实现其功能。接下来还是来看看具体操作和过程中遇到的一些问题和注意点吧。整个需求我写了一个<a href=\"https://github.com/lyroger/DynamicDemo\">demo</a>,你可以先下载这个<a href=\"https://github.com/lyroger/DynamicDemo\">demo</a>,对照此文章来理解。</p>\n<h3 id=\"一、生成动态库\"><a href=\"#一、生成动态库\" class=\"headerlink\" title=\"一、生成动态库\"></a>一、生成动态库</h3><p>Xcode6就支持动态库了，所以只要使用XCode6及更高版本的XCode便可以生成动态库。<br><img src=\"/images/9E729546-8D22-48A6-A3D7-88FBDD787DD9.png\" alt=\"\"><br>此demo中满足需求的动态库我取名叫DynamicFramework.framework。在这个动态库中我实现了弹出一个UIViewController和在这个UIViewController中加载了动态库中的资源文件。并在这个动态库中引用了其他的动态库（此的demo中引用的是CommonFramework.framework），并调用其他库中的方法。这样就可以满足灵活调用和灵活添加需求的要求了。如果你需要给线上app提供动态库，你可以将写好的动态库压缩上传到服务器提供下载。</p>\n<h3 id=\"二、加载动态库\"><a href=\"#二、加载动态库\" class=\"headerlink\" title=\"二、加载动态库\"></a>二、加载动态库</h3><p>在主工程中我们来加载写好的动态库，从网络下载的过程我在demo就没实现了，只做了将下下来的zip文件解压的操作，加载动态库步骤很简单，先将服务器上的DynamicFramework.framework.zip文件下载到沙盒的document中（当然，如果只是写Demo，你完全可以手动拷贝到document中），找到该zip文件，解压到同一个目录下，然后将动态库复制到程序中，即可使用，具体代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)loadDynamicFrameworkModel</div><div class=\"line\">&#123;</div><div class=\"line\">    NSArray* paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES);</div><div class=\"line\">    NSString *documentDirectory = nil;</div><div class=\"line\">    if ([paths count] != 0)</div><div class=\"line\">        documentDirectory = [paths objectAtIndex:0];</div><div class=\"line\">    </div><div class=\"line\">    //本地动态库文件</div><div class=\"line\">    NSString *libName = @&quot;DynamicFramework.framework&quot;;</div><div class=\"line\">    NSString *destLibPath = [documentDirectory stringByAppendingPathComponent:libName];</div><div class=\"line\">    </div><div class=\"line\">    //第一步，判断是否存在动态库文件</div><div class=\"line\">    NSFileManager *manager = [NSFileManager defaultManager];</div><div class=\"line\">    if (![manager fileExistsAtPath:destLibPath]) &#123;</div><div class=\"line\">        NSLog(@&quot;没有动态库文件&quot;);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //第三步，复制到程序中</div><div class=\"line\">    NSBundle *frameworkBundle = [NSBundle bundleWithPath:destLibPath];</div><div class=\"line\">    if (frameworkBundle &amp;&amp; [frameworkBundle load]) &#123;</div><div class=\"line\">        NSLog(@&quot;load Bundle success&quot;);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        NSLog(@&quot;load Bundle failed&quot;);</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意:如果出问题了，是不是跟如下类似的错误。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error loading ...... no suitable image found.  Did find: ...</div></pre></td></tr></table></figure></p>\n<p>其实这个错误就是我当初最当心的问题，这个就是由于写动态库时打包的签名和主工程打包的签名不一致导致主工程加载下载下来的动态库失败产生的错误。解决这个错误的办法就是保证你后续写的动态库打包时签名一定要跟线上发布的APP签名一致，否则App并不会执行你的动态库。</p>\n<h3 id=\"三、调用动态库\"><a href=\"#三、调用动态库\" class=\"headerlink\" title=\"三、调用动态库\"></a>三、调用动态库</h3><p>将动态库加载到程序中后，接下来就是调用动态库中的代码了。<br>1.首先我们用运行时来加载动态库中的类，窥探是否有该类，以防使用报错奔溃。<br>2.如果有动态库入口的方法类，我们则使用NSObject类 “- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2”来执行。<br>这一步我们可以将主工程中的一些变量传入动态库中，供动态库使用，完成新需求。特别是资源信息，以下将frameworkBundle信息传入动态库中供期获取资源。<br>调用代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//第四步，获取动态库中入口类</div><div class=\"line\">Class pacteraClass = NSClassFromString(@&quot;DynamaicEnterance&quot;);</div><div class=\"line\">if (!pacteraClass) &#123;</div><div class=\"line\">    NSLog(@&quot;Unable to get DynamicFramework class&quot;);</div><div class=\"line\">    return;</div><div class=\"line\">&#125;</div><div class=\"line\">//第五步，执行动态库中入口类的方法</div><div class=\"line\">NSObject *pacteraObject = [pacteraClass new];</div><div class=\"line\">[pacteraObject performSelector:@selector(showViewOnController:withBundle:) withObject:self withObject:frameworkBundle];</div></pre></td></tr></table></figure></p>\n<p>动态库中DynamaicEnterance类只要实现showViewOnController:withBundle:方法就可以了。<br>在此方法中你可以做你想做的事情，这个桥接过程就已经完成了。此demo中就实现弹出一个UIViewcontroller并加载动态库中的图片资源和调用其他库中的函数。</p>\n<h3 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h3><p>总而言之，自从苹果支持动态库后，确实方便了许多。</p>\n<ol>\n<li>如果你跟我的需求一致，使用方式一致，请一定记住，你的动态库的签名需跟你的主App的签名一致，否则你的动态库将无法加载到主工程中，你的代码也将无法执行。</li>\n<li>生成动态库只在iOS8及更高版本支持，但并不影响低版本使用。</li>\n<li>使用动态库实现动态新增需求我并没有在线上APP中实现过，只实现与自己写的Demo。理论上在线下能实现这些功能，上传到Appstore的App也应该没问题。如有朋友遇到问题，欢迎随时留言。</li>\n</ol>\n"},{"title":"2016年个人总结","date":"2017-01-11T03:29:48.000Z","_content":"\n#### 前言\n  2016年已经过去快半个月了，其实早就有想法想要给自己这一年来总结一下，最近也一直忙着公司年底年会的事情，心态也一直没有收拾好，所以也就一直拖到现在。\n  \n#### 离职篇\n-----------\n  3月份从TCL离职，找了好几家公司面试，大的小的都有，面试结果都还不错，可感觉如今的iOS市场行情没有了前两年的效应了，能给的待遇都不太高，有些公司听了我的要求，都没有了下文了。从换工作那段时间来看，接到的电话，收到的邮件，都没有了以前的频繁了，已经能完全感觉iOS寒冬的到来了。\n  由于在TCL就职时，我们做的是健康医疗方面的事情，所以在换工作的时候，大部分收到的都是做健康医疗方面公司的面试邀请，偶尔也还会收到做车友互联相关行业的公司邀请，其中最让我感觉无头绪的公司就是中兴：一面时是一个技术负责人，面完后他觉得ok，过了一天后叫HR联系我过去再面，说是能给的上我的待遇要求，可过去后，既然是笔试，然后就是他们老大的面谈，面谈的时候我怎么都感觉他要的不是一个技术人员，而是一个产品经理，因此后面我也就被委婉的拒绝了。其次让我感觉很没经验的一次面试的公司就是嗒嗒巴士了：那天下午下班后过去了嗒嗒巴士面试，三个iOS开发人员，我过去的比较晚，很多人都已经下班了，只留下了一个iOS开发技术人员，刚走进办公室，那位面试我的面试人员一身的紧张感，感觉是第一次面试别人，开始也不知道从何面起，随便找了些基础的问题问了几遍，然后问了问我平时的开发习惯，平时用代码写的多还是用StoryBoard多，我跟他说了实话，很少用的StoryBoard，除了偶尔写Demo的时候会用到，大部分都是用的纯代码写的。他想了想，又问了其他问题，然后感觉又不知道问什么了。转来转去又来问关于StoryBoard方面的知识，并没有什么深入的问题，也难怪了，后来了解到，他们开发的项目都是用的StoryBoard开发的。再次让我历经最久的一次面试是在就医160了，下午如约两点到了他们公司，地址还真不好找，幸好每次都喜欢提前到，不然还真迟到了。一开始HR给了一份笔试题给到我，让我在他们的休息区写题。题目还有点多，选择题、填空题、判断题、简答题、问答题、还有个算法题。写了一个小时，总算是写完了。给到他们，然后他们技术负责人在开会，说实话，这时候不是应该给我一杯暖开水吗？谁在乎你呢？好好等吧，等了大半个小时，总算来了，然后就进入正题，说实话，跟这位面试官还真可以聊的，两个人都能对一个问题讨论的很好，不管是说对技术上还是在以前的工作经验上，聊了一个多小时，感觉他还挺满意的，然后说他们部门经理也要面试我，让我再等一下，这一等又是半个小时过去，还好我比较有耐心吧，下午也没安排其他面试。等到部门经理来了后，第一感觉他是一个很稳重的人，不急不躁的，一开始上来就给了一个算法题目让我想想，看我的思维是怎么样的，现在已经不记得那个算法题目了，不过他也挺有耐心的，一直让我想，其实当时那个算法题目一点眉目都没有，感觉当时再想多久都想不出来，但他还是坚持让我多想想。我想的时候他也没打扰我，在假装的看我的简历，看我的笔试题，看了很多遍。等面完他之后，我以为就结束了，没想到他们还要HR那边面试，HR那边还不止一个人面，两个人一起，一个人记录，一个人跟我谈话，记录的人也偶尔会插上几句话。这一聊就是近两个小时，说实话，那个时候我喉咙都已经干了，一下午都没见过一杯水。直至晚上七点多才面试完，我也是醉了吧。走的时候，我都不太报希望来这个公司上班了。但是过了两三天，他们HR给我来电说面试通过了，还能给到我想要的薪水。但这个时候我却已经答应了我目前上班这几公司入职了。目前这家公司其实也是以前的老领导们创业的一家公司，寄托在一家房地产集团公司下面。\n  \n#### 新公司\n------\n  入职后，由于公司是一家初创的创业公司，还有很多相关人员都没有相继入职，入职第一天就跟另一个做安卓的同事跟着领导飞到了上海总部集团那边出差了解项目。也借此项目出差机会，第一次来到了上海，看到了中国最高楼，看到了东方明珠，看到了上海外滩。不过都很匆忙，就连跟同学聚个餐都是匆匆忙忙。也感谢高中班长同学带着我领略了上海的繁华。说多了感觉像是乡下人进城的感觉哈。\n  出差三天后回深圳，来新公司正式上班已步入四月份了，第一个月大家都是在相互了解，相互磨合公司的工作方式，公司也还没给到具体的项目，基本也是在维护从上海那边带回来的项目，工作量也挺少的，大部分都是以开会来度过这段时间，要么做一些技术分享，要么做一些管理方面的培训，搭建环境，偶尔领导会做个大讲坛，谈谈我们公司的文化及以后的发展计划。\n  步入五月份时，终于等到项目需求的到来，但同时也等到了目标，集团希望我们能在六月底上一个版本，替换目前使用的APP和后台。这也是我们第一个项目，也是大家第一次磨合的项目，大家的态度其实很积极，当然加班加多了，需求的改动，时间的压力，也会让一些同事暴露一些不耐烦的态度。直到整个项目测试完成验收，公司组织了一次去珠海长隆完了几天，让大家好好放松放松了下。\n  后续集团内需要的项目其实还挺多的，客户端的人员并不是很多，而且响应的需求也并不能达到集团领导所需要的期望，所以公司也希望能够快速响应集团领导们的需求，快速做出响应的产品，于是乎，Hybrid App便在公司形成了，我在[使用Cordova搭建混合框架](http://blog.devyan.cn/2016/09/23/使用Cordova搭建混合框架/)文章中也稍微提到过此事，但主要还是介绍如何搭建Hybrid App框架的搭建。\n  \n#### 我的收获\n------\n  * 来到新公司，我的职责也开始发生了变化，也不在是存粹的做一名开发者了，同时还要兼顾公司iOS开发方面的技术支持及管理和培养，简称专业线负责人吧。\n  * 由于后期公司大部分产品的开发框架都是由Hybrid APP，因此对这个框架也是日益熟悉，同时也对js和OC之间相互交互更加深入的了解,这里我也写了一篇关于JS与OC之间的交互的文章:[JS与OC交互](http://blog.devyan.cn/2016/11/29/JS与OC交互/).\n  * 项目业务的开发也大部分转移到了H5端，我也有大量的时间去整理知识，对以前由于很多机械工作而导致很多理论的不清晰的点，都有机会去梳理一下了。\n  * 已经开始培养了看书籍的习惯了，希望自己以后能看更多的书籍，让自己补充跟多的内容。\n  * 在项目闲暇的情况下，我也组织了我们组内一起学习swift语言，并一起开发了一个项目。感觉对swift也可以开始上手了。\n  * 在生活上，今年也算是完成了一家大事，工作多年，也多多少少积累了些积蓄，所以也能拿的出一些钱去付房款首付了。\n  * 生活方面我也培养了一些兴趣了，比如游泳，也持续坚持了几个月，每次也可以坚持游一千五百米左右了。还有羽毛球的热情也逐渐上来了，公司每周四都会有羽毛球活动，我作为组织者，每周也一定会过去，再加上周三同学公司的羽毛球活动，他缺一个搭档，于是我也顺其自然的做了他的搭档，今年羽毛球线打断了两根，换了两次线。也给自己买了套羽毛球服，弄了一套完整的装备。至少看起来已经不像以前一样只是过来玩玩而已了。\n\n#### 今年的计划\n--------\n   * 继续会在iOS方面做一部分投入，希望自己专业知识不能放弃。具体落实应该会在算法、设计模式、架构、swift、新知识等方面的研究吧。\n   * 坚持写博客，也希望有更深层次的博客文章的发表。\n   * 希望自己今年能把看书变成自己生活中的一种常态，让自己有更多的知识。\n   * 兴趣爱好方面：羽毛球应该还是会继续保持的，也希望自己在球技方面有更大的提高。游泳也会继续保持。\n","source":"_posts/2016年个人总结.md","raw":"---\ntitle: 2016年个人总结\ndate: 2017-01-11 11:29:48\ncategories: summary\n---\n\n#### 前言\n  2016年已经过去快半个月了，其实早就有想法想要给自己这一年来总结一下，最近也一直忙着公司年底年会的事情，心态也一直没有收拾好，所以也就一直拖到现在。\n  \n#### 离职篇\n-----------\n  3月份从TCL离职，找了好几家公司面试，大的小的都有，面试结果都还不错，可感觉如今的iOS市场行情没有了前两年的效应了，能给的待遇都不太高，有些公司听了我的要求，都没有了下文了。从换工作那段时间来看，接到的电话，收到的邮件，都没有了以前的频繁了，已经能完全感觉iOS寒冬的到来了。\n  由于在TCL就职时，我们做的是健康医疗方面的事情，所以在换工作的时候，大部分收到的都是做健康医疗方面公司的面试邀请，偶尔也还会收到做车友互联相关行业的公司邀请，其中最让我感觉无头绪的公司就是中兴：一面时是一个技术负责人，面完后他觉得ok，过了一天后叫HR联系我过去再面，说是能给的上我的待遇要求，可过去后，既然是笔试，然后就是他们老大的面谈，面谈的时候我怎么都感觉他要的不是一个技术人员，而是一个产品经理，因此后面我也就被委婉的拒绝了。其次让我感觉很没经验的一次面试的公司就是嗒嗒巴士了：那天下午下班后过去了嗒嗒巴士面试，三个iOS开发人员，我过去的比较晚，很多人都已经下班了，只留下了一个iOS开发技术人员，刚走进办公室，那位面试我的面试人员一身的紧张感，感觉是第一次面试别人，开始也不知道从何面起，随便找了些基础的问题问了几遍，然后问了问我平时的开发习惯，平时用代码写的多还是用StoryBoard多，我跟他说了实话，很少用的StoryBoard，除了偶尔写Demo的时候会用到，大部分都是用的纯代码写的。他想了想，又问了其他问题，然后感觉又不知道问什么了。转来转去又来问关于StoryBoard方面的知识，并没有什么深入的问题，也难怪了，后来了解到，他们开发的项目都是用的StoryBoard开发的。再次让我历经最久的一次面试是在就医160了，下午如约两点到了他们公司，地址还真不好找，幸好每次都喜欢提前到，不然还真迟到了。一开始HR给了一份笔试题给到我，让我在他们的休息区写题。题目还有点多，选择题、填空题、判断题、简答题、问答题、还有个算法题。写了一个小时，总算是写完了。给到他们，然后他们技术负责人在开会，说实话，这时候不是应该给我一杯暖开水吗？谁在乎你呢？好好等吧，等了大半个小时，总算来了，然后就进入正题，说实话，跟这位面试官还真可以聊的，两个人都能对一个问题讨论的很好，不管是说对技术上还是在以前的工作经验上，聊了一个多小时，感觉他还挺满意的，然后说他们部门经理也要面试我，让我再等一下，这一等又是半个小时过去，还好我比较有耐心吧，下午也没安排其他面试。等到部门经理来了后，第一感觉他是一个很稳重的人，不急不躁的，一开始上来就给了一个算法题目让我想想，看我的思维是怎么样的，现在已经不记得那个算法题目了，不过他也挺有耐心的，一直让我想，其实当时那个算法题目一点眉目都没有，感觉当时再想多久都想不出来，但他还是坚持让我多想想。我想的时候他也没打扰我，在假装的看我的简历，看我的笔试题，看了很多遍。等面完他之后，我以为就结束了，没想到他们还要HR那边面试，HR那边还不止一个人面，两个人一起，一个人记录，一个人跟我谈话，记录的人也偶尔会插上几句话。这一聊就是近两个小时，说实话，那个时候我喉咙都已经干了，一下午都没见过一杯水。直至晚上七点多才面试完，我也是醉了吧。走的时候，我都不太报希望来这个公司上班了。但是过了两三天，他们HR给我来电说面试通过了，还能给到我想要的薪水。但这个时候我却已经答应了我目前上班这几公司入职了。目前这家公司其实也是以前的老领导们创业的一家公司，寄托在一家房地产集团公司下面。\n  \n#### 新公司\n------\n  入职后，由于公司是一家初创的创业公司，还有很多相关人员都没有相继入职，入职第一天就跟另一个做安卓的同事跟着领导飞到了上海总部集团那边出差了解项目。也借此项目出差机会，第一次来到了上海，看到了中国最高楼，看到了东方明珠，看到了上海外滩。不过都很匆忙，就连跟同学聚个餐都是匆匆忙忙。也感谢高中班长同学带着我领略了上海的繁华。说多了感觉像是乡下人进城的感觉哈。\n  出差三天后回深圳，来新公司正式上班已步入四月份了，第一个月大家都是在相互了解，相互磨合公司的工作方式，公司也还没给到具体的项目，基本也是在维护从上海那边带回来的项目，工作量也挺少的，大部分都是以开会来度过这段时间，要么做一些技术分享，要么做一些管理方面的培训，搭建环境，偶尔领导会做个大讲坛，谈谈我们公司的文化及以后的发展计划。\n  步入五月份时，终于等到项目需求的到来，但同时也等到了目标，集团希望我们能在六月底上一个版本，替换目前使用的APP和后台。这也是我们第一个项目，也是大家第一次磨合的项目，大家的态度其实很积极，当然加班加多了，需求的改动，时间的压力，也会让一些同事暴露一些不耐烦的态度。直到整个项目测试完成验收，公司组织了一次去珠海长隆完了几天，让大家好好放松放松了下。\n  后续集团内需要的项目其实还挺多的，客户端的人员并不是很多，而且响应的需求也并不能达到集团领导所需要的期望，所以公司也希望能够快速响应集团领导们的需求，快速做出响应的产品，于是乎，Hybrid App便在公司形成了，我在[使用Cordova搭建混合框架](http://blog.devyan.cn/2016/09/23/使用Cordova搭建混合框架/)文章中也稍微提到过此事，但主要还是介绍如何搭建Hybrid App框架的搭建。\n  \n#### 我的收获\n------\n  * 来到新公司，我的职责也开始发生了变化，也不在是存粹的做一名开发者了，同时还要兼顾公司iOS开发方面的技术支持及管理和培养，简称专业线负责人吧。\n  * 由于后期公司大部分产品的开发框架都是由Hybrid APP，因此对这个框架也是日益熟悉，同时也对js和OC之间相互交互更加深入的了解,这里我也写了一篇关于JS与OC之间的交互的文章:[JS与OC交互](http://blog.devyan.cn/2016/11/29/JS与OC交互/).\n  * 项目业务的开发也大部分转移到了H5端，我也有大量的时间去整理知识，对以前由于很多机械工作而导致很多理论的不清晰的点，都有机会去梳理一下了。\n  * 已经开始培养了看书籍的习惯了，希望自己以后能看更多的书籍，让自己补充跟多的内容。\n  * 在项目闲暇的情况下，我也组织了我们组内一起学习swift语言，并一起开发了一个项目。感觉对swift也可以开始上手了。\n  * 在生活上，今年也算是完成了一家大事，工作多年，也多多少少积累了些积蓄，所以也能拿的出一些钱去付房款首付了。\n  * 生活方面我也培养了一些兴趣了，比如游泳，也持续坚持了几个月，每次也可以坚持游一千五百米左右了。还有羽毛球的热情也逐渐上来了，公司每周四都会有羽毛球活动，我作为组织者，每周也一定会过去，再加上周三同学公司的羽毛球活动，他缺一个搭档，于是我也顺其自然的做了他的搭档，今年羽毛球线打断了两根，换了两次线。也给自己买了套羽毛球服，弄了一套完整的装备。至少看起来已经不像以前一样只是过来玩玩而已了。\n\n#### 今年的计划\n--------\n   * 继续会在iOS方面做一部分投入，希望自己专业知识不能放弃。具体落实应该会在算法、设计模式、架构、swift、新知识等方面的研究吧。\n   * 坚持写博客，也希望有更深层次的博客文章的发表。\n   * 希望自己今年能把看书变成自己生活中的一种常态，让自己有更多的知识。\n   * 兴趣爱好方面：羽毛球应该还是会继续保持的，也希望自己在球技方面有更大的提高。游泳也会继续保持。\n","slug":"2016年个人总结","published":1,"updated":"2018-01-26T06:18:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvknvgs00000b3mjtjgwv70","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>  2016年已经过去快半个月了，其实早就有想法想要给自己这一年来总结一下，最近也一直忙着公司年底年会的事情，心态也一直没有收拾好，所以也就一直拖到现在。</p>\n<h4 id=\"离职篇\"><a href=\"#离职篇\" class=\"headerlink\" title=\"离职篇\"></a>离职篇</h4><hr>\n<p>  3月份从TCL离职，找了好几家公司面试，大的小的都有，面试结果都还不错，可感觉如今的iOS市场行情没有了前两年的效应了，能给的待遇都不太高，有些公司听了我的要求，都没有了下文了。从换工作那段时间来看，接到的电话，收到的邮件，都没有了以前的频繁了，已经能完全感觉iOS寒冬的到来了。<br>  由于在TCL就职时，我们做的是健康医疗方面的事情，所以在换工作的时候，大部分收到的都是做健康医疗方面公司的面试邀请，偶尔也还会收到做车友互联相关行业的公司邀请，其中最让我感觉无头绪的公司就是中兴：一面时是一个技术负责人，面完后他觉得ok，过了一天后叫HR联系我过去再面，说是能给的上我的待遇要求，可过去后，既然是笔试，然后就是他们老大的面谈，面谈的时候我怎么都感觉他要的不是一个技术人员，而是一个产品经理，因此后面我也就被委婉的拒绝了。其次让我感觉很没经验的一次面试的公司就是嗒嗒巴士了：那天下午下班后过去了嗒嗒巴士面试，三个iOS开发人员，我过去的比较晚，很多人都已经下班了，只留下了一个iOS开发技术人员，刚走进办公室，那位面试我的面试人员一身的紧张感，感觉是第一次面试别人，开始也不知道从何面起，随便找了些基础的问题问了几遍，然后问了问我平时的开发习惯，平时用代码写的多还是用StoryBoard多，我跟他说了实话，很少用的StoryBoard，除了偶尔写Demo的时候会用到，大部分都是用的纯代码写的。他想了想，又问了其他问题，然后感觉又不知道问什么了。转来转去又来问关于StoryBoard方面的知识，并没有什么深入的问题，也难怪了，后来了解到，他们开发的项目都是用的StoryBoard开发的。再次让我历经最久的一次面试是在就医160了，下午如约两点到了他们公司，地址还真不好找，幸好每次都喜欢提前到，不然还真迟到了。一开始HR给了一份笔试题给到我，让我在他们的休息区写题。题目还有点多，选择题、填空题、判断题、简答题、问答题、还有个算法题。写了一个小时，总算是写完了。给到他们，然后他们技术负责人在开会，说实话，这时候不是应该给我一杯暖开水吗？谁在乎你呢？好好等吧，等了大半个小时，总算来了，然后就进入正题，说实话，跟这位面试官还真可以聊的，两个人都能对一个问题讨论的很好，不管是说对技术上还是在以前的工作经验上，聊了一个多小时，感觉他还挺满意的，然后说他们部门经理也要面试我，让我再等一下，这一等又是半个小时过去，还好我比较有耐心吧，下午也没安排其他面试。等到部门经理来了后，第一感觉他是一个很稳重的人，不急不躁的，一开始上来就给了一个算法题目让我想想，看我的思维是怎么样的，现在已经不记得那个算法题目了，不过他也挺有耐心的，一直让我想，其实当时那个算法题目一点眉目都没有，感觉当时再想多久都想不出来，但他还是坚持让我多想想。我想的时候他也没打扰我，在假装的看我的简历，看我的笔试题，看了很多遍。等面完他之后，我以为就结束了，没想到他们还要HR那边面试，HR那边还不止一个人面，两个人一起，一个人记录，一个人跟我谈话，记录的人也偶尔会插上几句话。这一聊就是近两个小时，说实话，那个时候我喉咙都已经干了，一下午都没见过一杯水。直至晚上七点多才面试完，我也是醉了吧。走的时候，我都不太报希望来这个公司上班了。但是过了两三天，他们HR给我来电说面试通过了，还能给到我想要的薪水。但这个时候我却已经答应了我目前上班这几公司入职了。目前这家公司其实也是以前的老领导们创业的一家公司，寄托在一家房地产集团公司下面。</p>\n<h4 id=\"新公司\"><a href=\"#新公司\" class=\"headerlink\" title=\"新公司\"></a>新公司</h4><hr>\n<p>  入职后，由于公司是一家初创的创业公司，还有很多相关人员都没有相继入职，入职第一天就跟另一个做安卓的同事跟着领导飞到了上海总部集团那边出差了解项目。也借此项目出差机会，第一次来到了上海，看到了中国最高楼，看到了东方明珠，看到了上海外滩。不过都很匆忙，就连跟同学聚个餐都是匆匆忙忙。也感谢高中班长同学带着我领略了上海的繁华。说多了感觉像是乡下人进城的感觉哈。<br>  出差三天后回深圳，来新公司正式上班已步入四月份了，第一个月大家都是在相互了解，相互磨合公司的工作方式，公司也还没给到具体的项目，基本也是在维护从上海那边带回来的项目，工作量也挺少的，大部分都是以开会来度过这段时间，要么做一些技术分享，要么做一些管理方面的培训，搭建环境，偶尔领导会做个大讲坛，谈谈我们公司的文化及以后的发展计划。<br>  步入五月份时，终于等到项目需求的到来，但同时也等到了目标，集团希望我们能在六月底上一个版本，替换目前使用的APP和后台。这也是我们第一个项目，也是大家第一次磨合的项目，大家的态度其实很积极，当然加班加多了，需求的改动，时间的压力，也会让一些同事暴露一些不耐烦的态度。直到整个项目测试完成验收，公司组织了一次去珠海长隆完了几天，让大家好好放松放松了下。<br>  后续集团内需要的项目其实还挺多的，客户端的人员并不是很多，而且响应的需求也并不能达到集团领导所需要的期望，所以公司也希望能够快速响应集团领导们的需求，快速做出响应的产品，于是乎，Hybrid App便在公司形成了，我在<a href=\"http://blog.devyan.cn/2016/09/23/使用Cordova搭建混合框架/\" target=\"_blank\" rel=\"external\">使用Cordova搭建混合框架</a>文章中也稍微提到过此事，但主要还是介绍如何搭建Hybrid App框架的搭建。</p>\n<h4 id=\"我的收获\"><a href=\"#我的收获\" class=\"headerlink\" title=\"我的收获\"></a>我的收获</h4><hr>\n<ul>\n<li>来到新公司，我的职责也开始发生了变化，也不在是存粹的做一名开发者了，同时还要兼顾公司iOS开发方面的技术支持及管理和培养，简称专业线负责人吧。</li>\n<li>由于后期公司大部分产品的开发框架都是由Hybrid APP，因此对这个框架也是日益熟悉，同时也对js和OC之间相互交互更加深入的了解,这里我也写了一篇关于JS与OC之间的交互的文章:<a href=\"http://blog.devyan.cn/2016/11/29/JS与OC交互/\" target=\"_blank\" rel=\"external\">JS与OC交互</a>.</li>\n<li>项目业务的开发也大部分转移到了H5端，我也有大量的时间去整理知识，对以前由于很多机械工作而导致很多理论的不清晰的点，都有机会去梳理一下了。</li>\n<li>已经开始培养了看书籍的习惯了，希望自己以后能看更多的书籍，让自己补充跟多的内容。</li>\n<li>在项目闲暇的情况下，我也组织了我们组内一起学习swift语言，并一起开发了一个项目。感觉对swift也可以开始上手了。</li>\n<li>在生活上，今年也算是完成了一家大事，工作多年，也多多少少积累了些积蓄，所以也能拿的出一些钱去付房款首付了。</li>\n<li>生活方面我也培养了一些兴趣了，比如游泳，也持续坚持了几个月，每次也可以坚持游一千五百米左右了。还有羽毛球的热情也逐渐上来了，公司每周四都会有羽毛球活动，我作为组织者，每周也一定会过去，再加上周三同学公司的羽毛球活动，他缺一个搭档，于是我也顺其自然的做了他的搭档，今年羽毛球线打断了两根，换了两次线。也给自己买了套羽毛球服，弄了一套完整的装备。至少看起来已经不像以前一样只是过来玩玩而已了。</li>\n</ul>\n<h4 id=\"今年的计划\"><a href=\"#今年的计划\" class=\"headerlink\" title=\"今年的计划\"></a>今年的计划</h4><hr>\n<ul>\n<li>继续会在iOS方面做一部分投入，希望自己专业知识不能放弃。具体落实应该会在算法、设计模式、架构、swift、新知识等方面的研究吧。</li>\n<li>坚持写博客，也希望有更深层次的博客文章的发表。</li>\n<li>希望自己今年能把看书变成自己生活中的一种常态，让自己有更多的知识。</li>\n<li>兴趣爱好方面：羽毛球应该还是会继续保持的，也希望自己在球技方面有更大的提高。游泳也会继续保持。</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>  2016年已经过去快半个月了，其实早就有想法想要给自己这一年来总结一下，最近也一直忙着公司年底年会的事情，心态也一直没有收拾好，所以也就一直拖到现在。</p>\n<h4 id=\"离职篇\"><a href=\"#离职篇\" class=\"headerlink\" title=\"离职篇\"></a>离职篇</h4><hr>\n<p>  3月份从TCL离职，找了好几家公司面试，大的小的都有，面试结果都还不错，可感觉如今的iOS市场行情没有了前两年的效应了，能给的待遇都不太高，有些公司听了我的要求，都没有了下文了。从换工作那段时间来看，接到的电话，收到的邮件，都没有了以前的频繁了，已经能完全感觉iOS寒冬的到来了。<br>  由于在TCL就职时，我们做的是健康医疗方面的事情，所以在换工作的时候，大部分收到的都是做健康医疗方面公司的面试邀请，偶尔也还会收到做车友互联相关行业的公司邀请，其中最让我感觉无头绪的公司就是中兴：一面时是一个技术负责人，面完后他觉得ok，过了一天后叫HR联系我过去再面，说是能给的上我的待遇要求，可过去后，既然是笔试，然后就是他们老大的面谈，面谈的时候我怎么都感觉他要的不是一个技术人员，而是一个产品经理，因此后面我也就被委婉的拒绝了。其次让我感觉很没经验的一次面试的公司就是嗒嗒巴士了：那天下午下班后过去了嗒嗒巴士面试，三个iOS开发人员，我过去的比较晚，很多人都已经下班了，只留下了一个iOS开发技术人员，刚走进办公室，那位面试我的面试人员一身的紧张感，感觉是第一次面试别人，开始也不知道从何面起，随便找了些基础的问题问了几遍，然后问了问我平时的开发习惯，平时用代码写的多还是用StoryBoard多，我跟他说了实话，很少用的StoryBoard，除了偶尔写Demo的时候会用到，大部分都是用的纯代码写的。他想了想，又问了其他问题，然后感觉又不知道问什么了。转来转去又来问关于StoryBoard方面的知识，并没有什么深入的问题，也难怪了，后来了解到，他们开发的项目都是用的StoryBoard开发的。再次让我历经最久的一次面试是在就医160了，下午如约两点到了他们公司，地址还真不好找，幸好每次都喜欢提前到，不然还真迟到了。一开始HR给了一份笔试题给到我，让我在他们的休息区写题。题目还有点多，选择题、填空题、判断题、简答题、问答题、还有个算法题。写了一个小时，总算是写完了。给到他们，然后他们技术负责人在开会，说实话，这时候不是应该给我一杯暖开水吗？谁在乎你呢？好好等吧，等了大半个小时，总算来了，然后就进入正题，说实话，跟这位面试官还真可以聊的，两个人都能对一个问题讨论的很好，不管是说对技术上还是在以前的工作经验上，聊了一个多小时，感觉他还挺满意的，然后说他们部门经理也要面试我，让我再等一下，这一等又是半个小时过去，还好我比较有耐心吧，下午也没安排其他面试。等到部门经理来了后，第一感觉他是一个很稳重的人，不急不躁的，一开始上来就给了一个算法题目让我想想，看我的思维是怎么样的，现在已经不记得那个算法题目了，不过他也挺有耐心的，一直让我想，其实当时那个算法题目一点眉目都没有，感觉当时再想多久都想不出来，但他还是坚持让我多想想。我想的时候他也没打扰我，在假装的看我的简历，看我的笔试题，看了很多遍。等面完他之后，我以为就结束了，没想到他们还要HR那边面试，HR那边还不止一个人面，两个人一起，一个人记录，一个人跟我谈话，记录的人也偶尔会插上几句话。这一聊就是近两个小时，说实话，那个时候我喉咙都已经干了，一下午都没见过一杯水。直至晚上七点多才面试完，我也是醉了吧。走的时候，我都不太报希望来这个公司上班了。但是过了两三天，他们HR给我来电说面试通过了，还能给到我想要的薪水。但这个时候我却已经答应了我目前上班这几公司入职了。目前这家公司其实也是以前的老领导们创业的一家公司，寄托在一家房地产集团公司下面。</p>\n<h4 id=\"新公司\"><a href=\"#新公司\" class=\"headerlink\" title=\"新公司\"></a>新公司</h4><hr>\n<p>  入职后，由于公司是一家初创的创业公司，还有很多相关人员都没有相继入职，入职第一天就跟另一个做安卓的同事跟着领导飞到了上海总部集团那边出差了解项目。也借此项目出差机会，第一次来到了上海，看到了中国最高楼，看到了东方明珠，看到了上海外滩。不过都很匆忙，就连跟同学聚个餐都是匆匆忙忙。也感谢高中班长同学带着我领略了上海的繁华。说多了感觉像是乡下人进城的感觉哈。<br>  出差三天后回深圳，来新公司正式上班已步入四月份了，第一个月大家都是在相互了解，相互磨合公司的工作方式，公司也还没给到具体的项目，基本也是在维护从上海那边带回来的项目，工作量也挺少的，大部分都是以开会来度过这段时间，要么做一些技术分享，要么做一些管理方面的培训，搭建环境，偶尔领导会做个大讲坛，谈谈我们公司的文化及以后的发展计划。<br>  步入五月份时，终于等到项目需求的到来，但同时也等到了目标，集团希望我们能在六月底上一个版本，替换目前使用的APP和后台。这也是我们第一个项目，也是大家第一次磨合的项目，大家的态度其实很积极，当然加班加多了，需求的改动，时间的压力，也会让一些同事暴露一些不耐烦的态度。直到整个项目测试完成验收，公司组织了一次去珠海长隆完了几天，让大家好好放松放松了下。<br>  后续集团内需要的项目其实还挺多的，客户端的人员并不是很多，而且响应的需求也并不能达到集团领导所需要的期望，所以公司也希望能够快速响应集团领导们的需求，快速做出响应的产品，于是乎，Hybrid App便在公司形成了，我在<a href=\"http://blog.devyan.cn/2016/09/23/使用Cordova搭建混合框架/\">使用Cordova搭建混合框架</a>文章中也稍微提到过此事，但主要还是介绍如何搭建Hybrid App框架的搭建。</p>\n<h4 id=\"我的收获\"><a href=\"#我的收获\" class=\"headerlink\" title=\"我的收获\"></a>我的收获</h4><hr>\n<ul>\n<li>来到新公司，我的职责也开始发生了变化，也不在是存粹的做一名开发者了，同时还要兼顾公司iOS开发方面的技术支持及管理和培养，简称专业线负责人吧。</li>\n<li>由于后期公司大部分产品的开发框架都是由Hybrid APP，因此对这个框架也是日益熟悉，同时也对js和OC之间相互交互更加深入的了解,这里我也写了一篇关于JS与OC之间的交互的文章:<a href=\"http://blog.devyan.cn/2016/11/29/JS与OC交互/\">JS与OC交互</a>.</li>\n<li>项目业务的开发也大部分转移到了H5端，我也有大量的时间去整理知识，对以前由于很多机械工作而导致很多理论的不清晰的点，都有机会去梳理一下了。</li>\n<li>已经开始培养了看书籍的习惯了，希望自己以后能看更多的书籍，让自己补充跟多的内容。</li>\n<li>在项目闲暇的情况下，我也组织了我们组内一起学习swift语言，并一起开发了一个项目。感觉对swift也可以开始上手了。</li>\n<li>在生活上，今年也算是完成了一家大事，工作多年，也多多少少积累了些积蓄，所以也能拿的出一些钱去付房款首付了。</li>\n<li>生活方面我也培养了一些兴趣了，比如游泳，也持续坚持了几个月，每次也可以坚持游一千五百米左右了。还有羽毛球的热情也逐渐上来了，公司每周四都会有羽毛球活动，我作为组织者，每周也一定会过去，再加上周三同学公司的羽毛球活动，他缺一个搭档，于是我也顺其自然的做了他的搭档，今年羽毛球线打断了两根，换了两次线。也给自己买了套羽毛球服，弄了一套完整的装备。至少看起来已经不像以前一样只是过来玩玩而已了。</li>\n</ul>\n<h4 id=\"今年的计划\"><a href=\"#今年的计划\" class=\"headerlink\" title=\"今年的计划\"></a>今年的计划</h4><hr>\n<ul>\n<li>继续会在iOS方面做一部分投入，希望自己专业知识不能放弃。具体落实应该会在算法、设计模式、架构、swift、新知识等方面的研究吧。</li>\n<li>坚持写博客，也希望有更深层次的博客文章的发表。</li>\n<li>希望自己今年能把看书变成自己生活中的一种常态，让自己有更多的知识。</li>\n<li>兴趣爱好方面：羽毛球应该还是会继续保持的，也希望自己在球技方面有更大的提高。游泳也会继续保持。</li>\n</ul>\n"},{"title":"React Native小疙瘩","status":"public","date":"2017-06-15T06:17:48.000Z","_content":"### 前言\n  从去年开始，混合框架开发模式就开始步入到我的实际工作当中，听说过[React Native](http://reactnative.cn),但重来没有真正花时间和精力去了解和学习使用他。去年还写过一篇关于混合框架开发的[使用Cordova搭建混合框架](http://blog.devyan.cn/2016/09/23/使用Cordova搭建混合框架/)文章。主要是介绍使用Cordova框架，这个框架已经在我们公司实践一年多时间了，到目前为止已经有六个APP使用了该框架，效果还是挺突出的，第一个混合框架的出生，也让我感到很惊讶，使用H5也能写出交互效果如此不逊的APP，顿时也开始担心自己的小饭碗了。\n然而最近为什么突然想起了`React Native`呢？总感觉在一个“圈子”里混熟了，混久了，自己很没安全感呢？对，我就是这么一个人，我想多了解一下这方面的技术。毕竟像QQ空间这么热门的APP都在使用该框架，我有什么权利不去了解该框架呢？好了，不多说了，开始学习`React Native`框架吧！\n\n### ‘boost/iterator/iterator_adaptor.hpp’ file not found 问题\n按照[官网](http://reactnative.cn/docs/0.45/getting-started.html#content)的指示，我做的挺顺利的。到最后一步的时，被一个`‘boost/iterator/iterator_adaptor.hpp’ file not found`编译问题折腾了我大半天，google百度出现同样的问题的很多，唯一看到一篇很靠谱的解决方案的[文章](http://vanessa.b3log.org/articles/2017/06/12/1497235254333.html)，却感觉说的很含糊，或着说吧，扯进了一些无关紧要的信息进来，导致我无从下手，其实只需要将`boost_1_63_0.tar.gz`下载下来解压放到`node_modules/react-native/third-party`下即可,跟.rncache文件夹没有任何关系，误导了我找这个文件夹就花了半天，也不知道如何下载该文件！不过总之还是得感谢该作者！让我从不断更新和重装node版本，各个软件环境等错误的尝试中找到一丝灵感。找到了.rncache文件夹，尝试这解压下面的压缩文件，只有`boost_1_63_0.tar.gz`文件解压有问题，所以去[官网](https://sourceforge.net/projects/boost/files/boost/1.63.0/)下载了该文件。总之解决该问题之后，迫不及待的就想要写出第一个Hellow World程序了。\n","source":"_posts/React Native小疙瘩.md","raw":"---\ntitle: React Native小疙瘩\nstatus: public\ndate: 2017-06-15 14:17:48\ncategories: summary\n---\n### 前言\n  从去年开始，混合框架开发模式就开始步入到我的实际工作当中，听说过[React Native](http://reactnative.cn),但重来没有真正花时间和精力去了解和学习使用他。去年还写过一篇关于混合框架开发的[使用Cordova搭建混合框架](http://blog.devyan.cn/2016/09/23/使用Cordova搭建混合框架/)文章。主要是介绍使用Cordova框架，这个框架已经在我们公司实践一年多时间了，到目前为止已经有六个APP使用了该框架，效果还是挺突出的，第一个混合框架的出生，也让我感到很惊讶，使用H5也能写出交互效果如此不逊的APP，顿时也开始担心自己的小饭碗了。\n然而最近为什么突然想起了`React Native`呢？总感觉在一个“圈子”里混熟了，混久了，自己很没安全感呢？对，我就是这么一个人，我想多了解一下这方面的技术。毕竟像QQ空间这么热门的APP都在使用该框架，我有什么权利不去了解该框架呢？好了，不多说了，开始学习`React Native`框架吧！\n\n### ‘boost/iterator/iterator_adaptor.hpp’ file not found 问题\n按照[官网](http://reactnative.cn/docs/0.45/getting-started.html#content)的指示，我做的挺顺利的。到最后一步的时，被一个`‘boost/iterator/iterator_adaptor.hpp’ file not found`编译问题折腾了我大半天，google百度出现同样的问题的很多，唯一看到一篇很靠谱的解决方案的[文章](http://vanessa.b3log.org/articles/2017/06/12/1497235254333.html)，却感觉说的很含糊，或着说吧，扯进了一些无关紧要的信息进来，导致我无从下手，其实只需要将`boost_1_63_0.tar.gz`下载下来解压放到`node_modules/react-native/third-party`下即可,跟.rncache文件夹没有任何关系，误导了我找这个文件夹就花了半天，也不知道如何下载该文件！不过总之还是得感谢该作者！让我从不断更新和重装node版本，各个软件环境等错误的尝试中找到一丝灵感。找到了.rncache文件夹，尝试这解压下面的压缩文件，只有`boost_1_63_0.tar.gz`文件解压有问题，所以去[官网](https://sourceforge.net/projects/boost/files/boost/1.63.0/)下载了该文件。总之解决该问题之后，迫不及待的就想要写出第一个Hellow World程序了。\n","slug":"React Native小疙瘩","published":1,"updated":"2017-06-15T07:08:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvknvh200010b3mm4vbbo4g","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>  从去年开始，混合框架开发模式就开始步入到我的实际工作当中，听说过<a href=\"http://reactnative.cn\" target=\"_blank\" rel=\"external\">React Native</a>,但重来没有真正花时间和精力去了解和学习使用他。去年还写过一篇关于混合框架开发的<a href=\"http://blog.devyan.cn/2016/09/23/使用Cordova搭建混合框架/\" target=\"_blank\" rel=\"external\">使用Cordova搭建混合框架</a>文章。主要是介绍使用Cordova框架，这个框架已经在我们公司实践一年多时间了，到目前为止已经有六个APP使用了该框架，效果还是挺突出的，第一个混合框架的出生，也让我感到很惊讶，使用H5也能写出交互效果如此不逊的APP，顿时也开始担心自己的小饭碗了。<br>然而最近为什么突然想起了<code>React Native</code>呢？总感觉在一个“圈子”里混熟了，混久了，自己很没安全感呢？对，我就是这么一个人，我想多了解一下这方面的技术。毕竟像QQ空间这么热门的APP都在使用该框架，我有什么权利不去了解该框架呢？好了，不多说了，开始学习<code>React Native</code>框架吧！</p>\n<h3 id=\"‘boost-iterator-iterator-adaptor-hpp’-file-not-found-问题\"><a href=\"#‘boost-iterator-iterator-adaptor-hpp’-file-not-found-问题\" class=\"headerlink\" title=\"‘boost/iterator/iterator_adaptor.hpp’ file not found 问题\"></a>‘boost/iterator/iterator_adaptor.hpp’ file not found 问题</h3><p>按照<a href=\"http://reactnative.cn/docs/0.45/getting-started.html#content\" target=\"_blank\" rel=\"external\">官网</a>的指示，我做的挺顺利的。到最后一步的时，被一个<code>‘boost/iterator/iterator_adaptor.hpp’ file not found</code>编译问题折腾了我大半天，google百度出现同样的问题的很多，唯一看到一篇很靠谱的解决方案的<a href=\"http://vanessa.b3log.org/articles/2017/06/12/1497235254333.html\" target=\"_blank\" rel=\"external\">文章</a>，却感觉说的很含糊，或着说吧，扯进了一些无关紧要的信息进来，导致我无从下手，其实只需要将<code>boost_1_63_0.tar.gz</code>下载下来解压放到<code>node_modules/react-native/third-party</code>下即可,跟.rncache文件夹没有任何关系，误导了我找这个文件夹就花了半天，也不知道如何下载该文件！不过总之还是得感谢该作者！让我从不断更新和重装node版本，各个软件环境等错误的尝试中找到一丝灵感。找到了.rncache文件夹，尝试这解压下面的压缩文件，只有<code>boost_1_63_0.tar.gz</code>文件解压有问题，所以去<a href=\"https://sourceforge.net/projects/boost/files/boost/1.63.0/\" target=\"_blank\" rel=\"external\">官网</a>下载了该文件。总之解决该问题之后，迫不及待的就想要写出第一个Hellow World程序了。</p>\n","excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>  从去年开始，混合框架开发模式就开始步入到我的实际工作当中，听说过<a href=\"http://reactnative.cn\">React Native</a>,但重来没有真正花时间和精力去了解和学习使用他。去年还写过一篇关于混合框架开发的<a href=\"http://blog.devyan.cn/2016/09/23/使用Cordova搭建混合框架/\">使用Cordova搭建混合框架</a>文章。主要是介绍使用Cordova框架，这个框架已经在我们公司实践一年多时间了，到目前为止已经有六个APP使用了该框架，效果还是挺突出的，第一个混合框架的出生，也让我感到很惊讶，使用H5也能写出交互效果如此不逊的APP，顿时也开始担心自己的小饭碗了。<br>然而最近为什么突然想起了<code>React Native</code>呢？总感觉在一个“圈子”里混熟了，混久了，自己很没安全感呢？对，我就是这么一个人，我想多了解一下这方面的技术。毕竟像QQ空间这么热门的APP都在使用该框架，我有什么权利不去了解该框架呢？好了，不多说了，开始学习<code>React Native</code>框架吧！</p>\n<h3 id=\"‘boost-iterator-iterator-adaptor-hpp’-file-not-found-问题\"><a href=\"#‘boost-iterator-iterator-adaptor-hpp’-file-not-found-问题\" class=\"headerlink\" title=\"‘boost/iterator/iterator_adaptor.hpp’ file not found 问题\"></a>‘boost/iterator/iterator_adaptor.hpp’ file not found 问题</h3><p>按照<a href=\"http://reactnative.cn/docs/0.45/getting-started.html#content\">官网</a>的指示，我做的挺顺利的。到最后一步的时，被一个<code>‘boost/iterator/iterator_adaptor.hpp’ file not found</code>编译问题折腾了我大半天，google百度出现同样的问题的很多，唯一看到一篇很靠谱的解决方案的<a href=\"http://vanessa.b3log.org/articles/2017/06/12/1497235254333.html\">文章</a>，却感觉说的很含糊，或着说吧，扯进了一些无关紧要的信息进来，导致我无从下手，其实只需要将<code>boost_1_63_0.tar.gz</code>下载下来解压放到<code>node_modules/react-native/third-party</code>下即可,跟.rncache文件夹没有任何关系，误导了我找这个文件夹就花了半天，也不知道如何下载该文件！不过总之还是得感谢该作者！让我从不断更新和重装node版本，各个软件环境等错误的尝试中找到一丝灵感。找到了.rncache文件夹，尝试这解压下面的压缩文件，只有<code>boost_1_63_0.tar.gz</code>文件解压有问题，所以去<a href=\"https://sourceforge.net/projects/boost/files/boost/1.63.0/\">官网</a>下载了该文件。总之解决该问题之后，迫不及待的就想要写出第一个Hellow World程序了。</p>\n"},{"date":"2016-12-13T01:30:00.000Z","status":"public","title":"iterm2配色","_content":"\n1. 首先查看一下你的~/.bash_profile文件是否存在，如果不存在，那么可以通过命令创建\nvim ~/.bash_profile #该命令是查看的，若没有会自动创建该文件。\n创建后将下面内容复制进去：\n\n```\n#enables colorin the terminal bash shell export\n\nCLICOLOR=1\n\n#sets up thecolor scheme for list export\n\nLSCOLORS=gxfxcxdxbxegedabagacad\n\n#sets up theprompt color (currently a green similar to linux terminal)\n\nexportPS1='\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;36m\\]\\w\\[\\033[00m\\]\\$ '\n\n#enables colorfor iTerm\n\nexportTERM=xterm-color\n\n```\n然后按Esc键，继续w q键，保存退出。\n\n2.第二步打开Iterm2->Perferences->Profiles->Terminal\n![](/images/iterm2_Color_2016121301.png)\n\n3.第三步选择配色方案。\n![](/images/iterm2_Colors2016121302.png)\n\n4.最后，如果想要选择更多的配色方案，可以[这里](https://github.com/mbadolato/iTerm2-Color-Schemes)下载。","source":"_posts/iterm配色.md","raw":"---\ndate: 2016-12-13 09:30\nstatus: public\ntitle: iterm2配色\ncategory: 工具\n---\n\n1. 首先查看一下你的~/.bash_profile文件是否存在，如果不存在，那么可以通过命令创建\nvim ~/.bash_profile #该命令是查看的，若没有会自动创建该文件。\n创建后将下面内容复制进去：\n\n```\n#enables colorin the terminal bash shell export\n\nCLICOLOR=1\n\n#sets up thecolor scheme for list export\n\nLSCOLORS=gxfxcxdxbxegedabagacad\n\n#sets up theprompt color (currently a green similar to linux terminal)\n\nexportPS1='\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;36m\\]\\w\\[\\033[00m\\]\\$ '\n\n#enables colorfor iTerm\n\nexportTERM=xterm-color\n\n```\n然后按Esc键，继续w q键，保存退出。\n\n2.第二步打开Iterm2->Perferences->Profiles->Terminal\n![](/images/iterm2_Color_2016121301.png)\n\n3.第三步选择配色方案。\n![](/images/iterm2_Colors2016121302.png)\n\n4.最后，如果想要选择更多的配色方案，可以[这里](https://github.com/mbadolato/iTerm2-Color-Schemes)下载。","slug":"iterm配色","published":1,"updated":"2018-01-26T06:18:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvknvi400030b3ms79hdfz4","content":"<ol>\n<li>首先查看一下你的~/.bash_profile文件是否存在，如果不存在，那么可以通过命令创建<br>vim ~/.bash_profile #该命令是查看的，若没有会自动创建该文件。<br>创建后将下面内容复制进去：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">#enables colorin the terminal bash shell export</div><div class=\"line\"></div><div class=\"line\">CLICOLOR=1</div><div class=\"line\"></div><div class=\"line\">#sets up thecolor scheme for list export</div><div class=\"line\"></div><div class=\"line\">LSCOLORS=gxfxcxdxbxegedabagacad</div><div class=\"line\"></div><div class=\"line\">#sets up theprompt color (currently a green similar to linux terminal)</div><div class=\"line\"></div><div class=\"line\">exportPS1=&apos;\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;36m\\]\\w\\[\\033[00m\\]\\$ &apos;</div><div class=\"line\"></div><div class=\"line\">#enables colorfor iTerm</div><div class=\"line\"></div><div class=\"line\">exportTERM=xterm-color</div></pre></td></tr></table></figure>\n<p>然后按Esc键，继续w q键，保存退出。</p>\n<p>2.第二步打开Iterm2-&gt;Perferences-&gt;Profiles-&gt;Terminal<br><img src=\"/images/iterm2_Color_2016121301.png\" alt=\"\"></p>\n<p>3.第三步选择配色方案。<br><img src=\"/images/iterm2_Colors2016121302.png\" alt=\"\"></p>\n<p>4.最后，如果想要选择更多的配色方案，可以<a href=\"https://github.com/mbadolato/iTerm2-Color-Schemes\" target=\"_blank\" rel=\"external\">这里</a>下载。</p>\n","excerpt":"","more":"<ol>\n<li>首先查看一下你的~/.bash_profile文件是否存在，如果不存在，那么可以通过命令创建<br>vim ~/.bash_profile #该命令是查看的，若没有会自动创建该文件。<br>创建后将下面内容复制进去：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">#enables colorin the terminal bash shell export</div><div class=\"line\"></div><div class=\"line\">CLICOLOR=1</div><div class=\"line\"></div><div class=\"line\">#sets up thecolor scheme for list export</div><div class=\"line\"></div><div class=\"line\">LSCOLORS=gxfxcxdxbxegedabagacad</div><div class=\"line\"></div><div class=\"line\">#sets up theprompt color (currently a green similar to linux terminal)</div><div class=\"line\"></div><div class=\"line\">exportPS1=&apos;\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;36m\\]\\w\\[\\033[00m\\]\\$ &apos;</div><div class=\"line\"></div><div class=\"line\">#enables colorfor iTerm</div><div class=\"line\"></div><div class=\"line\">exportTERM=xterm-color</div></pre></td></tr></table></figure>\n<p>然后按Esc键，继续w q键，保存退出。</p>\n<p>2.第二步打开Iterm2-&gt;Perferences-&gt;Profiles-&gt;Terminal<br><img src=\"/images/iterm2_Color_2016121301.png\" alt=\"\"></p>\n<p>3.第三步选择配色方案。<br><img src=\"/images/iterm2_Colors2016121302.png\" alt=\"\"></p>\n<p>4.最后，如果想要选择更多的配色方案，可以<a href=\"https://github.com/mbadolato/iTerm2-Color-Schemes\">这里</a>下载。</p>\n"},{"title":"截屏遇到的那些事","date":"2017-06-21T07:36:02.000Z","status":"public","_content":"``` objective-c\n- (void)screenShotAction\n{\n    CGSize size = self.webView.size;\n    UIGraphicsBeginImageContextWithOptions(size, NO, [UIScreen mainScreen].scale);\n    [self.webView drawViewHierarchyInRect:CGRectMake(0,0, size.width, size.height) afterScreenUpdates:NO];\n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    image = [self getImageWithRect:CGRectMake(0, 64, kScreenWidth, kScreenHeight-64-50) image:image];\n    self.shotScreenImage = image;\n    UIGraphicsEndImageContext();\n    \n    //写入相册\n    UIImageWriteToSavedPhotosAlbum(image, self, nil, nil);\n    [self testShare];\n}\n\n//截取图片区域图片\n- (UIImage *)getImageWithRect:(CGRect)rect image:(UIImage*)image\n{\n    //图片的缩放比例\n    rect = CGRectMake(rect.origin.x*image.scale, rect.origin.y*image.scale, rect.size.width*image.scale, rect.size.height*image.scale);\n    \n    CGImageRef imageRef = image.CGImage;\n    CGImageRef imagePartRef = CGImageCreateWithImageInRect(imageRef,rect);\n    UIImage *cropImage = [UIImage imageWithCGImage:imagePartRef];\n    CGImageRelease(imagePartRef);\n    \n    return cropImage;\n}\n\n```","source":"_posts/截屏遇到的那些事.md","raw":"---\ntitle: 截屏遇到的那些事\ndate: 2017-06-21 15:36:02\nstatus: public\ncategories:\ntags:\n---\n``` objective-c\n- (void)screenShotAction\n{\n    CGSize size = self.webView.size;\n    UIGraphicsBeginImageContextWithOptions(size, NO, [UIScreen mainScreen].scale);\n    [self.webView drawViewHierarchyInRect:CGRectMake(0,0, size.width, size.height) afterScreenUpdates:NO];\n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    image = [self getImageWithRect:CGRectMake(0, 64, kScreenWidth, kScreenHeight-64-50) image:image];\n    self.shotScreenImage = image;\n    UIGraphicsEndImageContext();\n    \n    //写入相册\n    UIImageWriteToSavedPhotosAlbum(image, self, nil, nil);\n    [self testShare];\n}\n\n//截取图片区域图片\n- (UIImage *)getImageWithRect:(CGRect)rect image:(UIImage*)image\n{\n    //图片的缩放比例\n    rect = CGRectMake(rect.origin.x*image.scale, rect.origin.y*image.scale, rect.size.width*image.scale, rect.size.height*image.scale);\n    \n    CGImageRef imageRef = image.CGImage;\n    CGImageRef imagePartRef = CGImageCreateWithImageInRect(imageRef,rect);\n    UIImage *cropImage = [UIImage imageWithCGImage:imagePartRef];\n    CGImageRelease(imagePartRef);\n    \n    return cropImage;\n}\n\n```","slug":"截屏遇到的那些事","published":1,"updated":"2017-06-21T07:49:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvknvi600040b3m4mn889xf","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)screenShotAction</div><div class=\"line\">&#123;</div><div class=\"line\">    CGSize size = self.webView.size;</div><div class=\"line\">    UIGraphicsBeginImageContextWithOptions(size, NO, [UIScreen mainScreen].scale);</div><div class=\"line\">    [self.webView drawViewHierarchyInRect:CGRectMake(0,0, size.width, size.height) afterScreenUpdates:NO];</div><div class=\"line\">    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();</div><div class=\"line\">    image = [self getImageWithRect:CGRectMake(0, 64, kScreenWidth, kScreenHeight-64-50) image:image];</div><div class=\"line\">    self.shotScreenImage = image;</div><div class=\"line\">    UIGraphicsEndImageContext();</div><div class=\"line\">    </div><div class=\"line\">    //写入相册</div><div class=\"line\">    UIImageWriteToSavedPhotosAlbum(image, self, nil, nil);</div><div class=\"line\">    [self testShare];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//截取图片区域图片</div><div class=\"line\">- (UIImage *)getImageWithRect:(CGRect)rect image:(UIImage*)image</div><div class=\"line\">&#123;</div><div class=\"line\">    //图片的缩放比例</div><div class=\"line\">    rect = CGRectMake(rect.origin.x*image.scale, rect.origin.y*image.scale, rect.size.width*image.scale, rect.size.height*image.scale);</div><div class=\"line\">    </div><div class=\"line\">    CGImageRef imageRef = image.CGImage;</div><div class=\"line\">    CGImageRef imagePartRef = CGImageCreateWithImageInRect(imageRef,rect);</div><div class=\"line\">    UIImage *cropImage = [UIImage imageWithCGImage:imagePartRef];</div><div class=\"line\">    CGImageRelease(imagePartRef);</div><div class=\"line\">    </div><div class=\"line\">    return cropImage;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)screenShotAction</div><div class=\"line\">&#123;</div><div class=\"line\">    CGSize size = self.webView.size;</div><div class=\"line\">    UIGraphicsBeginImageContextWithOptions(size, NO, [UIScreen mainScreen].scale);</div><div class=\"line\">    [self.webView drawViewHierarchyInRect:CGRectMake(0,0, size.width, size.height) afterScreenUpdates:NO];</div><div class=\"line\">    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();</div><div class=\"line\">    image = [self getImageWithRect:CGRectMake(0, 64, kScreenWidth, kScreenHeight-64-50) image:image];</div><div class=\"line\">    self.shotScreenImage = image;</div><div class=\"line\">    UIGraphicsEndImageContext();</div><div class=\"line\">    </div><div class=\"line\">    //写入相册</div><div class=\"line\">    UIImageWriteToSavedPhotosAlbum(image, self, nil, nil);</div><div class=\"line\">    [self testShare];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//截取图片区域图片</div><div class=\"line\">- (UIImage *)getImageWithRect:(CGRect)rect image:(UIImage*)image</div><div class=\"line\">&#123;</div><div class=\"line\">    //图片的缩放比例</div><div class=\"line\">    rect = CGRectMake(rect.origin.x*image.scale, rect.origin.y*image.scale, rect.size.width*image.scale, rect.size.height*image.scale);</div><div class=\"line\">    </div><div class=\"line\">    CGImageRef imageRef = image.CGImage;</div><div class=\"line\">    CGImageRef imagePartRef = CGImageCreateWithImageInRect(imageRef,rect);</div><div class=\"line\">    UIImage *cropImage = [UIImage imageWithCGImage:imagePartRef];</div><div class=\"line\">    CGImageRelease(imagePartRef);</div><div class=\"line\">    </div><div class=\"line\">    return cropImage;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciwm7fobf0002zn3m5854fvsj","category_id":"ciwm7fobo0005zn3m7pyau0xj","_id":"ciwm7fobz000bzn3mrgjti5zq"},{"post_id":"ciwm7fobm0004zn3m0fwiacsu","category_id":"ciwm7fobx0009zn3mszjpq9pw","_id":"ciwm7foc4000gzn3mor02muo4"},{"post_id":"ciwm7fobq0006zn3mwbh1ehbc","category_id":"ciwm7foc0000dzn3mfz2vlj4n","_id":"ciwm7focb000kzn3my25qey9n"},{"post_id":"ciwm7foc7000izn3mz6bc0uqj","category_id":"ciwm7foc0000dzn3mfz2vlj4n","_id":"ciwm7foce000nzn3mdg8lpg2h"},{"post_id":"ciwm7fobs0007zn3mkucw3zqt","category_id":"ciwm7fobx0009zn3mszjpq9pw","_id":"ciwm7focg000qzn3m2jg2925v"},{"post_id":"ciwm7focc000mzn3mppvlsfiq","category_id":"ciwm7foc0000dzn3mfz2vlj4n","_id":"ciwm7foci000szn3mtsvan03w"},{"post_id":"ciwm7fobw0008zn3mp9z6hp9i","category_id":"ciwm7foc0000dzn3mfz2vlj4n","_id":"ciwm7focm000wzn3mhagyymxg"},{"post_id":"ciwm7foce000ozn3masfu0svl","category_id":"ciwm7foc0000dzn3mfz2vlj4n","_id":"ciwm7foco000yzn3m3go9g52l"},{"post_id":"ciwm7fobz000czn3mkip0tjku","category_id":"ciwm7foc0000dzn3mfz2vlj4n","_id":"ciwm7focq0011zn3m63viyko5"},{"post_id":"ciwm7foc1000ezn3mkfhy9zr4","category_id":"ciwm7focm000vzn3mwpslhwnl","_id":"ciwm7focx0016zn3ms8mb6cc9"},{"post_id":"ciwm7foco000zzn3mrbkfah84","category_id":"ciwm7foc0000dzn3mfz2vlj4n","_id":"ciwm7fod1001azn3m41a20ras"},{"post_id":"ciwm7foct0015zn3mh9wg1wmf","category_id":"ciwm7foc0000dzn3mfz2vlj4n","_id":"ciwm7fod3001dzn3mbx2a3xa4"},{"post_id":"ciwm7foc3000fzn3msgqm1a20","category_id":"ciwm7focq0012zn3mufxdn2jx","_id":"ciwm7fod7001gzn3mlhh3nhx3"},{"post_id":"ciwm7fod1001czn3mjkrbp95v","category_id":"ciwm7focm000vzn3mwpslhwnl","_id":"ciwm7fod9001jzn3mdpe94eqk"},{"post_id":"ciwm7focg000rzn3mi95c67yh","category_id":"ciwm7focm000vzn3mwpslhwnl","_id":"ciwm7foda001lzn3mfdk38frv"},{"post_id":"ciwm7fod7001hzn3miw48yuei","category_id":"ciwm7focm000vzn3mwpslhwnl","_id":"ciwm7fodb001mzn3m69cu0e5q"},{"post_id":"ciwm7focj000tzn3mpiocoroc","category_id":"ciwm7fod6001fzn3mexm25hfo","_id":"ciwm7fodc001ozn3mt4v1r70q"},{"post_id":"ciwm7focn000xzn3malf8fcjq","category_id":"ciwm7fod6001fzn3mexm25hfo","_id":"ciwm7fodc001pzn3mdzwkfrdc"},{"post_id":"ciwm7focr0013zn3mtt9e9pzm","category_id":"ciwm7focq0012zn3mufxdn2jx","_id":"ciwm7fodd001rzn3m92awkisn"},{"post_id":"ciwm7focy0017zn3mpddstv7g","category_id":"ciwm7fodd001qzn3m6mj5khq5","_id":"ciwm7fodd001szn3m4k5vw78y"},{"post_id":"cjcvknvi400030b3ms79hdfz4","category_id":"ciwm7fobx0009zn3mszjpq9pw","_id":"cjcvknvi900060b3mska08ygw"},{"post_id":"cjcvknvgs00000b3mjtjgwv70","category_id":"cjcvknvh800020b3mqdnxphqq","_id":"cjcvknvia00070b3m9bz00hn9"},{"post_id":"cjcvknvh200010b3mm4vbbo4g","category_id":"cjcvknvh800020b3mqdnxphqq","_id":"cjcvknvia00080b3mh3amymnr"}],"PostTag":[{"post_id":"ciwm7focg000rzn3mi95c67yh","tag_id":"ciwm7focl000uzn3m69g2ienp","_id":"ciwm7foct0014zn3m8ad4qyki"},{"post_id":"ciwm7focj000tzn3mpiocoroc","tag_id":"ciwm7focq0010zn3m1nfssxf5","_id":"ciwm7fod1001bzn3movdcfj4c"},{"post_id":"ciwm7focr0013zn3mtt9e9pzm","tag_id":"ciwm7focz0018zn3m8yplkjhi","_id":"ciwm7fod8001izn3matakx9m9"}],"Tag":[{"name":"runtime","_id":"ciwm7focl000uzn3m69g2ienp"},{"name":"swift","_id":"ciwm7focq0010zn3m1nfssxf5"},{"name":"Hybrid App","_id":"ciwm7focz0018zn3m8yplkjhi"}]}}